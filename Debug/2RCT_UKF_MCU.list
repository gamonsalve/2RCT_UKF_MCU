
2RCT_UKF_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011070  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08011200  08011200  00021200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119b0  080119b0  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080119b0  080119b0  000219b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119b8  080119b8  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119b8  080119b8  000219b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080119bc  080119bc  000219bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080119c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  200001e0  08011ba0  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08011ba0  000303d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108fa  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037af  00000000  00000000  00040b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  000442c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  00045140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220b6  00000000  00000000  00045d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151b2  00000000  00000000  00067db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c251f  00000000  00000000  0007cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f487  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004850  00000000  00000000  0013f4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080111e8 	.word	0x080111e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080111e8 	.word	0x080111e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <UTMeanCovSqrt_NbgcfSwv>:

/* Function for MATLAB Function: '<S7>/Correct' */
void UTMeanCovSqrt_NbgcfSwv(const real_T meanWeights[2], const real_T
  covWeights[2], real_T OOM, real_T Y1, real_T Y2[6], const real_T X1[3], real_T
  X2[18], real_T *Ymean, real_T *Sy, real_T Pxy[3])
{
 8000ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ffc:	ed2d 8b02 	vpush	{d8}
 8001000:	b0ab      	sub	sp, #172	; 0xac
 8001002:	af00      	add	r7, sp, #0
 8001004:	6378      	str	r0, [r7, #52]	; 0x34
 8001006:	6339      	str	r1, [r7, #48]	; 0x30
 8001008:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800100c:	ed87 1b08 	vstr	d1, [r7, #32]
 8001010:	61fa      	str	r2, [r7, #28]
 8001012:	61bb      	str	r3, [r7, #24]
  real_T covWeights_0;
  real_T covWeights_1;
  real_T signOOM;
  int32_T b_k;
  int32_T knt;
  *Ymean = Y1 * meanWeights[0];
 8001014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800101a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800101e:	f7ff faeb 	bl	80005f8 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800102a:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001034:	e021      	b.n	800107a <UTMeanCovSqrt_NbgcfSwv+0x82>
    *Ymean += Y2[knt] * meanWeights[1];
 8001036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800103a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800103e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	4413      	add	r3, r2
 8001048:	e9d3 0100 	ldrd	r0, r1, [r3]
 800104c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104e:	3308      	adds	r3, #8
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	f7ff fad0 	bl	80005f8 <__aeabi_dmul>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4620      	mov	r0, r4
 800105e:	4629      	mov	r1, r5
 8001060:	f7ff f914 	bl	800028c <__adddf3>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800106c:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8001070:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001074:	3301      	adds	r3, #1
 8001076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800107a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800107e:	2b05      	cmp	r3, #5
 8001080:	ddd9      	ble.n	8001036 <UTMeanCovSqrt_NbgcfSwv+0x3e>
  }

  *Ymean *= OOM;
 8001082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800108a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800108e:	f7ff fab3 	bl	80005f8 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800109a:	e9c1 2300 	strd	r2, r3, [r1]
  Y1 -= *Ymean;
 800109e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010aa:	f7ff f8ed 	bl	8000288 <__aeabi_dsub>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (knt = 0; knt < 6; knt++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80010bc:	e01c      	b.n	80010f8 <UTMeanCovSqrt_NbgcfSwv+0x100>
    Y2[knt] -= *Ymean;
 80010be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	4413      	add	r3, r2
 80010c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80010d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	18d4      	adds	r4, r2, r3
 80010de:	4642      	mov	r2, r8
 80010e0:	464b      	mov	r3, r9
 80010e2:	f7ff f8d1 	bl	8000288 <__aeabi_dsub>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 80010ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010f2:	3301      	adds	r3, #1
 80010f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80010f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	ddde      	ble.n	80010be <UTMeanCovSqrt_NbgcfSwv+0xc6>
  }

  if (rtIsNaN(OOM)) {
 8001100:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001104:	f002 fa40 	bl	8003588 <rtIsNaN>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d005      	beq.n	800111a <UTMeanCovSqrt_NbgcfSwv+0x122>
    signOOM = (rtNaN);
 800110e:	4bbf      	ldr	r3, [pc, #764]	; (800140c <UTMeanCovSqrt_NbgcfSwv+0x414>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001118:	e025      	b.n	8001166 <UTMeanCovSqrt_NbgcfSwv+0x16e>
  } else if (OOM < 0.0) {
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001126:	f7ff fcd9 	bl	8000adc <__aeabi_dcmplt>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <UTMeanCovSqrt_NbgcfSwv+0x144>
    signOOM = -1.0;
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4bb6      	ldr	r3, [pc, #728]	; (8001410 <UTMeanCovSqrt_NbgcfSwv+0x418>)
 8001136:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800113a:	e014      	b.n	8001166 <UTMeanCovSqrt_NbgcfSwv+0x16e>
  } else {
    signOOM = (OOM > 0.0);
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001148:	f7ff fce6 	bl	8000b18 <__aeabi_dcmpgt>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <UTMeanCovSqrt_NbgcfSwv+0x162>
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4baf      	ldr	r3, [pc, #700]	; (8001414 <UTMeanCovSqrt_NbgcfSwv+0x41c>)
 8001158:	e003      	b.n	8001162 <UTMeanCovSqrt_NbgcfSwv+0x16a>
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  covWeights_0 = signOOM * covWeights[0];
 8001166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800116c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001170:	f7ff fa42 	bl	80005f8 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  covWeights_1 = signOOM * covWeights[1];
 800117c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117e:	3308      	adds	r3, #8
 8001180:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001188:	f7ff fa36 	bl	80005f8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  OOM *= signOOM;
 8001194:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001198:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  signOOM = sqrt(covWeights_1);
 80011a8:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 80011ac:	f00f ff3e 	bl	801102c <sqrt>
 80011b0:	eeb0 7a40 	vmov.f32	s14, s0
 80011b4:	eef0 7a60 	vmov.f32	s15, s1
 80011b8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  for (knt = 0; knt < 6; knt++) {
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80011c2:	e01b      	b.n	80011fc <UTMeanCovSqrt_NbgcfSwv+0x204>
    A[knt] = signOOM * Y2[knt];
 80011c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	4413      	add	r3, r2
 80011ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011d6:	f7ff fa0f 	bl	80005f8 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80011e2:	00c9      	lsls	r1, r1, #3
 80011e4:	3190      	adds	r1, #144	; 0x90
 80011e6:	f107 0018 	add.w	r0, r7, #24
 80011ea:	4401      	add	r1, r0
 80011ec:	3940      	subs	r1, #64	; 0x40
 80011ee:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 80011f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011f6:	3301      	adds	r3, #1
 80011f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80011fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001200:	2b05      	cmp	r3, #5
 8001202:	dddf      	ble.n	80011c4 <UTMeanCovSqrt_NbgcfSwv+0x1cc>
  }

  atmp = A[0];
 8001204:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001208:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  signOOM = xnrm2_qRRhL8tE(5, A, 2);
 800120c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001210:	2202      	movs	r2, #2
 8001212:	4619      	mov	r1, r3
 8001214:	2005      	movs	r0, #5
 8001216:	f004 fe6f 	bl	8005ef8 <xnrm2_qRRhL8tE>
 800121a:	eeb0 7a40 	vmov.f32	s14, s0
 800121e:	eef0 7a60 	vmov.f32	s15, s1
 8001222:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  if (signOOM != 0.0) {
 8001226:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	f7ff fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	f040 80f3 	bne.w	8001424 <UTMeanCovSqrt_NbgcfSwv+0x42c>
    signOOM = rt_hypotd_snf(A[0], signOOM);
 800123e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001242:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8001246:	eeb0 1a46 	vmov.f32	s2, s12
 800124a:	eef0 1a66 	vmov.f32	s3, s13
 800124e:	eeb0 0a47 	vmov.f32	s0, s14
 8001252:	eef0 0a67 	vmov.f32	s1, s15
 8001256:	f002 f883 	bl	8003360 <rt_hypotd_snf>
 800125a:	eeb0 7a40 	vmov.f32	s14, s0
 800125e:	eef0 7a60 	vmov.f32	s15, s1
 8001262:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (A[0] >= 0.0) {
 8001266:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	f7ff fc47 	bl	8000b04 <__aeabi_dcmpge>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d009      	beq.n	8001290 <UTMeanCovSqrt_NbgcfSwv+0x298>
      signOOM = -signOOM;
 800127c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001280:	613a      	str	r2, [r7, #16]
 8001282:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	ed97 7b04 	vldr	d7, [r7, #16]
 800128c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    }

    if (fabs(signOOM) < 1.0020841800044864E-292) {
 8001290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001294:	60ba      	str	r2, [r7, #8]
 8001296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80012a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012a8:	f7ff fc18 	bl	8000adc <__aeabi_dcmplt>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 80b4 	beq.w	800141c <UTMeanCovSqrt_NbgcfSwv+0x424>
      knt = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      do {
        knt++;
 80012ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012be:	3301      	adds	r3, #1
 80012c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (b_k = 0; b_k < 5; b_k++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80012ca:	e021      	b.n	8001310 <UTMeanCovSqrt_NbgcfSwv+0x318>
          A[b_k + 1] *= 9.9792015476736E+291;
 80012cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012d0:	3301      	adds	r3, #1
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	3390      	adds	r3, #144	; 0x90
 80012d6:	f107 0218 	add.w	r2, r7, #24
 80012da:	4413      	add	r3, r2
 80012dc:	3b40      	subs	r3, #64	; 0x40
 80012de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012e6:	1c5c      	adds	r4, r3, #1
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <UTMeanCovSqrt_NbgcfSwv+0x420>)
 80012ee:	f7ff f983 	bl	80005f8 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	00e1      	lsls	r1, r4, #3
 80012f8:	3190      	adds	r1, #144	; 0x90
 80012fa:	f107 0018 	add.w	r0, r7, #24
 80012fe:	4401      	add	r1, r0
 8001300:	3940      	subs	r1, #64	; 0x40
 8001302:	e9c1 2300 	strd	r2, r3, [r1]
        for (b_k = 0; b_k < 5; b_k++) {
 8001306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800130a:	3301      	adds	r3, #1
 800130c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001310:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001314:	2b04      	cmp	r3, #4
 8001316:	ddd9      	ble.n	80012cc <UTMeanCovSqrt_NbgcfSwv+0x2d4>
        }

        signOOM *= 9.9792015476736E+291;
 8001318:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <UTMeanCovSqrt_NbgcfSwv+0x420>)
 8001322:	f7ff f969 	bl	80005f8 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        atmp *= 9.9792015476736E+291;
 800132e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <UTMeanCovSqrt_NbgcfSwv+0x420>)
 8001338:	f7ff f95e 	bl	80005f8 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
      } while ((fabs(signOOM) < 1.0020841800044864E-292) && (knt < 20));
 8001344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001348:	603a      	str	r2, [r7, #0]
 800134a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8001358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800135c:	f7ff fbbe 	bl	8000adc <__aeabi_dcmplt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <UTMeanCovSqrt_NbgcfSwv+0x376>
 8001366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800136a:	2b13      	cmp	r3, #19
 800136c:	dda5      	ble.n	80012ba <UTMeanCovSqrt_NbgcfSwv+0x2c2>

      signOOM = rt_hypotd_snf(atmp, xnrm2_qRRhL8tE(5, A, 2));
 800136e:	ed97 8b12 	vldr	d8, [r7, #72]	; 0x48
 8001372:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001376:	2202      	movs	r2, #2
 8001378:	4619      	mov	r1, r3
 800137a:	2005      	movs	r0, #5
 800137c:	f004 fdbc 	bl	8005ef8 <xnrm2_qRRhL8tE>
 8001380:	eeb0 7a40 	vmov.f32	s14, s0
 8001384:	eef0 7a60 	vmov.f32	s15, s1
 8001388:	eeb0 1a47 	vmov.f32	s2, s14
 800138c:	eef0 1a67 	vmov.f32	s3, s15
 8001390:	eeb0 0a48 	vmov.f32	s0, s16
 8001394:	eef0 0a68 	vmov.f32	s1, s17
 8001398:	f001 ffe2 	bl	8003360 <rt_hypotd_snf>
 800139c:	eeb0 7a40 	vmov.f32	s14, s0
 80013a0:	eef0 7a60 	vmov.f32	s15, s1
 80013a4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
      if (atmp >= 0.0) {
 80013a8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	f7ff fba6 	bl	8000b04 <__aeabi_dcmpge>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <UTMeanCovSqrt_NbgcfSwv+0x3d4>
        signOOM = -signOOM;
 80013be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013c2:	4692      	mov	sl, r2
 80013c4:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80013c8:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      }

      for (b_k = 0; b_k < knt; b_k++) {
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80013d2:	e010      	b.n	80013f6 <UTMeanCovSqrt_NbgcfSwv+0x3fe>
        signOOM *= 1.0020841800044864E-292;
 80013d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80013e0:	f7ff f90a 	bl	80005f8 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      for (b_k = 0; b_k < knt; b_k++) {
 80013ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013f0:	3301      	adds	r3, #1
 80013f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80013f6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80013fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80013fe:	429a      	cmp	r2, r3
 8001400:	dbe8      	blt.n	80013d4 <UTMeanCovSqrt_NbgcfSwv+0x3dc>
      }

      atmp = signOOM;
 8001402:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001406:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800140a:	e00b      	b.n	8001424 <UTMeanCovSqrt_NbgcfSwv+0x42c>
 800140c:	20000210 	.word	0x20000210
 8001410:	bff00000 	.word	0xbff00000
 8001414:	3ff00000 	.word	0x3ff00000
 8001418:	7c900000 	.word	0x7c900000
    } else {
      atmp = signOOM;
 800141c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001420:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }
  }

  if (rtIsNaN(covWeights_0)) {
 8001424:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001428:	eeb0 0a47 	vmov.f32	s0, s14
 800142c:	eef0 0a67 	vmov.f32	s1, s15
 8001430:	f002 f8aa 	bl	8003588 <rtIsNaN>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <UTMeanCovSqrt_NbgcfSwv+0x44e>
    signOOM = (rtNaN);
 800143a:	4bb3      	ldr	r3, [pc, #716]	; (8001708 <UTMeanCovSqrt_NbgcfSwv+0x710>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001444:	e025      	b.n	8001492 <UTMeanCovSqrt_NbgcfSwv+0x49a>
  } else if (covWeights_0 < 0.0) {
 8001446:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	f7ff fb43 	bl	8000adc <__aeabi_dcmplt>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <UTMeanCovSqrt_NbgcfSwv+0x470>
    signOOM = -1.0;
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4baa      	ldr	r3, [pc, #680]	; (800170c <UTMeanCovSqrt_NbgcfSwv+0x714>)
 8001462:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001466:	e014      	b.n	8001492 <UTMeanCovSqrt_NbgcfSwv+0x49a>
  } else {
    signOOM = (covWeights_0 > 0.0);
 8001468:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	f7ff fb50 	bl	8000b18 <__aeabi_dcmpgt>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <UTMeanCovSqrt_NbgcfSwv+0x48e>
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	4ba3      	ldr	r3, [pc, #652]	; (8001710 <UTMeanCovSqrt_NbgcfSwv+0x718>)
 8001484:	e003      	b.n	800148e <UTMeanCovSqrt_NbgcfSwv+0x496>
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  if (signOOM == 1.0) {
 8001492:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b9d      	ldr	r3, [pc, #628]	; (8001710 <UTMeanCovSqrt_NbgcfSwv+0x718>)
 800149c:	f7ff fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d021      	beq.n	80014ea <UTMeanCovSqrt_NbgcfSwv+0x4f2>
    rotate_3AIOL9tK(atmp, Y1, &signOOM, &atmp, &covWeights_0);
 80014a6:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80014aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014ae:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80014b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014b6:	4618      	mov	r0, r3
 80014b8:	ed97 1b08 	vldr	d1, [r7, #32]
 80014bc:	eeb0 0a47 	vmov.f32	s0, s14
 80014c0:	eef0 0a67 	vmov.f32	s1, s15
 80014c4:	f001 fdb6 	bl	8003034 <rotate_3AIOL9tK>
    *Sy = sqrt(OOM) * covWeights_0;
 80014c8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80014cc:	f00f fdae 	bl	801102c <sqrt>
 80014d0:	ec51 0b10 	vmov	r0, r1, d0
 80014d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80014d8:	f7ff f88e 	bl	80005f8 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80014e4:	e9c1 2300 	strd	r2, r3, [r1]
 80014e8:	e01a      	b.n	8001520 <UTMeanCovSqrt_NbgcfSwv+0x528>
  } else {
    signOOM = atmp;
 80014ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80014ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    cholUpdateFactor_nL0sYPvM(&signOOM, Y1);
 80014f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014f6:	ed97 0b08 	vldr	d0, [r7, #32]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f90a 	bl	8001714 <cholUpdateFactor_nL0sYPvM>
    *Sy = sqrt(OOM) * signOOM;
 8001500:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001504:	f00f fd92 	bl	801102c <sqrt>
 8001508:	ec51 0b10 	vmov	r0, r1, d0
 800150c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001510:	f7ff f872 	bl	80005f8 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800151c:	e9c1 2300 	strd	r2, r3, [r1]
  }

  for (knt = 0; knt < 6; knt++) {
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001526:	e065      	b.n	80015f4 <UTMeanCovSqrt_NbgcfSwv+0x5fc>
    X2[3 * knt] -= X1[0];
 8001528:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	461a      	mov	r2, r3
 8001536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800153a:	4413      	add	r3, r2
 800153c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001546:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	461a      	mov	r2, r3
 8001554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001558:	189e      	adds	r6, r3, r2
 800155a:	4622      	mov	r2, r4
 800155c:	462b      	mov	r3, r5
 800155e:	f7fe fe93 	bl	8000288 <__aeabi_dsub>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	e9c6 2300 	strd	r2, r3, [r6]
    b_k = 3 * knt + 1;
 800156a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	3301      	adds	r3, #1
 8001576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    X2[b_k] -= X1[1];
 800157a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001584:	4413      	add	r3, r2
 8001586:	e9d3 0100 	ldrd	r0, r1, [r3]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	3308      	adds	r3, #8
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8001596:	00e4      	lsls	r4, r4, #3
 8001598:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 800159c:	442c      	add	r4, r5
 800159e:	f7fe fe73 	bl	8000288 <__aeabi_dsub>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	e9c4 2300 	strd	r2, r3, [r4]
    b_k = 3 * knt + 2;
 80015aa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	3302      	adds	r3, #2
 80015b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    X2[b_k] -= X1[2];
 80015ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80015c4:	4413      	add	r3, r2
 80015c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	3310      	adds	r3, #16
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 80015d6:	00e4      	lsls	r4, r4, #3
 80015d8:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 80015dc:	442c      	add	r4, r5
 80015de:	f7fe fe53 	bl	8000288 <__aeabi_dsub>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 6; knt++) {
 80015ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80015ee:	3301      	adds	r3, #1
 80015f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	dd95      	ble.n	8001528 <UTMeanCovSqrt_NbgcfSwv+0x530>
  }

  signOOM = covWeights_1 * OOM;
 80015fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001604:	f7fe fff8 	bl	80005f8 <__aeabi_dmul>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  for (knt = 0; knt < 3; knt++) {
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001616:	e06b      	b.n	80016f0 <UTMeanCovSqrt_NbgcfSwv+0x6f8>
    X2_0[knt] = 0.0;
 8001618:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	3390      	adds	r3, #144	; 0x90
 8001620:	f107 0218 	add.w	r2, r7, #24
 8001624:	4413      	add	r3, r2
 8001626:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_k = 0; b_k < 6; b_k++) {
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800163c:	e037      	b.n	80016ae <UTMeanCovSqrt_NbgcfSwv+0x6b6>
      X2_0[knt] += X2[3 * b_k + knt] * Y2[b_k];
 800163e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	3390      	adds	r3, #144	; 0x90
 8001646:	f107 0218 	add.w	r2, r7, #24
 800164a:	4413      	add	r3, r2
 800164c:	3b58      	subs	r3, #88	; 0x58
 800164e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001652:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	441a      	add	r2, r3
 800165c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001668:	4413      	add	r3, r2
 800166a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800166e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe ffbc 	bl	80005f8 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe fe00 	bl	800028c <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001694:	00c9      	lsls	r1, r1, #3
 8001696:	3190      	adds	r1, #144	; 0x90
 8001698:	f107 0018 	add.w	r0, r7, #24
 800169c:	4401      	add	r1, r0
 800169e:	3958      	subs	r1, #88	; 0x58
 80016a0:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_k = 0; b_k < 6; b_k++) {
 80016a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016a8:	3301      	adds	r3, #1
 80016aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80016ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	ddc3      	ble.n	800163e <UTMeanCovSqrt_NbgcfSwv+0x646>
    }

    Pxy[knt] = X2_0[knt] * signOOM;
 80016b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	3390      	adds	r3, #144	; 0x90
 80016be:	f107 0218 	add.w	r2, r7, #24
 80016c2:	4413      	add	r3, r2
 80016c4:	3b58      	subs	r3, #88	; 0x58
 80016c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016ce:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80016d2:	00e4      	lsls	r4, r4, #3
 80016d4:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 80016d8:	442c      	add	r4, r5
 80016da:	f7fe ff8d 	bl	80005f8 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	e9c4 2300 	strd	r2, r3, [r4]
  for (knt = 0; knt < 3; knt++) {
 80016e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016ea:	3301      	adds	r3, #1
 80016ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	dd8f      	ble.n	8001618 <UTMeanCovSqrt_NbgcfSwv+0x620>
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	37ac      	adds	r7, #172	; 0xac
 80016fe:	46bd      	mov	sp, r7
 8001700:	ecbd 8b02 	vpop	{d8}
 8001704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001708:	20000210 	.word	0x20000210
 800170c:	bff00000 	.word	0xbff00000
 8001710:	3ff00000 	.word	0x3ff00000

08001714 <cholUpdateFactor_nL0sYPvM>:
#include "rotate_3AIOL9tK.h"
#include "rt_nonfinite.h"

/* Function for MATLAB Function: '<S7>/Correct' */
void cholUpdateFactor_nL0sYPvM(real_T *S, real_T U)
{
 8001714:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001718:	b092      	sub	sp, #72	; 0x48
 800171a:	af00      	add	r7, sp, #0
 800171c:	6178      	str	r0, [r7, #20]
 800171e:	ed87 0b02 	vstr	d0, [r7, #8]
  real_T alpha;
  real_T c;
  real_T nrmx;
  real_T s;
  int8_T p;
  R = *S;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  p = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (*S == 0.0) {
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	f7ff f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <cholUpdateFactor_nL0sYPvM+0x3e>
    p = 2;
 800174a:	2302      	movs	r3, #2
 800174c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001750:	e069      	b.n	8001826 <cholUpdateFactor_nL0sYPvM+0x112>
  } else {
    s = U / *S;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800175c:	f7ff f876 	bl	800084c <__aeabi_ddiv>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    nrmx = fabs(s);
 8001768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800176e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	ed97 7b00 	vldr	d7, [r7]
 8001778:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if (nrmx >= 1.0) {
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <cholUpdateFactor_nL0sYPvM+0x1e0>)
 8001782:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001786:	f7ff f9bd 	bl	8000b04 <__aeabi_dcmpge>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <cholUpdateFactor_nL0sYPvM+0x84>
      p = 1;
 8001790:	2301      	movs	r3, #1
 8001792:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001796:	e046      	b.n	8001826 <cholUpdateFactor_nL0sYPvM+0x112>
    } else {
      rotate_3AIOL9tK(sqrt(1.0 - nrmx * nrmx), s, &R, &c, &alpha);
 8001798:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800179c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017a0:	f7fe ff2a 	bl	80005f8 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	f04f 0000 	mov.w	r0, #0
 80017ac:	4951      	ldr	r1, [pc, #324]	; (80018f4 <cholUpdateFactor_nL0sYPvM+0x1e0>)
 80017ae:	f7fe fd6b 	bl	8000288 <__aeabi_dsub>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	ec43 2b17 	vmov	d7, r2, r3
 80017ba:	eeb0 0a47 	vmov.f32	s0, s14
 80017be:	eef0 0a67 	vmov.f32	s1, s15
 80017c2:	f00f fc33 	bl	801102c <sqrt>
 80017c6:	eeb0 7a40 	vmov.f32	s14, s0
 80017ca:	eef0 7a60 	vmov.f32	s15, s1
 80017ce:	f107 0220 	add.w	r2, r7, #32
 80017d2:	f107 0118 	add.w	r1, r7, #24
 80017d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017da:	4618      	mov	r0, r3
 80017dc:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 80017e0:	eeb0 0a47 	vmov.f32	s0, s14
 80017e4:	eef0 0a67 	vmov.f32	s1, s15
 80017e8:	f001 fc24 	bl	8003034 <rotate_3AIOL9tK>
      R = R * *S - c * 0.0;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017f6:	f7fe feff 	bl	80005f8 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4690      	mov	r8, r2
 8001800:	4699      	mov	r9, r3
 8001802:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	f7fe fef3 	bl	80005f8 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4640      	mov	r0, r8
 8001818:	4649      	mov	r1, r9
 800181a:	f7fe fd35 	bl	8000288 <__aeabi_dsub>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }
  }

  *S = R;
 8001826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800182a:	6979      	ldr	r1, [r7, #20]
 800182c:	e9c1 2300 	strd	r2, r3, [r1]
  if (p != 0) {
 8001830:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001834:	2b00      	cmp	r3, #0
 8001836:	d057      	beq.n	80018e8 <cholUpdateFactor_nL0sYPvM+0x1d4>
    s = R * R - U * U;
 8001838:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800183c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001840:	f7fe feda 	bl	80005f8 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4690      	mov	r8, r2
 800184a:	4699      	mov	r9, r3
 800184c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001850:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001854:	f7fe fed0 	bl	80005f8 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4640      	mov	r0, r8
 800185e:	4649      	mov	r1, r9
 8001860:	f7fe fd12 	bl	8000288 <__aeabi_dsub>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!rtIsInf(s)) && (!rtIsNaN(s))) {
 800186c:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001870:	f001 fe66 	bl	8003540 <rtIsInf>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d11d      	bne.n	80018b6 <cholUpdateFactor_nL0sYPvM+0x1a2>
 800187a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800187e:	f001 fe83 	bl	8003588 <rtIsNaN>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d116      	bne.n	80018b6 <cholUpdateFactor_nL0sYPvM+0x1a2>
      nrmx = 1.0;
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <cholUpdateFactor_nL0sYPvM+0x1e0>)
 800188e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      if (s != 0.0) {
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800189e:	f7ff f913 	bl	8000ac8 <__aeabi_dcmpeq>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d110      	bne.n	80018ca <cholUpdateFactor_nL0sYPvM+0x1b6>
        s = fabs(s);
 80018a8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80018aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ac:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80018b0:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
      if (s != 0.0) {
 80018b4:	e009      	b.n	80018ca <cholUpdateFactor_nL0sYPvM+0x1b6>
      }
    } else {
      s = (rtNaN);
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <cholUpdateFactor_nL0sYPvM+0x1e4>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      nrmx = (rtNaN);
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <cholUpdateFactor_nL0sYPvM+0x1e4>)
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    *S = nrmx * sqrt(s);
 80018ca:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80018ce:	f00f fbad 	bl	801102c <sqrt>
 80018d2:	ec51 0b10 	vmov	r0, r1, d0
 80018d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018da:	f7fe fe8d 	bl	80005f8 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	6979      	ldr	r1, [r7, #20]
 80018e4:	e9c1 2300 	strd	r2, r3, [r1]
  }
}
 80018e8:	bf00      	nop
 80018ea:	3748      	adds	r7, #72	; 0x48
 80018ec:	46bd      	mov	sp, r7
 80018ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018f2:	bf00      	nop
 80018f4:	3ff00000 	.word	0x3ff00000
 80018f8:	20000210 	.word	0x20000210

080018fc <div_nde_s32_floor>:

#include "div_nde_s32_floor.h"
#include "rtwtypes.h"

int32_T div_nde_s32_floor(int32_T numerator, int32_T denominator)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  return (((numerator < 0) != (denominator < 0)) && (numerator % denominator !=
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0fdb      	lsrs	r3, r3, #31
 800190a:	b2da      	uxtb	r2, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	0fdb      	lsrs	r3, r3, #31
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4053      	eors	r3, r2
 8001914:	b2db      	uxtb	r3, r3
           0) ? -1 : 0) + numerator / denominator;
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00c      	beq.n	8001934 <div_nde_s32_floor+0x38>
  return (((numerator < 0) != (denominator < 0)) && (numerator % denominator !=
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	fb01 f202 	mul.w	r2, r1, r2
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <div_nde_s32_floor+0x38>
           0) ? -1 : 0) + numerator / denominator;
 800192e:	f04f 32ff 	mov.w	r2, #4294967295
 8001932:	e000      	b.n	8001936 <div_nde_s32_floor+0x3a>
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	fb91 f3f3 	sdiv	r3, r1, r3
 800193e:	4413      	add	r3, r2
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <look1_binlx>:
#include "look1_binlx.h"
#include "rtwtypes.h"

real_T look1_binlx(real_T u0, const real_T bp0[], const real_T table[], uint32_T
                   maxIndex)
{
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b08e      	sub	sp, #56	; 0x38
 8001950:	af00      	add	r7, sp, #0
 8001952:	ed87 0b04 	vstr	d0, [r7, #16]
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001966:	f7ff f8c3 	bl	8000af0 <__aeabi_dcmple>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d020      	beq.n	80019b2 <look1_binlx+0x66>
    iLeft = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800197e:	f7fe fc83 	bl	8000288 <__aeabi_dsub>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4614      	mov	r4, r2
 8001988:	461d      	mov	r5, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3308      	adds	r3, #8
 800198e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fc76 	bl	8000288 <__aeabi_dsub>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	f7fe ff52 	bl	800084c <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80019b0:	e087      	b.n	8001ac2 <look1_binlx+0x176>
  } else if (u0 < bp0[maxIndex]) {
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4413      	add	r3, r2
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019c2:	f7ff f88b 	bl	8000adc <__aeabi_dcmplt>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d04b      	beq.n	8001a64 <look1_binlx+0x118>
    uint32_T bpIdx;
    uint32_T iRght;

    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 80019da:	e016      	b.n	8001a0a <look1_binlx+0xbe>
      if (u0 < bp0[bpIdx]) {
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019ec:	f7ff f876 	bl	8000adc <__aeabi_dcmplt>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <look1_binlx+0xb0>
        iRght = bpIdx;
 80019f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
 80019fa:	e001      	b.n	8001a00 <look1_binlx+0xb4>
      } else {
        iLeft = bpIdx;
 80019fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8001a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a04:	4413      	add	r3, r2
 8001a06:	085b      	lsrs	r3, r3, #1
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d8e3      	bhi.n	80019dc <look1_binlx+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a24:	f7fe fc30 	bl	8000288 <__aeabi_dsub>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	461d      	mov	r5, r3
 8001a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a32:	3301      	adds	r3, #1
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4413      	add	r3, r2
 8001a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fc1d 	bl	8000288 <__aeabi_dsub>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4620      	mov	r0, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	f7fe fef9 	bl	800084c <__aeabi_ddiv>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001a62:	e02e      	b.n	8001ac2 <look1_binlx+0x176>
  } else {
    iLeft = maxIndex - 1U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001a70:	3b01      	subs	r3, #1
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a80:	f7fe fc02 	bl	8000288 <__aeabi_dsub>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4614      	mov	r4, r2
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7fe fbed 	bl	8000288 <__aeabi_dsub>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fec9 	bl	800084c <__aeabi_ddiv>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'wrapping'
   */
  yL_0d0 = table[iLeft];
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	4413      	add	r3, r2
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	4413      	add	r3, r2
 8001adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae4:	f7fe fbd0 	bl	8000288 <__aeabi_dsub>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001af4:	f7fe fd80 	bl	80005f8 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b04:	f7fe fbc2 	bl	800028c <__adddf3>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b10:	eeb0 0a47 	vmov.f32	s0, s14
 8001b14:	eef0 0a67 	vmov.f32	s1, s15
 8001b18:	3738      	adds	r7, #56	; 0x38
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b20 <qr_cqxNMU1I>:
#include "xgemv_QDh8c9kG.h"
#include "xgerc_kAS2vIrq.h"

/* Function for MATLAB Function: '<S8>/Predict' */
void qr_cqxNMU1I(const real_T A[18], real_T Q[18], real_T R[9])
{
 8001b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b24:	b0a9      	sub	sp, #164	; 0xa4
 8001b26:	af04      	add	r7, sp, #16
 8001b28:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001b2a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b2c:	627a      	str	r2, [r7, #36]	; 0x24
  int32_T exitg1;
  int32_T ii;
  int32_T itau;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&Q[0], &A[0], 18U * sizeof(real_T));
 8001b2e:	2290      	movs	r2, #144	; 0x90
 8001b30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b34:	f00a ffd6 	bl	800cae4 <memcpy>
  work[0] = 0.0;
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  work[1] = 0.0;
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  work[2] = 0.0;
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (itau = 0; itau < 3; itau++) {
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b60:	e2c8      	b.n	80020f4 <qr_cqxNMU1I+0x5d4>
    real_T atmp;
    real_T beta1;
    ii = itau * 6 + itau;
 8001b62:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b64:	4613      	mov	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	1a9b      	subs	r3, r3, r2
 8001b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    atmp = Q[ii];
 8001b6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b6e:	00da      	lsls	r2, r3, #3
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	4413      	add	r3, r2
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    b_lastv = ii + 2;
 8001b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b7e:	3302      	adds	r3, #2
 8001b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    tau[itau] = 0.0;
 8001b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	3370      	adds	r3, #112	; 0x70
 8001b8a:	f107 0220 	add.w	r2, r7, #32
 8001b8e:	4413      	add	r3, r2
 8001b90:	f1a3 0148 	sub.w	r1, r3, #72	; 0x48
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	e9c1 2300 	strd	r2, r3, [r1]
    beta1 = xnrm2_VmvcPHhE(5 - itau, Q, ii + 2);
 8001ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ba2:	f1c3 0005 	rsb	r0, r3, #5
 8001ba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ba8:	3302      	adds	r3, #2
 8001baa:	461a      	mov	r2, r3
 8001bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bae:	f004 f8f5 	bl	8005d9c <xnrm2_VmvcPHhE>
 8001bb2:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
    if (beta1 != 0.0) {
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001bc2:	f7fe ff81 	bl	8000ac8 <__aeabi_dcmpeq>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 81a3 	bne.w	8001f14 <qr_cqxNMU1I+0x3f4>
      beta1 = rt_hypotd_snf(Q[ii], beta1);
 8001bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bd0:	00da      	lsls	r2, r3, #3
 8001bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd4:	4413      	add	r3, r2
 8001bd6:	ed93 7b00 	vldr	d7, [r3]
 8001bda:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 8001bde:	eeb0 0a47 	vmov.f32	s0, s14
 8001be2:	eef0 0a67 	vmov.f32	s1, s15
 8001be6:	f001 fbbb 	bl	8003360 <rt_hypotd_snf>
 8001bea:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
      if (Q[ii] >= 0.0) {
 8001bee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bf0:	00da      	lsls	r2, r3, #3
 8001bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf4:	4413      	add	r3, r2
 8001bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	f7fe ff7f 	bl	8000b04 <__aeabi_dcmpge>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <qr_cqxNMU1I+0xf8>
        beta1 = -beta1;
 8001c0c:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8001c0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c10:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8001c14:	e9c7 5618 	strd	r5, r6, [r7, #96]	; 0x60
      }

      if (fabs(beta1) < 1.0020841800044864E-292) {
 8001c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c1a:	61bb      	str	r3, [r7, #24]
 8001c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8001c2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c30:	f7fe ff54 	bl	8000adc <__aeabi_dcmplt>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8101 	beq.w	8001e3e <qr_cqxNMU1I+0x31e>
        knt = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	677b      	str	r3, [r7, #116]	; 0x74
        b_coltop = (ii - itau) + 6;
 8001c40:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	3306      	adds	r3, #6
 8001c48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        do {
          knt++;
 8001c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c4e:	3301      	adds	r3, #1
 8001c50:	677b      	str	r3, [r7, #116]	; 0x74
          for (coltop = b_lastv; coltop <= b_coltop; coltop++) {
 8001c52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c5a:	e01f      	b.n	8001c9c <qr_cqxNMU1I+0x17c>
            Q[coltop - 1] *= 9.9792015476736E+291;
 8001c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c60:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001c64:	3b01      	subs	r3, #1
 8001c66:	00da      	lsls	r2, r3, #3
 8001c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6a:	4413      	add	r3, r2
 8001c6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c74:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	00da      	lsls	r2, r3, #3
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	189c      	adds	r4, r3, r2
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	4b8d      	ldr	r3, [pc, #564]	; (8001ebc <qr_cqxNMU1I+0x39c>)
 8001c86:	f7fe fcb7 	bl	80005f8 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	e9c4 2300 	strd	r2, r3, [r4]
          for (coltop = b_lastv; coltop <= b_coltop; coltop++) {
 8001c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c96:	3301      	adds	r3, #1
 8001c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	ddd9      	ble.n	8001c5c <qr_cqxNMU1I+0x13c>
          }

          beta1 *= 9.9792015476736E+291;
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	4b83      	ldr	r3, [pc, #524]	; (8001ebc <qr_cqxNMU1I+0x39c>)
 8001cae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001cb2:	f7fe fca1 	bl	80005f8 <__aeabi_dmul>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
          atmp *= 9.9792015476736E+291;
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b7e      	ldr	r3, [pc, #504]	; (8001ebc <qr_cqxNMU1I+0x39c>)
 8001cc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001cc8:	f7fe fc96 	bl	80005f8 <__aeabi_dmul>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
        } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 8001cd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8001ce8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cec:	f7fe fef6 	bl	8000adc <__aeabi_dcmplt>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <qr_cqxNMU1I+0x1dc>
 8001cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cf8:	2b13      	cmp	r3, #19
 8001cfa:	dda7      	ble.n	8001c4c <qr_cqxNMU1I+0x12c>

        beta1 = rt_hypotd_snf(atmp, xnrm2_VmvcPHhE(5 - itau, Q, ii + 2));
 8001cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cfe:	f1c3 0005 	rsb	r0, r3, #5
 8001d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d04:	3302      	adds	r3, #2
 8001d06:	461a      	mov	r2, r3
 8001d08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d0a:	f004 f847 	bl	8005d9c <xnrm2_VmvcPHhE>
 8001d0e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d12:	eef0 7a60 	vmov.f32	s15, s1
 8001d16:	eeb0 1a47 	vmov.f32	s2, s14
 8001d1a:	eef0 1a67 	vmov.f32	s3, s15
 8001d1e:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001d22:	f001 fb1d 	bl	8003360 <rt_hypotd_snf>
 8001d26:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
        if (atmp >= 0.0) {
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001d36:	f7fe fee5 	bl	8000b04 <__aeabi_dcmpge>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <qr_cqxNMU1I+0x234>
          beta1 = -beta1;
 8001d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	ed97 7b00 	vldr	d7, [r7]
 8001d50:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
        }

        tau[itau] = (beta1 - atmp) / beta1;
 8001d54:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001d5c:	f7fe fa94 	bl	8000288 <__aeabi_dsub>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d6c:	f7fe fd6e 	bl	800084c <__aeabi_ddiv>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	3370      	adds	r3, #112	; 0x70
 8001d7e:	f107 0220 	add.w	r2, r7, #32
 8001d82:	4413      	add	r3, r2
 8001d84:	3b48      	subs	r3, #72	; 0x48
 8001d86:	e9c3 0100 	strd	r0, r1, [r3]
        atmp = 1.0 / (atmp - beta1);
 8001d8a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001d92:	f7fe fa79 	bl	8000288 <__aeabi_dsub>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	4948      	ldr	r1, [pc, #288]	; (8001ec0 <qr_cqxNMU1I+0x3a0>)
 8001da0:	f7fe fd54 	bl	800084c <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
        for (coltop = b_lastv; coltop <= b_coltop; coltop++) {
 8001dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001db4:	e01e      	b.n	8001df4 <qr_cqxNMU1I+0x2d4>
          Q[coltop - 1] *= atmp;
 8001db6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	00da      	lsls	r2, r3, #3
 8001dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc4:	4413      	add	r3, r2
 8001dc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	00da      	lsls	r2, r3, #3
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd8:	189c      	adds	r4, r3, r2
 8001dda:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001dde:	f7fe fc0b 	bl	80005f8 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	e9c4 2300 	strd	r2, r3, [r4]
        for (coltop = b_lastv; coltop <= b_coltop; coltop++) {
 8001dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dee:	3301      	adds	r3, #1
 8001df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001df4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	ddda      	ble.n	8001db6 <qr_cqxNMU1I+0x296>
        }

        for (b_lastv = 0; b_lastv < knt; b_lastv++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e06:	e010      	b.n	8001e2a <qr_cqxNMU1I+0x30a>
          beta1 *= 1.0020841800044864E-292;
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8001e10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e14:	f7fe fbf0 	bl	80005f8 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
        for (b_lastv = 0; b_lastv < knt; b_lastv++) {
 8001e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e24:	3301      	adds	r3, #1
 8001e26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e30:	429a      	cmp	r2, r3
 8001e32:	dbe9      	blt.n	8001e08 <qr_cqxNMU1I+0x2e8>
        }

        atmp = beta1;
 8001e34:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e38:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8001e3c:	e06a      	b.n	8001f14 <qr_cqxNMU1I+0x3f4>
      } else {
        tau[itau] = (beta1 - Q[ii]) / beta1;
 8001e3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e40:	00da      	lsls	r2, r3, #3
 8001e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e44:	4413      	add	r3, r2
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e4e:	f7fe fa1b 	bl	8000288 <__aeabi_dsub>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e5e:	f7fe fcf5 	bl	800084c <__aeabi_ddiv>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	3370      	adds	r3, #112	; 0x70
 8001e70:	f107 0220 	add.w	r2, r7, #32
 8001e74:	4413      	add	r3, r2
 8001e76:	3b48      	subs	r3, #72	; 0x48
 8001e78:	e9c3 0100 	strd	r0, r1, [r3]
        atmp = 1.0 / (Q[ii] - beta1);
 8001e7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e7e:	00da      	lsls	r2, r3, #3
 8001e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e82:	4413      	add	r3, r2
 8001e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e88:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e8c:	f7fe f9fc 	bl	8000288 <__aeabi_dsub>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	f04f 0000 	mov.w	r0, #0
 8001e98:	4909      	ldr	r1, [pc, #36]	; (8001ec0 <qr_cqxNMU1I+0x3a0>)
 8001e9a:	f7fe fcd7 	bl	800084c <__aeabi_ddiv>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
        knt = (ii - itau) + 6;
 8001ea6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	3306      	adds	r3, #6
 8001eae:	677b      	str	r3, [r7, #116]	; 0x74
        for (b_coltop = b_lastv; b_coltop <= knt; b_coltop++) {
 8001eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001eb8:	e023      	b.n	8001f02 <qr_cqxNMU1I+0x3e2>
 8001eba:	bf00      	nop
 8001ebc:	7c900000 	.word	0x7c900000
 8001ec0:	3ff00000 	.word	0x3ff00000
          Q[b_coltop - 1] *= atmp;
 8001ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ec8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	00da      	lsls	r2, r3, #3
 8001ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed2:	4413      	add	r3, r2
 8001ed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001edc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	00da      	lsls	r2, r3, #3
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	189c      	adds	r4, r3, r2
 8001ee8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001eec:	f7fe fb84 	bl	80005f8 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	e9c4 2300 	strd	r2, r3, [r4]
        for (b_coltop = b_lastv; b_coltop <= knt; b_coltop++) {
 8001ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001efc:	3301      	adds	r3, #1
 8001efe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001f02:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	dddb      	ble.n	8001ec4 <qr_cqxNMU1I+0x3a4>
        }

        atmp = beta1;
 8001f0c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001f10:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
      }
    }

    Q[ii] = atmp;
 8001f14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f16:	00da      	lsls	r2, r3, #3
 8001f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1a:	1899      	adds	r1, r3, r2
 8001f1c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001f20:	e9c1 2300 	strd	r2, r3, [r1]
    if (itau + 1 < 3) {
 8001f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	f300 80e1 	bgt.w	80020ee <qr_cqxNMU1I+0x5ce>
      beta1 = Q[ii];
 8001f2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f2e:	00da      	lsls	r2, r3, #3
 8001f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f32:	4413      	add	r3, r2
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
      Q[ii] = 1.0;
 8001f3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f3e:	00da      	lsls	r2, r3, #3
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	1899      	adds	r1, r3, r2
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	4bb3      	ldr	r3, [pc, #716]	; (8002218 <qr_cqxNMU1I+0x6f8>)
 8001f4a:	e9c1 2300 	strd	r2, r3, [r1]
      if (tau[itau] != 0.0) {
 8001f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	3370      	adds	r3, #112	; 0x70
 8001f54:	f107 0220 	add.w	r2, r7, #32
 8001f58:	4413      	add	r3, r2
 8001f5a:	3b48      	subs	r3, #72	; 0x48
 8001f5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	f7fe fdae 	bl	8000ac8 <__aeabi_dcmpeq>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d17c      	bne.n	800206c <qr_cqxNMU1I+0x54c>
        b_lastv = 6 - itau;
 8001f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f74:	f1c3 0306 	rsb	r3, r3, #6
 8001f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        knt = (ii - itau) + 5;
 8001f7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	3305      	adds	r3, #5
 8001f84:	677b      	str	r3, [r7, #116]	; 0x74
        while ((b_lastv > 0) && (Q[knt] == 0.0)) {
 8001f86:	e007      	b.n	8001f98 <qr_cqxNMU1I+0x478>
          b_lastv--;
 8001f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          knt--;
 8001f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f94:	3b01      	subs	r3, #1
 8001f96:	677b      	str	r3, [r7, #116]	; 0x74
        while ((b_lastv > 0) && (Q[knt] == 0.0)) {
 8001f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	dd0e      	ble.n	8001fbe <qr_cqxNMU1I+0x49e>
 8001fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa2:	00da      	lsls	r2, r3, #3
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	4413      	add	r3, r2
 8001fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	f7fe fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1e4      	bne.n	8001f88 <qr_cqxNMU1I+0x468>
        }

        knt = 2 - itau;
 8001fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fc0:	f1c3 0302 	rsb	r3, r3, #2
 8001fc4:	677b      	str	r3, [r7, #116]	; 0x74
        exitg2 = false;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        while ((!exitg2) && (knt > 0)) {
 8001fcc:	e046      	b.n	800205c <qr_cqxNMU1I+0x53c>
          b_coltop = ((knt - 1) * 6 + ii) + 6;
 8001fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	461a      	mov	r2, r3
 8001fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fde:	4413      	add	r3, r2
 8001fe0:	3306      	adds	r3, #6
 8001fe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          coltop = b_coltop;
 8001fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          do {
            exitg1 = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            if (coltop + 1 <= b_coltop + b_lastv) {
 8001ff4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ffc:	441a      	add	r2, r3
 8001ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002002:	4293      	cmp	r3, r2
 8002004:	da19      	bge.n	800203a <qr_cqxNMU1I+0x51a>
              if (Q[coltop] != 0.0) {
 8002006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800200a:	00da      	lsls	r2, r3, #3
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	4413      	add	r3, r2
 8002010:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	f7fe fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d103      	bne.n	800202e <qr_cqxNMU1I+0x50e>
                exitg1 = 1;
 8002026:	2301      	movs	r3, #1
 8002028:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800202c:	e00b      	b.n	8002046 <qr_cqxNMU1I+0x526>
              } else {
                coltop++;
 800202e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002032:	3301      	adds	r3, #1
 8002034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002038:	e005      	b.n	8002046 <qr_cqxNMU1I+0x526>
              }
            } else {
              knt--;
 800203a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800203c:	3b01      	subs	r3, #1
 800203e:	677b      	str	r3, [r7, #116]	; 0x74
              exitg1 = 2;
 8002040:	2302      	movs	r3, #2
 8002042:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
          } while (exitg1 == 0);
 8002046:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0cf      	beq.n	8001fee <qr_cqxNMU1I+0x4ce>

          if (exitg1 == 1) {
 800204e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002052:	2b01      	cmp	r3, #1
 8002054:	d102      	bne.n	800205c <qr_cqxNMU1I+0x53c>
            exitg2 = true;
 8002056:	2301      	movs	r3, #1
 8002058:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        while ((!exitg2) && (knt > 0)) {
 800205c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002060:	2b00      	cmp	r3, #0
 8002062:	d108      	bne.n	8002076 <qr_cqxNMU1I+0x556>
 8002064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002066:	2b00      	cmp	r3, #0
 8002068:	dcb1      	bgt.n	8001fce <qr_cqxNMU1I+0x4ae>
 800206a:	e004      	b.n	8002076 <qr_cqxNMU1I+0x556>
          }
        }
      } else {
        b_lastv = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        knt = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	677b      	str	r3, [r7, #116]	; 0x74
      }

      if (b_lastv > 0) {
 8002076:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800207a:	2b00      	cmp	r3, #0
 800207c:	dd2f      	ble.n	80020de <qr_cqxNMU1I+0x5be>
        xgemv_QDh8c9kG(b_lastv, knt, Q, ii + 7, Q, ii + 1, work);
 800207e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002080:	1dd9      	adds	r1, r3, #7
 8002082:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800208a:	9302      	str	r3, [sp, #8]
 800208c:	9201      	str	r2, [sp, #4]
 800208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	460b      	mov	r3, r1
 8002094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002096:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002098:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800209c:	f003 fc4d 	bl	800593a <xgemv_QDh8c9kG>
        xgerc_kAS2vIrq(b_lastv, knt, -tau[itau], ii + 1, work, Q, ii + 7);
 80020a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	3370      	adds	r3, #112	; 0x70
 80020a6:	f107 0220 	add.w	r2, r7, #32
 80020aa:	4413      	add	r3, r2
 80020ac:	3b48      	subs	r3, #72	; 0x48
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	60ba      	str	r2, [r7, #8]
 80020b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020bc:	1c59      	adds	r1, r3, #1
 80020be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020c0:	3307      	adds	r3, #7
 80020c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	460a      	mov	r2, r1
 80020d0:	ed97 0b02 	vldr	d0, [r7, #8]
 80020d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80020d6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80020da:	f003 fd2f 	bl	8005b3c <xgerc_kAS2vIrq>
      }

      Q[ii] = beta1;
 80020de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020e0:	00da      	lsls	r2, r3, #3
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	1899      	adds	r1, r3, r2
 80020e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80020ea:	e9c1 2300 	strd	r2, r3, [r1]
  for (itau = 0; itau < 3; itau++) {
 80020ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020f0:	3301      	adds	r3, #1
 80020f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80020f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	f77f ad33 	ble.w	8001b62 <qr_cqxNMU1I+0x42>
    }
  }

  for (itau = 0; itau < 3; itau++) {
 80020fc:	2300      	movs	r3, #0
 80020fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002100:	e04e      	b.n	80021a0 <qr_cqxNMU1I+0x680>
    for (ii = 0; ii <= itau; ii++) {
 8002102:	2300      	movs	r3, #0
 8002104:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002106:	e01a      	b.n	800213e <qr_cqxNMU1I+0x61e>
      R[ii + 3 * itau] = Q[6 * itau + ii];
 8002108:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	461a      	mov	r2, r3
 8002114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800211c:	18d0      	adds	r0, r2, r3
 800211e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	441a      	add	r2, r3
 8002126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212e:	18d1      	adds	r1, r2, r3
 8002130:	e9d0 2300 	ldrd	r2, r3, [r0]
 8002134:	e9c1 2300 	strd	r2, r3, [r1]
    for (ii = 0; ii <= itau; ii++) {
 8002138:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800213a:	3301      	adds	r3, #1
 800213c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800213e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002142:	429a      	cmp	r2, r3
 8002144:	dde0      	ble.n	8002108 <qr_cqxNMU1I+0x5e8>
    }

    for (ii = itau + 2; ii < 4; ii++) {
 8002146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002148:	3302      	adds	r3, #2
 800214a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800214c:	e014      	b.n	8002178 <qr_cqxNMU1I+0x658>
      R[(ii + 3 * itau) - 1] = 0.0;
 800214e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	441a      	add	r2, r3
 8002156:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002158:	4413      	add	r3, r2
 800215a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800215e:	3b01      	subs	r3, #1
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	18d1      	adds	r1, r2, r3
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	e9c1 2300 	strd	r2, r3, [r1]
    for (ii = itau + 2; ii < 4; ii++) {
 8002172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002174:	3301      	adds	r3, #1
 8002176:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800217a:	2b03      	cmp	r3, #3
 800217c:	dde7      	ble.n	800214e <qr_cqxNMU1I+0x62e>
    }

    work[itau] = 0.0;
 800217e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	3370      	adds	r3, #112	; 0x70
 8002184:	f107 0220 	add.w	r2, r7, #32
 8002188:	4413      	add	r3, r2
 800218a:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	e9c1 2300 	strd	r2, r3, [r1]
  for (itau = 0; itau < 3; itau++) {
 800219a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800219c:	3301      	adds	r3, #1
 800219e:	67bb      	str	r3, [r7, #120]	; 0x78
 80021a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	ddad      	ble.n	8002102 <qr_cqxNMU1I+0x5e2>
  }

  for (ii = 2; ii >= 0; ii--) {
 80021a6:	2302      	movs	r3, #2
 80021a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021aa:	e15f      	b.n	800246c <qr_cqxNMU1I+0x94c>
    b_lastv = (ii * 6 + ii) + 7;
 80021ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (ii + 1 < 3) {
 80021ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	f300 80db 	bgt.w	8002378 <qr_cqxNMU1I+0x858>
      Q[b_lastv - 7] = 1.0;
 80021c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021c6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80021ca:	3b07      	subs	r3, #7
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021d0:	18d1      	adds	r1, r2, r3
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <qr_cqxNMU1I+0x6f8>)
 80021d8:	e9c1 2300 	strd	r2, r3, [r1]
      if (tau[ii] != 0.0) {
 80021dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	3370      	adds	r3, #112	; 0x70
 80021e2:	f107 0220 	add.w	r2, r7, #32
 80021e6:	4413      	add	r3, r2
 80021e8:	3b48      	subs	r3, #72	; 0x48
 80021ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	f7fe fc67 	bl	8000ac8 <__aeabi_dcmpeq>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f040 8084 	bne.w	800230a <qr_cqxNMU1I+0x7ea>
        knt = 6 - ii;
 8002202:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002204:	f1c3 0306 	rsb	r3, r3, #6
 8002208:	677b      	str	r3, [r7, #116]	; 0x74
        b_coltop = b_lastv - ii;
 800220a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800220e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while ((knt > 0) && (Q[b_coltop - 2] == 0.0)) {
 8002216:	e009      	b.n	800222c <qr_cqxNMU1I+0x70c>
 8002218:	3ff00000 	.word	0x3ff00000
          knt--;
 800221c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800221e:	3b01      	subs	r3, #1
 8002220:	677b      	str	r3, [r7, #116]	; 0x74
          b_coltop--;
 8002222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002226:	3b01      	subs	r3, #1
 8002228:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while ((knt > 0) && (Q[b_coltop - 2] == 0.0)) {
 800222c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800222e:	2b00      	cmp	r3, #0
 8002230:	dd12      	ble.n	8002258 <qr_cqxNMU1I+0x738>
 8002232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002236:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800223a:	3b02      	subs	r3, #2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002240:	4413      	add	r3, r2
 8002242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	f7fe fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e1      	bne.n	800221c <qr_cqxNMU1I+0x6fc>
        }

        b_coltop = 2 - ii;
 8002258:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800225a:	f1c3 0302 	rsb	r3, r3, #2
 800225e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        exitg2 = false;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        while ((!exitg2) && (b_coltop > 0)) {
 8002268:	e046      	b.n	80022f8 <qr_cqxNMU1I+0x7d8>
          coltop = (b_coltop - 1) * 6 + b_lastv;
 800226a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800226e:	1e5a      	subs	r2, r3, #1
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	461a      	mov	r2, r3
 800227a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800227e:	4413      	add	r3, r2
 8002280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          itau = coltop;
 8002284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002288:	67bb      	str	r3, [r7, #120]	; 0x78
          do {
            exitg1 = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            if (itau <= (coltop + knt) - 1) {
 8002290:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002296:	4413      	add	r3, r2
 8002298:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800229a:	429a      	cmp	r2, r3
 800229c:	da19      	bge.n	80022d2 <qr_cqxNMU1I+0x7b2>
              if (Q[itau - 1] != 0.0) {
 800229e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022a0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80022a4:	3b01      	subs	r3, #1
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022aa:	4413      	add	r3, r2
 80022ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	f7fe fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <qr_cqxNMU1I+0x7aa>
                exitg1 = 1;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022c8:	e00b      	b.n	80022e2 <qr_cqxNMU1I+0x7c2>
              } else {
                itau++;
 80022ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022cc:	3301      	adds	r3, #1
 80022ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80022d0:	e007      	b.n	80022e2 <qr_cqxNMU1I+0x7c2>
              }
            } else {
              b_coltop--;
 80022d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d6:	3b01      	subs	r3, #1
 80022d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
              exitg1 = 2;
 80022dc:	2302      	movs	r3, #2
 80022de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
          } while (exitg1 == 0);
 80022e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0cf      	beq.n	800228a <qr_cqxNMU1I+0x76a>

          if (exitg1 == 1) {
 80022ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d102      	bne.n	80022f8 <qr_cqxNMU1I+0x7d8>
            exitg2 = true;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        while ((!exitg2) && (b_coltop > 0)) {
 80022f8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <qr_cqxNMU1I+0x7f4>
 8002300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002304:	2b00      	cmp	r3, #0
 8002306:	dcb0      	bgt.n	800226a <qr_cqxNMU1I+0x74a>
 8002308:	e004      	b.n	8002314 <qr_cqxNMU1I+0x7f4>
          }
        }
      } else {
        knt = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	677b      	str	r3, [r7, #116]	; 0x74
        b_coltop = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      }

      if (knt > 0) {
 8002314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002316:	2b00      	cmp	r3, #0
 8002318:	dd2e      	ble.n	8002378 <qr_cqxNMU1I+0x858>
        xgemv_QDh8c9kG(knt, b_coltop, Q, b_lastv, Q, b_lastv - 6, work);
 800231a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800231e:	3b06      	subs	r3, #6
 8002320:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002324:	9202      	str	r2, [sp, #8]
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002332:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002336:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002338:	f003 faff 	bl	800593a <xgemv_QDh8c9kG>
        xgerc_kAS2vIrq(knt, b_coltop, -tau[ii], b_lastv - 6, work, Q, b_lastv);
 800233c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	3370      	adds	r3, #112	; 0x70
 8002342:	f107 0220 	add.w	r2, r7, #32
 8002346:	4413      	add	r3, r2
 8002348:	3b48      	subs	r3, #72	; 0x48
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	4692      	mov	sl, r2
 8002350:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002358:	1f9a      	subs	r2, r3, #6
 800235a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800235e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	460b      	mov	r3, r1
 800236a:	ec4b ab10 	vmov	d0, sl, fp
 800236e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002372:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002374:	f003 fbe2 	bl	8005b3c <xgerc_kAS2vIrq>
      }
    }

    knt = (b_lastv - ii) - 1;
 8002378:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800237c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	677b      	str	r3, [r7, #116]	; 0x74
    for (b_coltop = b_lastv - 5; b_coltop <= knt; b_coltop++) {
 8002384:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002388:	3b05      	subs	r3, #5
 800238a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800238e:	e02a      	b.n	80023e6 <qr_cqxNMU1I+0x8c6>
      Q[b_coltop - 1] *= -tau[ii];
 8002390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002394:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002398:	3b01      	subs	r3, #1
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800239e:	4413      	add	r3, r2
 80023a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	3370      	adds	r3, #112	; 0x70
 80023aa:	f107 0220 	add.w	r2, r7, #32
 80023ae:	4413      	add	r3, r2
 80023b0:	3b48      	subs	r3, #72	; 0x48
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	4690      	mov	r8, r2
 80023b8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80023bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023c0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80023c4:	3b01      	subs	r3, #1
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ca:	18d4      	adds	r4, r2, r3
 80023cc:	4642      	mov	r2, r8
 80023ce:	464b      	mov	r3, r9
 80023d0:	f7fe f912 	bl	80005f8 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	e9c4 2300 	strd	r2, r3, [r4]
    for (b_coltop = b_lastv - 5; b_coltop <= knt; b_coltop++) {
 80023dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e0:	3301      	adds	r3, #1
 80023e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80023ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ec:	429a      	cmp	r2, r3
 80023ee:	ddcf      	ble.n	8002390 <qr_cqxNMU1I+0x870>
    }

    Q[b_lastv - 7] = 1.0 - tau[ii];
 80023f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	3370      	adds	r3, #112	; 0x70
 80023f6:	f107 0220 	add.w	r2, r7, #32
 80023fa:	4413      	add	r3, r2
 80023fc:	3b48      	subs	r3, #72	; 0x48
 80023fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002402:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002406:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800240a:	3b07      	subs	r3, #7
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002410:	18d4      	adds	r4, r2, r3
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	f04f 0000 	mov.w	r0, #0
 800241a:	4919      	ldr	r1, [pc, #100]	; (8002480 <qr_cqxNMU1I+0x960>)
 800241c:	f7fd ff34 	bl	8000288 <__aeabi_dsub>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	e9c4 2300 	strd	r2, r3, [r4]
    for (b_coltop = 0; b_coltop < ii; b_coltop++) {
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800242e:	e015      	b.n	800245c <qr_cqxNMU1I+0x93c>
      Q[(b_lastv - b_coltop) - 8] = 0.0;
 8002430:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800243e:	3b08      	subs	r3, #8
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002444:	18d1      	adds	r1, r2, r3
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_coltop = 0; b_coltop < ii; b_coltop++) {
 8002452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002456:	3301      	adds	r3, #1
 8002458:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800245c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002460:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002462:	429a      	cmp	r2, r3
 8002464:	dbe4      	blt.n	8002430 <qr_cqxNMU1I+0x910>
  for (ii = 2; ii >= 0; ii--) {
 8002466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002468:	3b01      	subs	r3, #1
 800246a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800246c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800246e:	2b00      	cmp	r3, #0
 8002470:	f6bf ae9c 	bge.w	80021ac <qr_cqxNMU1I+0x68c>
    }
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3794      	adds	r7, #148	; 0x94
 800247a:	46bd      	mov	sp, r7
 800247c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002480:	3ff00000 	.word	0x3ff00000

08002484 <qr_zNlMH7mU>:
#include "xgemv_4E6oVMBP.h"
#include "xgerc_duqdQXG2.h"

/* Function for MATLAB Function: '<S7>/Correct' */
void qr_zNlMH7mU(const real_T A[9], real_T Q[9], real_T R[9])
{
 8002484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002488:	b0bb      	sub	sp, #236	; 0xec
 800248a:	af04      	add	r7, sp, #16
 800248c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800248e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002490:	627a      	str	r2, [r7, #36]	; 0x24
  int32_T exitg1;
  int32_T ii;
  int32_T itau;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 8002492:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002496:	2248      	movs	r2, #72	; 0x48
 8002498:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800249a:	4618      	mov	r0, r3
 800249c:	f00a fb22 	bl	800cae4 <memcpy>
  tau[0] = 0.0;
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  work[0] = 0.0;
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  tau[1] = 0.0;
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  work[1] = 0.0;
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  tau[2] = 0.0;
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  work[2] = 0.0;
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (itau = 0; itau < 3; itau++) {
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024ee:	e342      	b.n	8002b76 <qr_zNlMH7mU+0x6f2>
    ii = itau * 3 + itau;
 80024f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (itau + 1 < 3) {
 80024fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024fe:	2b01      	cmp	r3, #1
 8002500:	f300 832e 	bgt.w	8002b60 <qr_zNlMH7mU+0x6dc>
      real_T atmp;
      real_T beta1;
      atmp = b_A[ii];
 8002504:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	33b8      	adds	r3, #184	; 0xb8
 800250c:	f107 0220 	add.w	r2, r7, #32
 8002510:	4413      	add	r3, r2
 8002512:	3b78      	subs	r3, #120	; 0x78
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
      b_lastv = ii + 2;
 800251c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002520:	3302      	adds	r3, #2
 8002522:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      tau[itau] = 0.0;
 8002526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	33b8      	adds	r3, #184	; 0xb8
 800252e:	f107 0220 	add.w	r2, r7, #32
 8002532:	4413      	add	r3, r2
 8002534:	f1a3 0190 	sub.w	r1, r3, #144	; 0x90
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9c1 2300 	strd	r2, r3, [r1]
      beta1 = xnrm2_zhvkBxcX(2 - itau, b_A, ii + 2);
 8002544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002548:	f1c3 0002 	rsb	r0, r3, #2
 800254c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002550:	1c9a      	adds	r2, r3, #2
 8002552:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002556:	4619      	mov	r1, r3
 8002558:	f003 fd7c 	bl	8006054 <xnrm2_zhvkBxcX>
 800255c:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
      if (beta1 != 0.0) {
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800256c:	f7fe faac 	bl	8000ac8 <__aeabi_dcmpeq>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 81d7 	bne.w	8002926 <qr_zNlMH7mU+0x4a2>
        beta1 = rt_hypotd_snf(b_A[ii], beta1);
 8002578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	33b8      	adds	r3, #184	; 0xb8
 8002580:	f107 0220 	add.w	r2, r7, #32
 8002584:	4413      	add	r3, r2
 8002586:	3b78      	subs	r3, #120	; 0x78
 8002588:	ed93 7b00 	vldr	d7, [r3]
 800258c:	ed97 1b2a 	vldr	d1, [r7, #168]	; 0xa8
 8002590:	eeb0 0a47 	vmov.f32	s0, s14
 8002594:	eef0 0a67 	vmov.f32	s1, s15
 8002598:	f000 fee2 	bl	8003360 <rt_hypotd_snf>
 800259c:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
        if (b_A[ii] >= 0.0) {
 80025a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	33b8      	adds	r3, #184	; 0xb8
 80025a8:	f107 0220 	add.w	r2, r7, #32
 80025ac:	4413      	add	r3, r2
 80025ae:	3b78      	subs	r3, #120	; 0x78
 80025b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	f7fe faa2 	bl	8000b04 <__aeabi_dcmpge>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <qr_zNlMH7mU+0x152>
          beta1 = -beta1;
 80025c6:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 80025ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025ce:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 80025d2:	e9c7 562a 	strd	r5, r6, [r7, #168]	; 0xa8
        }

        if (fabs(beta1) < 1.0020841800044864E-292) {
 80025d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80025ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025f2:	f7fe fa73 	bl	8000adc <__aeabi_dcmplt>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 8118 	beq.w	800282e <qr_zNlMH7mU+0x3aa>
          knt = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
          b_coltop = (ii - itau) + 3;
 8002604:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	3303      	adds	r3, #3
 8002610:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
          do {
            knt++;
 8002614:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002618:	3301      	adds	r3, #1
 800261a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            for (coltop = b_lastv; coltop <= b_coltop; coltop++) {
 800261e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002622:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002626:	e023      	b.n	8002670 <qr_zNlMH7mU+0x1ec>
              b_A[coltop - 1] *= 9.9792015476736E+291;
 8002628:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800262c:	3b01      	subs	r3, #1
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	33b8      	adds	r3, #184	; 0xb8
 8002632:	f107 0220 	add.w	r2, r7, #32
 8002636:	4413      	add	r3, r2
 8002638:	3b78      	subs	r3, #120	; 0x78
 800263a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800263e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002642:	1e5c      	subs	r4, r3, #1
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	4b9e      	ldr	r3, [pc, #632]	; (80028c4 <qr_zNlMH7mU+0x440>)
 800264a:	f7fd ffd5 	bl	80005f8 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	00e3      	lsls	r3, r4, #3
 8002658:	33b8      	adds	r3, #184	; 0xb8
 800265a:	f107 0220 	add.w	r2, r7, #32
 800265e:	4413      	add	r3, r2
 8002660:	3b78      	subs	r3, #120	; 0x78
 8002662:	e9c3 0100 	strd	r0, r1, [r3]
            for (coltop = b_lastv; coltop <= b_coltop; coltop++) {
 8002666:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800266a:	3301      	adds	r3, #1
 800266c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002670:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002678:	429a      	cmp	r2, r3
 800267a:	ddd5      	ble.n	8002628 <qr_zNlMH7mU+0x1a4>
            }

            beta1 *= 9.9792015476736E+291;
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	4b90      	ldr	r3, [pc, #576]	; (80028c4 <qr_zNlMH7mU+0x440>)
 8002682:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002686:	f7fd ffb7 	bl	80005f8 <__aeabi_dmul>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
            atmp *= 9.9792015476736E+291;
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	4b8b      	ldr	r3, [pc, #556]	; (80028c4 <qr_zNlMH7mU+0x440>)
 8002698:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800269c:	f7fd ffac 	bl	80005f8 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
          } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 80026a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80026c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026c4:	f7fe fa0a 	bl	8000adc <__aeabi_dcmplt>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <qr_zNlMH7mU+0x252>
 80026ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026d2:	2b13      	cmp	r3, #19
 80026d4:	dd9e      	ble.n	8002614 <qr_zNlMH7mU+0x190>

          beta1 = rt_hypotd_snf(atmp, xnrm2_zhvkBxcX(2 - itau, b_A, ii + 2));
 80026d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026da:	f1c3 0002 	rsb	r0, r3, #2
 80026de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026e2:	1c9a      	adds	r2, r3, #2
 80026e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80026e8:	4619      	mov	r1, r3
 80026ea:	f003 fcb3 	bl	8006054 <xnrm2_zhvkBxcX>
 80026ee:	eeb0 7a40 	vmov.f32	s14, s0
 80026f2:	eef0 7a60 	vmov.f32	s15, s1
 80026f6:	eeb0 1a47 	vmov.f32	s2, s14
 80026fa:	eef0 1a67 	vmov.f32	s3, s15
 80026fe:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 8002702:	f000 fe2d 	bl	8003360 <rt_hypotd_snf>
 8002706:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
          if (atmp >= 0.0) {
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002716:	f7fe f9f5 	bl	8000b04 <__aeabi_dcmpge>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00b      	beq.n	8002738 <qr_zNlMH7mU+0x2b4>
            beta1 = -beta1;
 8002720:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800272a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	ed97 7b00 	vldr	d7, [r7]
 8002734:	ed87 7b2a 	vstr	d7, [r7, #168]	; 0xa8
          }

          tau[itau] = (beta1 - atmp) / beta1;
 8002738:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800273c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002740:	f7fd fda2 	bl	8000288 <__aeabi_dsub>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002750:	f7fe f87c 	bl	800084c <__aeabi_ddiv>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	33b8      	adds	r3, #184	; 0xb8
 8002764:	f107 0220 	add.w	r2, r7, #32
 8002768:	4413      	add	r3, r2
 800276a:	3b90      	subs	r3, #144	; 0x90
 800276c:	e9c3 0100 	strd	r0, r1, [r3]
          atmp = 1.0 / (atmp - beta1);
 8002770:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002774:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002778:	f7fd fd86 	bl	8000288 <__aeabi_dsub>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	f04f 0000 	mov.w	r0, #0
 8002784:	4950      	ldr	r1, [pc, #320]	; (80028c8 <qr_zNlMH7mU+0x444>)
 8002786:	f7fe f861 	bl	800084c <__aeabi_ddiv>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
          for (coltop = b_lastv; coltop <= b_coltop; coltop++) {
 8002792:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002796:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800279a:	e022      	b.n	80027e2 <qr_zNlMH7mU+0x35e>
            b_A[coltop - 1] *= atmp;
 800279c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027a0:	3b01      	subs	r3, #1
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	33b8      	adds	r3, #184	; 0xb8
 80027a6:	f107 0220 	add.w	r2, r7, #32
 80027aa:	4413      	add	r3, r2
 80027ac:	3b78      	subs	r3, #120	; 0x78
 80027ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027b6:	1e5c      	subs	r4, r3, #1
 80027b8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80027bc:	f7fd ff1c 	bl	80005f8 <__aeabi_dmul>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	00e3      	lsls	r3, r4, #3
 80027ca:	33b8      	adds	r3, #184	; 0xb8
 80027cc:	f107 0220 	add.w	r2, r7, #32
 80027d0:	4413      	add	r3, r2
 80027d2:	3b78      	subs	r3, #120	; 0x78
 80027d4:	e9c3 0100 	strd	r0, r1, [r3]
          for (coltop = b_lastv; coltop <= b_coltop; coltop++) {
 80027d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027dc:	3301      	adds	r3, #1
 80027de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027e2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80027e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ea:	429a      	cmp	r2, r3
 80027ec:	ddd6      	ble.n	800279c <qr_zNlMH7mU+0x318>
          }

          for (b_lastv = 0; b_lastv < knt; b_lastv++) {
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027f4:	e010      	b.n	8002818 <qr_zNlMH7mU+0x394>
            beta1 *= 1.0020841800044864E-292;
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80027fe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002802:	f7fd fef9 	bl	80005f8 <__aeabi_dmul>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
          for (b_lastv = 0; b_lastv < knt; b_lastv++) {
 800280e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002812:	3301      	adds	r3, #1
 8002814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002818:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800281c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002820:	429a      	cmp	r2, r3
 8002822:	dbe8      	blt.n	80027f6 <qr_zNlMH7mU+0x372>
          }

          atmp = beta1;
 8002824:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002828:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 800282c:	e07b      	b.n	8002926 <qr_zNlMH7mU+0x4a2>
        } else {
          tau[itau] = (beta1 - b_A[ii]) / beta1;
 800282e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	33b8      	adds	r3, #184	; 0xb8
 8002836:	f107 0220 	add.w	r2, r7, #32
 800283a:	4413      	add	r3, r2
 800283c:	3b78      	subs	r3, #120	; 0x78
 800283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002842:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002846:	f7fd fd1f 	bl	8000288 <__aeabi_dsub>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002856:	f7fd fff9 	bl	800084c <__aeabi_ddiv>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	33b8      	adds	r3, #184	; 0xb8
 800286a:	f107 0220 	add.w	r2, r7, #32
 800286e:	4413      	add	r3, r2
 8002870:	3b90      	subs	r3, #144	; 0x90
 8002872:	e9c3 0100 	strd	r0, r1, [r3]
          atmp = 1.0 / (b_A[ii] - beta1);
 8002876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	33b8      	adds	r3, #184	; 0xb8
 800287e:	f107 0220 	add.w	r2, r7, #32
 8002882:	4413      	add	r3, r2
 8002884:	3b78      	subs	r3, #120	; 0x78
 8002886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800288a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800288e:	f7fd fcfb 	bl	8000288 <__aeabi_dsub>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	f04f 0000 	mov.w	r0, #0
 800289a:	490b      	ldr	r1, [pc, #44]	; (80028c8 <qr_zNlMH7mU+0x444>)
 800289c:	f7fd ffd6 	bl	800084c <__aeabi_ddiv>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
          knt = (ii - itau) + 3;
 80028a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80028ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	3303      	adds	r3, #3
 80028b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
          for (b_coltop = b_lastv; b_coltop <= knt; b_coltop++) {
 80028b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80028c0:	e027      	b.n	8002912 <qr_zNlMH7mU+0x48e>
 80028c2:	bf00      	nop
 80028c4:	7c900000 	.word	0x7c900000
 80028c8:	3ff00000 	.word	0x3ff00000
            b_A[b_coltop - 1] *= atmp;
 80028cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028d0:	3b01      	subs	r3, #1
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	33b8      	adds	r3, #184	; 0xb8
 80028d6:	f107 0220 	add.w	r2, r7, #32
 80028da:	4413      	add	r3, r2
 80028dc:	3b78      	subs	r3, #120	; 0x78
 80028de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028e6:	1e5c      	subs	r4, r3, #1
 80028e8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80028ec:	f7fd fe84 	bl	80005f8 <__aeabi_dmul>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	00e3      	lsls	r3, r4, #3
 80028fa:	33b8      	adds	r3, #184	; 0xb8
 80028fc:	f107 0220 	add.w	r2, r7, #32
 8002900:	4413      	add	r3, r2
 8002902:	3b78      	subs	r3, #120	; 0x78
 8002904:	e9c3 0100 	strd	r0, r1, [r3]
          for (b_coltop = b_lastv; b_coltop <= knt; b_coltop++) {
 8002908:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800290c:	3301      	adds	r3, #1
 800290e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002912:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002916:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800291a:	429a      	cmp	r2, r3
 800291c:	ddd6      	ble.n	80028cc <qr_zNlMH7mU+0x448>
          }

          atmp = beta1;
 800291e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002922:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
        }
      }

      b_A[ii] = atmp;
 8002926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	33b8      	adds	r3, #184	; 0xb8
 800292e:	f107 0220 	add.w	r2, r7, #32
 8002932:	4413      	add	r3, r2
 8002934:	f1a3 0178 	sub.w	r1, r3, #120	; 0x78
 8002938:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800293c:	e9c1 2300 	strd	r2, r3, [r1]
      beta1 = b_A[ii];
 8002940:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	33b8      	adds	r3, #184	; 0xb8
 8002948:	f107 0220 	add.w	r2, r7, #32
 800294c:	4413      	add	r3, r2
 800294e:	3b78      	subs	r3, #120	; 0x78
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
      b_A[ii] = 1.0;
 8002958:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	33b8      	adds	r3, #184	; 0xb8
 8002960:	f107 0220 	add.w	r2, r7, #32
 8002964:	4413      	add	r3, r2
 8002966:	f1a3 0178 	sub.w	r1, r3, #120	; 0x78
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	4bbc      	ldr	r3, [pc, #752]	; (8002c60 <qr_zNlMH7mU+0x7dc>)
 8002970:	e9c1 2300 	strd	r2, r3, [r1]
      if (tau[itau] != 0.0) {
 8002974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	33b8      	adds	r3, #184	; 0xb8
 800297c:	f107 0220 	add.w	r2, r7, #32
 8002980:	4413      	add	r3, r2
 8002982:	3b90      	subs	r3, #144	; 0x90
 8002984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	f7fe f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 808f 	bne.w	8002aba <qr_zNlMH7mU+0x636>
        b_lastv = 3 - itau;
 800299c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029a0:	f1c3 0303 	rsb	r3, r3, #3
 80029a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        knt = (ii - itau) + 2;
 80029a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	3302      	adds	r3, #2
 80029b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        while ((b_lastv > 0) && (b_A[knt] == 0.0)) {
 80029b8:	e009      	b.n	80029ce <qr_zNlMH7mU+0x54a>
          b_lastv--;
 80029ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029be:	3b01      	subs	r3, #1
 80029c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          knt--;
 80029c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029c8:	3b01      	subs	r3, #1
 80029ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        while ((b_lastv > 0) && (b_A[knt] == 0.0)) {
 80029ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	dd12      	ble.n	80029fc <qr_zNlMH7mU+0x578>
 80029d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	33b8      	adds	r3, #184	; 0xb8
 80029de:	f107 0220 	add.w	r2, r7, #32
 80029e2:	4413      	add	r3, r2
 80029e4:	3b78      	subs	r3, #120	; 0x78
 80029e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	f7fe f869 	bl	8000ac8 <__aeabi_dcmpeq>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1de      	bne.n	80029ba <qr_zNlMH7mU+0x536>
        }

        knt = 2 - itau;
 80029fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a00:	f1c3 0302 	rsb	r3, r3, #2
 8002a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        exitg2 = false;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
        while ((!exitg2) && (knt > 0)) {
 8002a0e:	e04b      	b.n	8002aa8 <qr_zNlMH7mU+0x624>
          b_coltop = ((knt - 1) * 3 + ii) + 3;
 8002a10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a14:	1e5a      	subs	r2, r3, #1
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	441a      	add	r2, r3
 8002a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a20:	4413      	add	r3, r2
 8002a22:	3303      	adds	r3, #3
 8002a24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
          coltop = b_coltop;
 8002a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          do {
            exitg1 = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            if (coltop + 1 <= b_coltop + b_lastv) {
 8002a36:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002a3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a3e:	441a      	add	r2, r3
 8002a40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a44:	4293      	cmp	r3, r2
 8002a46:	da1c      	bge.n	8002a82 <qr_zNlMH7mU+0x5fe>
              if (b_A[coltop] != 0.0) {
 8002a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	33b8      	adds	r3, #184	; 0xb8
 8002a50:	f107 0220 	add.w	r2, r7, #32
 8002a54:	4413      	add	r3, r2
 8002a56:	3b78      	subs	r3, #120	; 0x78
 8002a58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	f7fe f830 	bl	8000ac8 <__aeabi_dcmpeq>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <qr_zNlMH7mU+0x5f2>
                exitg1 = 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a74:	e00d      	b.n	8002a92 <qr_zNlMH7mU+0x60e>
              } else {
                coltop++;
 8002a76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a80:	e007      	b.n	8002a92 <qr_zNlMH7mU+0x60e>
              }
            } else {
              knt--;
 8002a82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a86:	3b01      	subs	r3, #1
 8002a88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
              exitg1 = 2;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            }
          } while (exitg1 == 0);
 8002a92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ca      	beq.n	8002a30 <qr_zNlMH7mU+0x5ac>

          if (exitg1 == 1) {
 8002a9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <qr_zNlMH7mU+0x624>
            exitg2 = true;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
        while ((!exitg2) && (knt > 0)) {
 8002aa8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <qr_zNlMH7mU+0x642>
 8002ab0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	dcab      	bgt.n	8002a10 <qr_zNlMH7mU+0x58c>
 8002ab8:	e005      	b.n	8002ac6 <qr_zNlMH7mU+0x642>
          }
        }
      } else {
        b_lastv = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        knt = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }

      if (b_lastv > 0) {
 8002ac6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	dd3a      	ble.n	8002b44 <qr_zNlMH7mU+0x6c0>
        xgemv_4E6oVMBP(b_lastv, knt, b_A, ii + 4, b_A, ii + 1, work);
 8002ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ad2:	1d18      	adds	r0, r3, #4
 8002ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002ade:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ae2:	9302      	str	r3, [sp, #8]
 8002ae4:	9201      	str	r2, [sp, #4]
 8002ae6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4603      	mov	r3, r0
 8002aee:	460a      	mov	r2, r1
 8002af0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002af4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002af8:	f002 fea2 	bl	8005840 <xgemv_4E6oVMBP>
        xgerc_duqdQXG2(b_lastv, knt, -tau[itau], ii + 1, work, b_A, ii + 4);
 8002afc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	33b8      	adds	r3, #184	; 0xb8
 8002b04:	f107 0220 	add.w	r2, r7, #32
 8002b08:	4413      	add	r3, r2
 8002b0a:	3b90      	subs	r3, #144	; 0x90
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	60ba      	str	r2, [r7, #8]
 8002b12:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b1c:	1c59      	adds	r1, r3, #1
 8002b1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b22:	3304      	adds	r3, #4
 8002b24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	460a      	mov	r2, r1
 8002b34:	ed97 0b02 	vldr	d0, [r7, #8]
 8002b38:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002b3c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002b40:	f002 ff7a 	bl	8005a38 <xgerc_duqdQXG2>
      }

      b_A[ii] = beta1;
 8002b44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	33b8      	adds	r3, #184	; 0xb8
 8002b4c:	f107 0220 	add.w	r2, r7, #32
 8002b50:	4413      	add	r3, r2
 8002b52:	f1a3 0178 	sub.w	r1, r3, #120	; 0x78
 8002b56:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002b5a:	e9c1 2300 	strd	r2, r3, [r1]
 8002b5e:	e005      	b.n	8002b6c <qr_zNlMH7mU+0x6e8>
    } else {
      tau[2] = 0.0;
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (itau = 0; itau < 3; itau++) {
 8002b6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b70:	3301      	adds	r3, #1
 8002b72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	f77f acb8 	ble.w	80024f0 <qr_zNlMH7mU+0x6c>
    }
  }

  for (itau = 0; itau < 3; itau++) {
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b86:	e062      	b.n	8002c4e <qr_zNlMH7mU+0x7ca>
    for (ii = 0; ii <= itau; ii++) {
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b8e:	e021      	b.n	8002bd4 <qr_zNlMH7mU+0x750>
      R[ii + 3 * itau] = b_A[3 * itau + ii];
 8002b90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	441a      	add	r2, r3
 8002b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b9e:	18d0      	adds	r0, r2, r3
 8002ba0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	441a      	add	r2, r3
 8002baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb4:	18d1      	adds	r1, r2, r3
 8002bb6:	00c3      	lsls	r3, r0, #3
 8002bb8:	33b8      	adds	r3, #184	; 0xb8
 8002bba:	f107 0220 	add.w	r2, r7, #32
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3b78      	subs	r3, #120	; 0x78
 8002bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc6:	e9c1 2300 	strd	r2, r3, [r1]
    for (ii = 0; ii <= itau; ii++) {
 8002bca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bd4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	ddd7      	ble.n	8002b90 <qr_zNlMH7mU+0x70c>
    }

    for (ii = itau + 2; ii < 4; ii++) {
 8002be0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002be4:	3302      	adds	r3, #2
 8002be6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bea:	e018      	b.n	8002c1e <qr_zNlMH7mU+0x79a>
      R[(ii + 3 * itau) - 1] = 0.0;
 8002bec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	441a      	add	r2, r3
 8002bf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002c00:	3b01      	subs	r3, #1
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c06:	18d1      	adds	r1, r2, r3
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9c1 2300 	strd	r2, r3, [r1]
    for (ii = itau + 2; ii < 4; ii++) {
 8002c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	dde2      	ble.n	8002bec <qr_zNlMH7mU+0x768>
    }

    work[itau] = 0.0;
 8002c26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	33b8      	adds	r3, #184	; 0xb8
 8002c2e:	f107 0220 	add.w	r2, r7, #32
 8002c32:	4413      	add	r3, r2
 8002c34:	f1a3 01a8 	sub.w	r1, r3, #168	; 0xa8
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9c1 2300 	strd	r2, r3, [r1]
  for (itau = 0; itau < 3; itau++) {
 8002c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	dd98      	ble.n	8002b88 <qr_zNlMH7mU+0x704>
  }

  for (ii = 2; ii >= 0; ii--) {
 8002c56:	2302      	movs	r3, #2
 8002c58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c5c:	e184      	b.n	8002f68 <qr_zNlMH7mU+0xae4>
 8002c5e:	bf00      	nop
 8002c60:	3ff00000 	.word	0x3ff00000
    b_lastv = (ii * 3 + ii) + 4;
 8002c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c68:	3301      	adds	r3, #1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (ii + 1 < 3) {
 8002c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	f300 8134 	bgt.w	8002ee2 <qr_zNlMH7mU+0xa5e>
      b_A[b_lastv - 4] = 1.0;
 8002c7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c7e:	3b04      	subs	r3, #4
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	33b8      	adds	r3, #184	; 0xb8
 8002c84:	f107 0220 	add.w	r2, r7, #32
 8002c88:	4413      	add	r3, r2
 8002c8a:	f1a3 0178 	sub.w	r1, r3, #120	; 0x78
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	4bba      	ldr	r3, [pc, #744]	; (8002f7c <qr_zNlMH7mU+0xaf8>)
 8002c94:	e9c1 2300 	strd	r2, r3, [r1]
      if (tau[ii] != 0.0) {
 8002c98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	33b8      	adds	r3, #184	; 0xb8
 8002ca0:	f107 0220 	add.w	r2, r7, #32
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3b90      	subs	r3, #144	; 0x90
 8002ca8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	f7fd ff08 	bl	8000ac8 <__aeabi_dcmpeq>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 808f 	bne.w	8002dde <qr_zNlMH7mU+0x95a>
        knt = 3 - ii;
 8002cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cc4:	f1c3 0303 	rsb	r3, r3, #3
 8002cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        b_coltop = b_lastv - ii;
 8002ccc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        while ((knt > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8002cda:	e009      	b.n	8002cf0 <qr_zNlMH7mU+0x86c>
          knt--;
 8002cdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
          b_coltop--;
 8002ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cea:	3b01      	subs	r3, #1
 8002cec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        while ((knt > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8002cf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	dd13      	ble.n	8002d20 <qr_zNlMH7mU+0x89c>
 8002cf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cfc:	3b02      	subs	r3, #2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	33b8      	adds	r3, #184	; 0xb8
 8002d02:	f107 0220 	add.w	r2, r7, #32
 8002d06:	4413      	add	r3, r2
 8002d08:	3b78      	subs	r3, #120	; 0x78
 8002d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	f7fd fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1dd      	bne.n	8002cdc <qr_zNlMH7mU+0x858>
        }

        b_coltop = 2 - ii;
 8002d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d24:	f1c3 0302 	rsb	r3, r3, #2
 8002d28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        exitg2 = false;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
        while ((!exitg2) && (b_coltop > 0)) {
 8002d32:	e04b      	b.n	8002dcc <qr_zNlMH7mU+0x948>
          coltop = (b_coltop - 1) * 3 + b_lastv;
 8002d34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d38:	1e5a      	subs	r2, r3, #1
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d44:	4413      	add	r3, r2
 8002d46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          itau = coltop;
 8002d4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
          do {
            exitg1 = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            if (itau <= (coltop + knt) - 1) {
 8002d58:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002d5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d60:	4413      	add	r3, r2
 8002d62:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d66:	429a      	cmp	r2, r3
 8002d68:	da1d      	bge.n	8002da6 <qr_zNlMH7mU+0x922>
              if (b_A[itau - 1] != 0.0) {
 8002d6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	33b8      	adds	r3, #184	; 0xb8
 8002d74:	f107 0220 	add.w	r2, r7, #32
 8002d78:	4413      	add	r3, r2
 8002d7a:	3b78      	subs	r3, #120	; 0x78
 8002d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	f7fd fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <qr_zNlMH7mU+0x916>
                exitg1 = 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d98:	e00d      	b.n	8002db6 <qr_zNlMH7mU+0x932>
              } else {
                itau++;
 8002d9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002da4:	e007      	b.n	8002db6 <qr_zNlMH7mU+0x932>
              }
            } else {
              b_coltop--;
 8002da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002daa:	3b01      	subs	r3, #1
 8002dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
              exitg1 = 2;
 8002db0:	2302      	movs	r3, #2
 8002db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            }
          } while (exitg1 == 0);
 8002db6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0c9      	beq.n	8002d52 <qr_zNlMH7mU+0x8ce>

          if (exitg1 == 1) {
 8002dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d102      	bne.n	8002dcc <qr_zNlMH7mU+0x948>
            exitg2 = true;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
        while ((!exitg2) && (b_coltop > 0)) {
 8002dcc:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10a      	bne.n	8002dea <qr_zNlMH7mU+0x966>
 8002dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	dcab      	bgt.n	8002d34 <qr_zNlMH7mU+0x8b0>
 8002ddc:	e005      	b.n	8002dea <qr_zNlMH7mU+0x966>
          }
        }
      } else {
        knt = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        b_coltop = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }

      if (knt > 0) {
 8002dea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	dd35      	ble.n	8002e5e <qr_zNlMH7mU+0x9da>
        xgemv_4E6oVMBP(knt, b_coltop, b_A, b_lastv, b_A, b_lastv - 3, work);
 8002df2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002df6:	3b03      	subs	r3, #3
 8002df8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002dfc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e00:	9202      	str	r2, [sp, #8]
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e0e:	460a      	mov	r2, r1
 8002e10:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002e14:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002e18:	f002 fd12 	bl	8005840 <xgemv_4E6oVMBP>
        xgerc_duqdQXG2(knt, b_coltop, -tau[ii], b_lastv - 3, work, b_A, b_lastv);
 8002e1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	33b8      	adds	r3, #184	; 0xb8
 8002e24:	f107 0220 	add.w	r2, r7, #32
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b90      	subs	r3, #144	; 0x90
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	4692      	mov	sl, r2
 8002e32:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002e36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e3a:	1eda      	subs	r2, r3, #3
 8002e3c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002e40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	ec4b ab10 	vmov	d0, sl, fp
 8002e52:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002e56:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002e5a:	f002 fded 	bl	8005a38 <xgerc_duqdQXG2>
      }

      knt = (b_lastv - ii) - 1;
 8002e5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      for (b_coltop = b_lastv - 2; b_coltop <= knt; b_coltop++) {
 8002e6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e72:	3b02      	subs	r3, #2
 8002e74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e78:	e02d      	b.n	8002ed6 <qr_zNlMH7mU+0xa52>
        b_A[b_coltop - 1] *= -tau[ii];
 8002e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	33b8      	adds	r3, #184	; 0xb8
 8002e84:	f107 0220 	add.w	r2, r7, #32
 8002e88:	4413      	add	r3, r2
 8002e8a:	3b78      	subs	r3, #120	; 0x78
 8002e8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	33b8      	adds	r3, #184	; 0xb8
 8002e98:	f107 0220 	add.w	r2, r7, #32
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3b90      	subs	r3, #144	; 0x90
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	4690      	mov	r8, r2
 8002ea6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eae:	1e5c      	subs	r4, r3, #1
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	f7fd fba0 	bl	80005f8 <__aeabi_dmul>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	00e1      	lsls	r1, r4, #3
 8002ebe:	31b8      	adds	r1, #184	; 0xb8
 8002ec0:	f107 0020 	add.w	r0, r7, #32
 8002ec4:	4401      	add	r1, r0
 8002ec6:	3978      	subs	r1, #120	; 0x78
 8002ec8:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = b_lastv - 2; b_coltop <= knt; b_coltop++) {
 8002ecc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ed6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002eda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	ddcb      	ble.n	8002e7a <qr_zNlMH7mU+0x9f6>
      }
    }

    b_A[b_lastv - 4] = 1.0 - tau[ii];
 8002ee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	33b8      	adds	r3, #184	; 0xb8
 8002eea:	f107 0220 	add.w	r2, r7, #32
 8002eee:	4413      	add	r3, r2
 8002ef0:	3b90      	subs	r3, #144	; 0x90
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002efa:	1f0c      	subs	r4, r1, #4
 8002efc:	f04f 0000 	mov.w	r0, #0
 8002f00:	491e      	ldr	r1, [pc, #120]	; (8002f7c <qr_zNlMH7mU+0xaf8>)
 8002f02:	f7fd f9c1 	bl	8000288 <__aeabi_dsub>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	00e1      	lsls	r1, r4, #3
 8002f0c:	31b8      	adds	r1, #184	; 0xb8
 8002f0e:	f107 0020 	add.w	r0, r7, #32
 8002f12:	4401      	add	r1, r0
 8002f14:	3978      	subs	r1, #120	; 0x78
 8002f16:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_coltop = 0; b_coltop < ii; b_coltop++) {
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002f20:	e017      	b.n	8002f52 <qr_zNlMH7mU+0xace>
      b_A[(b_lastv - b_coltop) - 5] = 0.0;
 8002f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	3b05      	subs	r3, #5
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	33b8      	adds	r3, #184	; 0xb8
 8002f32:	f107 0220 	add.w	r2, r7, #32
 8002f36:	4413      	add	r3, r2
 8002f38:	f1a3 0178 	sub.w	r1, r3, #120	; 0x78
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_coltop = 0; b_coltop < ii; b_coltop++) {
 8002f48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002f52:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002f56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	dbe1      	blt.n	8002f22 <qr_zNlMH7mU+0xa9e>
  for (ii = 2; ii >= 0; ii--) {
 8002f5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f62:	3b01      	subs	r3, #1
 8002f64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f6bf ae79 	bge.w	8002c64 <qr_zNlMH7mU+0x7e0>
    }
  }

  for (itau = 0; itau < 3; itau++) {
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f78:	e051      	b.n	800301e <qr_zNlMH7mU+0xb9a>
 8002f7a:	bf00      	nop
 8002f7c:	3ff00000 	.word	0x3ff00000
    Q[3 * itau] = b_A[3 * itau];
 8002f80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	1898      	adds	r0, r3, r2
 8002f8a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	461a      	mov	r2, r3
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	1899      	adds	r1, r3, r2
 8002f9c:	00c3      	lsls	r3, r0, #3
 8002f9e:	33b8      	adds	r3, #184	; 0xb8
 8002fa0:	f107 0220 	add.w	r2, r7, #32
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3b78      	subs	r3, #120	; 0x78
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	e9c1 2300 	strd	r2, r3, [r1]
    ii = 3 * itau + 1;
 8002fb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    Q[ii] = b_A[ii];
 8002fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc8:	18d1      	adds	r1, r2, r3
 8002fca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	33b8      	adds	r3, #184	; 0xb8
 8002fd2:	f107 0220 	add.w	r2, r7, #32
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b78      	subs	r3, #120	; 0x78
 8002fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fde:	e9c1 2300 	strd	r2, r3, [r1]
    ii = 3 * itau + 2;
 8002fe2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4413      	add	r3, r2
 8002fec:	3302      	adds	r3, #2
 8002fee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    Q[ii] = b_A[ii];
 8002ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ffa:	18d1      	adds	r1, r2, r3
 8002ffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	33b8      	adds	r3, #184	; 0xb8
 8003004:	f107 0220 	add.w	r2, r7, #32
 8003008:	4413      	add	r3, r2
 800300a:	3b78      	subs	r3, #120	; 0x78
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	e9c1 2300 	strd	r2, r3, [r1]
  for (itau = 0; itau < 3; itau++) {
 8003014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003018:	3301      	adds	r3, #1
 800301a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800301e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003022:	2b02      	cmp	r3, #2
 8003024:	ddac      	ble.n	8002f80 <qr_zNlMH7mU+0xafc>
  }
}
 8003026:	bf00      	nop
 8003028:	bf00      	nop
 800302a:	37dc      	adds	r7, #220	; 0xdc
 800302c:	46bd      	mov	sp, r7
 800302e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003032:	bf00      	nop

08003034 <rotate_3AIOL9tK>:
#include <math.h>
#include "rt_hypotd_snf.h"

/* Function for MATLAB Function: '<S7>/Correct' */
void rotate_3AIOL9tK(real_T x, real_T y, real_T *c, real_T *s, real_T *r)
{
 8003034:	b5b0      	push	{r4, r5, r7, lr}
 8003036:	b098      	sub	sp, #96	; 0x60
 8003038:	af00      	add	r7, sp, #0
 800303a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 800303e:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8003042:	6278      	str	r0, [r7, #36]	; 0x24
 8003044:	6239      	str	r1, [r7, #32]
 8003046:	61fa      	str	r2, [r7, #28]
  real_T absx;
  real_T absy;
  absx = fabs(x);
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	ed97 7b02 	vldr	d7, [r7, #8]
 8003058:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
  absy = fabs(y);
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	ed97 7b00 	vldr	d7, [r7]
 800306c:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
  if (absy == 0.0) {
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800307c:	f7fd fd24 	bl	8000ac8 <__aeabi_dcmpeq>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d012      	beq.n	80030ac <rotate_3AIOL9tK+0x78>
    *c = 1.0;
 8003086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	4b4f      	ldr	r3, [pc, #316]	; (80031cc <rotate_3AIOL9tK+0x198>)
 800308e:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 0.0;
 8003092:	6a39      	ldr	r1, [r7, #32]
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9c1 2300 	strd	r2, r3, [r1]
    *r = x;
 80030a0:	69f9      	ldr	r1, [r7, #28]
 80030a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030a6:	e9c1 2300 	strd	r2, r3, [r1]
    *c = absx / rho;
    xx /= absx;
    *s = xx * yy / rho;
    *r = rho * absy * xx;
  }
}
 80030aa:	e08a      	b.n	80031c2 <rotate_3AIOL9tK+0x18e>
  } else if (absx == 0.0) {
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80030b8:	f7fd fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d012      	beq.n	80030e8 <rotate_3AIOL9tK+0xb4>
    *c = 0.0;
 80030c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9c1 2300 	strd	r2, r3, [r1]
    *s = 1.0;
 80030d0:	6a39      	ldr	r1, [r7, #32]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	4b3d      	ldr	r3, [pc, #244]	; (80031cc <rotate_3AIOL9tK+0x198>)
 80030d8:	e9c1 2300 	strd	r2, r3, [r1]
    *r = y;
 80030dc:	69f9      	ldr	r1, [r7, #28]
 80030de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030e2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80030e6:	e06c      	b.n	80031c2 <rotate_3AIOL9tK+0x18e>
    absy += absx;
 80030e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030ec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80030f0:	f7fd f8cc 	bl	800028c <__adddf3>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    xx = x / absy;
 80030fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003100:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003104:	f7fd fba2 	bl	800084c <__aeabi_ddiv>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    yy = y / absy;
 8003110:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003114:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003118:	f7fd fb98 	bl	800084c <__aeabi_ddiv>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    absx = fabs(xx);
 8003124:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8003126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003128:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800312c:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
    rho = rt_hypotd_snf(absx, fabs(yy));
 8003130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003136:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	ed97 1b04 	vldr	d1, [r7, #16]
 8003140:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8003144:	f000 f90c 	bl	8003360 <rt_hypotd_snf>
 8003148:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
    *c = absx / rho;
 800314c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003150:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003154:	f7fd fb7a 	bl	800084c <__aeabi_ddiv>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800315e:	e9c1 2300 	strd	r2, r3, [r1]
    xx /= absx;
 8003162:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003166:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800316a:	f7fd fb6f 	bl	800084c <__aeabi_ddiv>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    *s = xx * yy / rho;
 8003176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800317a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800317e:	f7fd fa3b 	bl	80005f8 <__aeabi_dmul>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800318e:	f7fd fb5d 	bl	800084c <__aeabi_ddiv>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	6a39      	ldr	r1, [r7, #32]
 8003198:	e9c1 2300 	strd	r2, r3, [r1]
    *r = rho * absy * xx;
 800319c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031a4:	f7fd fa28 	bl	80005f8 <__aeabi_dmul>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031b4:	f7fd fa20 	bl	80005f8 <__aeabi_dmul>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	69f9      	ldr	r1, [r7, #28]
 80031be:	e9c1 2300 	strd	r2, r3, [r1]
}
 80031c2:	bf00      	nop
 80031c4:	3760      	adds	r7, #96	; 0x60
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bdb0      	pop	{r4, r5, r7, pc}
 80031ca:	bf00      	nop
 80031cc:	3ff00000 	.word	0x3ff00000

080031d0 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80031d6:	2340      	movs	r3, #64	; 0x40
 80031d8:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d10b      	bne.n	8003204 <rtGetInf+0x34>
    inf = rtGetInfF();
 80031ec:	f000 f820 	bl	8003230 <rtGetInfF>
 80031f0:	ee10 3a10 	vmov	r3, s0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f9a7 	bl	8000548 <__aeabi_f2d>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003202:	e007      	b.n	8003214 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <rtGetInf+0x5c>)
 8003206:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8003208:	2300      	movs	r3, #0
 800320a:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 800320c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003210:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 8003214:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003218:	ec43 2b17 	vmov	d7, r2, r3
}
 800321c:	eeb0 0a47 	vmov.f32	s0, s14
 8003220:	eef0 0a67 	vmov.f32	s1, s15
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	7ff00000 	.word	0x7ff00000

08003230 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8003236:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800323a:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	ee07 3a90 	vmov	s15, r3
}
 8003242:	eeb0 0a67 	vmov.f32	s0, s15
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003256:	2340      	movs	r3, #64	; 0x40
 8003258:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b20      	cmp	r3, #32
 800326a:	d10b      	bne.n	8003284 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 800326c:	f000 f820 	bl	80032b0 <rtGetMinusInfF>
 8003270:	ee10 3a10 	vmov	r3, s0
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd f967 	bl	8000548 <__aeabi_f2d>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003282:	e007      	b.n	8003294 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <rtGetMinusInf+0x5c>)
 8003286:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8003288:	2300      	movs	r3, #0
 800328a:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 800328c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003290:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 8003294:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003298:	ec43 2b17 	vmov	d7, r2, r3
}
 800329c:	eeb0 0a47 	vmov.f32	s0, s14
 80032a0:	eef0 0a67 	vmov.f32	s1, s15
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	fff00000 	.word	0xfff00000

080032b0 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <rtGetMinusInfF+0x20>)
 80032b8:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	ee07 3a90 	vmov	s15, r3
}
 80032c0:	eeb0 0a67 	vmov.f32	s0, s15
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	ff800000 	.word	0xff800000

080032d4 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80032da:	2340      	movs	r3, #64	; 0x40
 80032dc:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d10b      	bne.n	8003308 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 80032f0:	f000 f820 	bl	8003334 <rtGetNaNF>
 80032f4:	ee10 3a10 	vmov	r3, s0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd f925 	bl	8000548 <__aeabi_f2d>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003306:	e007      	b.n	8003318 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <rtGetNaN+0x5c>)
 800330a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800330c:	2300      	movs	r3, #0
 800330e:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 8003310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003314:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 8003318:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800331c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003320:	eeb0 0a47 	vmov.f32	s0, s14
 8003324:	eef0 0a67 	vmov.f32	s1, s15
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	fff80000 	.word	0xfff80000

08003334 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <rtGetNaNF+0x24>)
 8003342:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	ee07 3a90 	vmov	s15, r3
}
 800334a:	eeb0 0a67 	vmov.f32	s0, s15
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	ffc00000 	.word	0xffc00000
 800335c:	00000000 	.word	0x00000000

08003360 <rt_hypotd_snf>:
#include <math.h>
#include "rt_nonfinite.h"
#include "rtGetNaN.h"

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b08b      	sub	sp, #44	; 0x2c
 8003364:	af00      	add	r7, sp, #0
 8003366:	ed87 0b02 	vstr	d0, [r7, #8]
 800336a:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T b;
  real_T y;
  a = fabs(u0);
 800336e:	68b8      	ldr	r0, [r7, #8]
 8003370:	68fc      	ldr	r4, [r7, #12]
 8003372:	f024 4100 	bic.w	r1, r4, #2147483648	; 0x80000000
 8003376:	e9c7 0106 	strd	r0, r1, [r7, #24]
  b = fabs(u1);
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003382:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (a < b) {
 8003386:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800338a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800338e:	f7fd fba5 	bl	8000adc <__aeabi_dcmplt>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d02d      	beq.n	80033f4 <rt_hypotd_snf+0x94>
    a /= b;
 8003398:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800339c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033a0:	f7fd fa54 	bl	800084c <__aeabi_ddiv>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(a * a + 1.0) * b;
 80033ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033b4:	f7fd f920 	bl	80005f8 <__aeabi_dmul>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	4b3a      	ldr	r3, [pc, #232]	; (80034b0 <rt_hypotd_snf+0x150>)
 80033c6:	f7fc ff61 	bl	800028c <__adddf3>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	ec43 2b17 	vmov	d7, r2, r3
 80033d2:	eeb0 0a47 	vmov.f32	s0, s14
 80033d6:	eef0 0a67 	vmov.f32	s1, s15
 80033da:	f00d fe27 	bl	801102c <sqrt>
 80033de:	ec53 2b10 	vmov	r2, r3, d0
 80033e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033e6:	f7fd f907 	bl	80005f8 <__aeabi_dmul>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80033f2:	e04e      	b.n	8003492 <rt_hypotd_snf+0x132>
  } else if (a > b) {
 80033f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033fc:	f7fd fb8c 	bl	8000b18 <__aeabi_dcmpgt>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d02d      	beq.n	8003462 <rt_hypotd_snf+0x102>
    b /= a;
 8003406:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800340a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800340e:	f7fd fa1d 	bl	800084c <__aeabi_ddiv>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y = sqrt(b * b + 1.0) * a;
 800341a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800341e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003422:	f7fd f8e9 	bl	80005f8 <__aeabi_dmul>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4610      	mov	r0, r2
 800342c:	4619      	mov	r1, r3
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	4b1f      	ldr	r3, [pc, #124]	; (80034b0 <rt_hypotd_snf+0x150>)
 8003434:	f7fc ff2a 	bl	800028c <__adddf3>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	ec43 2b17 	vmov	d7, r2, r3
 8003440:	eeb0 0a47 	vmov.f32	s0, s14
 8003444:	eef0 0a67 	vmov.f32	s1, s15
 8003448:	f00d fdf0 	bl	801102c <sqrt>
 800344c:	ec53 2b10 	vmov	r2, r3, d0
 8003450:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003454:	f7fd f8d0 	bl	80005f8 <__aeabi_dmul>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003460:	e017      	b.n	8003492 <rt_hypotd_snf+0x132>
  } else if (rtIsNaN(b)) {
 8003462:	ed97 0b04 	vldr	d0, [r7, #16]
 8003466:	f000 f88f 	bl	8003588 <rtIsNaN>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <rt_hypotd_snf+0x11c>
    y = (rtNaN);
 8003470:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <rt_hypotd_snf+0x154>)
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800347a:	e00a      	b.n	8003492 <rt_hypotd_snf+0x132>
  } else {
    y = a * 1.4142135623730951;
 800347c:	a30a      	add	r3, pc, #40	; (adr r3, 80034a8 <rt_hypotd_snf+0x148>)
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003486:	f7fd f8b7 	bl	80005f8 <__aeabi_dmul>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  return y;
 8003492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003496:	ec43 2b17 	vmov	d7, r2, r3
}
 800349a:	eeb0 0a47 	vmov.f32	s0, s14
 800349e:	eef0 0a67 	vmov.f32	s1, s15
 80034a2:	372c      	adds	r7, #44	; 0x2c
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd90      	pop	{r4, r7, pc}
 80034a8:	667f3bcd 	.word	0x667f3bcd
 80034ac:	3ff6a09e 	.word	0x3ff6a09e
 80034b0:	3ff00000 	.word	0x3ff00000
 80034b4:	20000210 	.word	0x20000210

080034b8 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 80034c0:	f7ff ff08 	bl	80032d4 <rtGetNaN>
 80034c4:	eeb0 7a40 	vmov.f32	s14, s0
 80034c8:	eef0 7a60 	vmov.f32	s15, s1
 80034cc:	4b16      	ldr	r3, [pc, #88]	; (8003528 <rt_InitInfAndNaN+0x70>)
 80034ce:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 80034d2:	f7ff ff2f 	bl	8003334 <rtGetNaNF>
 80034d6:	eef0 7a40 	vmov.f32	s15, s0
 80034da:	4b14      	ldr	r3, [pc, #80]	; (800352c <rt_InitInfAndNaN+0x74>)
 80034dc:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 80034e0:	f7ff fe76 	bl	80031d0 <rtGetInf>
 80034e4:	eeb0 7a40 	vmov.f32	s14, s0
 80034e8:	eef0 7a60 	vmov.f32	s15, s1
 80034ec:	4b10      	ldr	r3, [pc, #64]	; (8003530 <rt_InitInfAndNaN+0x78>)
 80034ee:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 80034f2:	f7ff fe9d 	bl	8003230 <rtGetInfF>
 80034f6:	eef0 7a40 	vmov.f32	s15, s0
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <rt_InitInfAndNaN+0x7c>)
 80034fc:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 8003500:	f7ff fea6 	bl	8003250 <rtGetMinusInf>
 8003504:	eeb0 7a40 	vmov.f32	s14, s0
 8003508:	eef0 7a60 	vmov.f32	s15, s1
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <rt_InitInfAndNaN+0x80>)
 800350e:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 8003512:	f7ff fecd 	bl	80032b0 <rtGetMinusInfF>
 8003516:	eef0 7a40 	vmov.f32	s15, s0
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <rt_InitInfAndNaN+0x84>)
 800351c:	edc3 7a00 	vstr	s15, [r3]
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000210 	.word	0x20000210
 800352c:	20000220 	.word	0x20000220
 8003530:	20000200 	.word	0x20000200
 8003534:	20000218 	.word	0x20000218
 8003538:	20000208 	.word	0x20000208
 800353c:	2000021c 	.word	0x2000021c

08003540 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800354a:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <rtIsInf+0x40>)
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003554:	f7fd fab8 	bl	8000ac8 <__aeabi_dcmpeq>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <rtIsInf+0x32>
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <rtIsInf+0x44>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003568:	f7fd faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <rtIsInf+0x36>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <rtIsInf+0x38>
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000200 	.word	0x20000200
 8003584:	20000208 	.word	0x20000208

08003588 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 8003592:	2300      	movs	r3, #0
 8003594:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003596:	2340      	movs	r3, #64	; 0x40
 8003598:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b20      	cmp	r3, #32
 800359e:	d10b      	bne.n	80035b8 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 80035a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035a4:	f7fd fb20 	bl	8000be8 <__aeabi_d2f>
 80035a8:	4603      	mov	r3, r0
 80035aa:	ee00 3a10 	vmov	s0, r3
 80035ae:	f000 f821 	bl	80035f4 <rtIsNaNF>
 80035b2:	4603      	mov	r3, r0
 80035b4:	75fb      	strb	r3, [r7, #23]
 80035b6:	e015      	b.n	80035e4 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 80035b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <rtIsNaN+0x68>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <rtIsNaN+0x68>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d109      	bne.n	80035e0 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 80035d6:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <rtIsNaN+0x5a>
 80035e0:	2300      	movs	r3, #0
 80035e2:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	7ff00000 	.word	0x7ff00000

080035f4 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8003608:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800360c:	d106      	bne.n	800361c <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <rtIsNaNF+0x28>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <rtIsNaNF+0x2a>
 800361c:	2300      	movs	r3, #0
 800361e:	b2db      	uxtb	r3, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	0000      	movs	r0, r0
	...

08003630 <svd_iYqUPJsu>:
#include "xrot_miKOw6Cs.h"
#include "xswap_U9h3dV3C.h"

/* Function for MATLAB Function: '<S7>/Correct' */
void svd_iYqUPJsu(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 8003630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003634:	ed2d 8b02 	vpush	{d8}
 8003638:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800363c:	af02      	add	r7, sp, #8
 800363e:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
 8003642:	f507 7008 	add.w	r0, r7, #544	; 0x220
 8003646:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800364a:	6001      	str	r1, [r0, #0]
 800364c:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8003650:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 8003654:	600a      	str	r2, [r1, #0]
 8003656:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800365a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800365e:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qp1;
  int32_T qq;
  b_s[0] = 0.0;
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
  e[0] = 0.0;
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  work[0] = 0.0;
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  b_s[1] = 0.0;
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
  e[1] = 0.0;
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  work[1] = 0.0;
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  b_s[2] = 0.0;
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
  e[2] = 0.0;
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  work[2] = 0.0;
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  for (m = 0; m < 9; m++) {
 80036cc:	2300      	movs	r3, #0
 80036ce:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80036d2:	e035      	b.n	8003740 <svd_iYqUPJsu+0x110>
    b_A[m] = A[m];
 80036d4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80036d8:	00da      	lsls	r2, r3, #3
 80036da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80036de:	4413      	add	r3, r2
 80036e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036e4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80036ee:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80036f2:	4413      	add	r3, r2
 80036f4:	3b90      	subs	r3, #144	; 0x90
 80036f6:	e9c3 0100 	strd	r0, r1, [r3]
    U[m] = 0.0;
 80036fa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80036fe:	00da      	lsls	r2, r3, #3
 8003700:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003704:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	1899      	adds	r1, r3, r2
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9c1 2300 	strd	r2, r3, [r1]
    V[m] = 0.0;
 8003718:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800371c:	00da      	lsls	r2, r3, #3
 800371e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1899      	adds	r1, r3, r2
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	e9c1 2300 	strd	r2, r3, [r1]
  for (m = 0; m < 9; m++) {
 8003736:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800373a:	3301      	adds	r3, #1
 800373c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8003740:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003744:	2b08      	cmp	r3, #8
 8003746:	ddc5      	ble.n	80036d4 <svd_iYqUPJsu+0xa4>
  }

  for (m = 0; m < 2; m++) {
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800374e:	e383      	b.n	8003e58 <svd_iYqUPJsu+0x828>
    boolean_T apply_transform;
    qp1 = m + 2;
 8003750:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003754:	3302      	adds	r3, #2
 8003756:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    qq = (3 * m + m) + 1;
 800375a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	3301      	adds	r3, #1
 8003762:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    apply_transform = false;
 8003766:	2300      	movs	r3, #0
 8003768:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
    nrm = xnrm2_zhvkBxcX(3 - m, b_A, qq);
 800376c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003770:	f1c3 0003 	rsb	r0, r3, #3
 8003774:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003778:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800377c:	4619      	mov	r1, r3
 800377e:	f002 fc69 	bl	8006054 <xnrm2_zhvkBxcX>
 8003782:	ed87 0b7a 	vstr	d0, [r7, #488]	; 0x1e8
    if (nrm > 0.0) {
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8003792:	f7fd f9c1 	bl	8000b18 <__aeabi_dcmpgt>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8124 	beq.w	80039e6 <svd_iYqUPJsu+0x3b6>
      apply_transform = true;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
      if (b_A[qq - 1] < 0.0) {
 80037a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80037a8:	3b01      	subs	r3, #1
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80037b0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80037b4:	4413      	add	r3, r2
 80037b6:	3b90      	subs	r3, #144	; 0x90
 80037b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	f7fd f98a 	bl	8000adc <__aeabi_dcmplt>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d017      	beq.n	80037fe <svd_iYqUPJsu+0x1ce>
        b_s[m] = -nrm;
 80037ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80037d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80037d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80037da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80037e2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80037ec:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80037f0:	4413      	add	r3, r2
 80037f2:	3ba8      	subs	r3, #168	; 0xa8
 80037f4:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 80037f8:	ed83 7b00 	vstr	d7, [r3]
 80037fc:	e00d      	b.n	800381a <svd_iYqUPJsu+0x1ea>
      } else {
        b_s[m] = nrm;
 80037fe:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003808:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800380c:	4413      	add	r3, r2
 800380e:	f1a3 01a8 	sub.w	r1, r3, #168	; 0xa8
 8003812:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8003816:	e9c1 2300 	strd	r2, r3, [r1]
      }

      if (fabs(b_s[m]) >= 1.0020841800044864E-292) {
 800381a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003824:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003828:	4413      	add	r3, r2
 800382a:	3ba8      	subs	r3, #168	; 0xa8
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8003834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003838:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8003844:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003848:	f7fd f95c 	bl	8000b04 <__aeabi_dcmpge>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d04c      	beq.n	80038ec <svd_iYqUPJsu+0x2bc>
        nrm = 1.0 / b_s[m];
 8003852:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800385c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003860:	4413      	add	r3, r2
 8003862:	3ba8      	subs	r3, #168	; 0xa8
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	f04f 0000 	mov.w	r0, #0
 800386c:	49d1      	ldr	r1, [pc, #836]	; (8003bb4 <svd_iYqUPJsu+0x584>)
 800386e:	f7fc ffed 	bl	800084c <__aeabi_ddiv>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
        qjj = (qq - m) + 2;
 800387a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800387e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	3302      	adds	r3, #2
 8003886:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
        for (kase = qq; kase <= qjj; kase++) {
 800388a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800388e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8003892:	e024      	b.n	80038de <svd_iYqUPJsu+0x2ae>
          b_A[kase - 1] *= nrm;
 8003894:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003898:	3b01      	subs	r3, #1
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80038a0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80038a4:	4413      	add	r3, r2
 80038a6:	3b90      	subs	r3, #144	; 0x90
 80038a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038ac:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80038b0:	1e5c      	subs	r4, r3, #1
 80038b2:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80038b6:	f7fc fe9f 	bl	80005f8 <__aeabi_dmul>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	00e3      	lsls	r3, r4, #3
 80038c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80038c8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80038cc:	4413      	add	r3, r2
 80038ce:	3b90      	subs	r3, #144	; 0x90
 80038d0:	e9c3 0100 	strd	r0, r1, [r3]
        for (kase = qq; kase <= qjj; kase++) {
 80038d4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80038d8:	3301      	adds	r3, #1
 80038da:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80038de:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80038e2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80038e6:	429a      	cmp	r2, r3
 80038e8:	ddd4      	ble.n	8003894 <svd_iYqUPJsu+0x264>
 80038ea:	e044      	b.n	8003976 <svd_iYqUPJsu+0x346>
        }
      } else {
        qjj = (qq - m) + 2;
 80038ec:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80038f0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	3302      	adds	r3, #2
 80038f8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
        for (kase = qq; kase <= qjj; kase++) {
 80038fc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003900:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8003904:	e031      	b.n	800396a <svd_iYqUPJsu+0x33a>
          b_A[kase - 1] /= b_s[m];
 8003906:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800390a:	3b01      	subs	r3, #1
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003912:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003916:	4413      	add	r3, r2
 8003918:	3b90      	subs	r3, #144	; 0x90
 800391a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800391e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003928:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800392c:	4413      	add	r3, r2
 800392e:	3ba8      	subs	r3, #168	; 0xa8
 8003930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003934:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003938:	1e5e      	subs	r6, r3, #1
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4620      	mov	r0, r4
 8003940:	4629      	mov	r1, r5
 8003942:	f7fc ff83 	bl	800084c <__aeabi_ddiv>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4610      	mov	r0, r2
 800394c:	4619      	mov	r1, r3
 800394e:	00f3      	lsls	r3, r6, #3
 8003950:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003954:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003958:	4413      	add	r3, r2
 800395a:	3b90      	subs	r3, #144	; 0x90
 800395c:	e9c3 0100 	strd	r0, r1, [r3]
        for (kase = qq; kase <= qjj; kase++) {
 8003960:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003964:	3301      	adds	r3, #1
 8003966:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800396a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800396e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003972:	429a      	cmp	r2, r3
 8003974:	ddc7      	ble.n	8003906 <svd_iYqUPJsu+0x2d6>
        }
      }

      b_A[qq - 1]++;
 8003976:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800397a:	1e5c      	subs	r4, r3, #1
 800397c:	00e3      	lsls	r3, r4, #3
 800397e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003982:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003986:	4413      	add	r3, r2
 8003988:	3b90      	subs	r3, #144	; 0x90
 800398a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	4b88      	ldr	r3, [pc, #544]	; (8003bb4 <svd_iYqUPJsu+0x584>)
 8003994:	f7fc fc7a 	bl	800028c <__adddf3>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	00e3      	lsls	r3, r4, #3
 80039a2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80039a6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80039aa:	4413      	add	r3, r2
 80039ac:	3b90      	subs	r3, #144	; 0x90
 80039ae:	e9c3 0100 	strd	r0, r1, [r3]
      b_s[m] = -b_s[m];
 80039b2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80039bc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80039c0:	4413      	add	r3, r2
 80039c2:	3ba8      	subs	r3, #168	; 0xa8
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	4692      	mov	sl, r2
 80039ca:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80039ce:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80039d8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80039dc:	4413      	add	r3, r2
 80039de:	3ba8      	subs	r3, #168	; 0xa8
 80039e0:	e9c3 ab00 	strd	sl, fp, [r3]
 80039e4:	e00f      	b.n	8003a06 <svd_iYqUPJsu+0x3d6>
    } else {
      b_s[m] = 0.0;
 80039e6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80039f0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80039f4:	4413      	add	r3, r2
 80039f6:	f1a3 01a8 	sub.w	r1, r3, #168	; 0xa8
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9c1 2300 	strd	r2, r3, [r1]
    }

    for (kase = qp1; kase < 4; kase++) {
 8003a06:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003a0a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8003a0e:	e063      	b.n	8003ad8 <svd_iYqUPJsu+0x4a8>
      qjj = (kase - 1) * 3 + m;
 8003a10:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003a14:	1e5a      	subs	r2, r3, #1
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	441a      	add	r2, r3
 8003a1c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003a20:	4413      	add	r3, r2
 8003a22:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
      if (apply_transform) {
 8003a26:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d038      	beq.n	8003aa0 <svd_iYqUPJsu+0x470>
        xaxpy_32GB6RlT(3 - m, -(xdotc_VAkR4IHS(3 - m, b_A, qq, b_A, qjj + 1) /
 8003a2e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003a32:	f1c3 0403 	rsb	r4, r3, #3
 8003a36:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003a3a:	f1c3 0003 	rsb	r0, r3, #3
 8003a3e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003a42:	3301      	adds	r3, #1
 8003a44:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8003a48:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8003a54:	f001 fead 	bl	80057b2 <xdotc_VAkR4IHS>
 8003a58:	ec51 0b10 	vmov	r0, r1, d0
          b_A[m + 3 * m]), qq, b_A, qjj + 1);
 8003a5c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003a68:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3b90      	subs	r3, #144	; 0x90
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
        xaxpy_32GB6RlT(3 - m, -(xdotc_VAkR4IHS(3 - m, b_A, qq, b_A, qjj + 1) /
 8003a74:	f7fc feea 	bl	800084c <__aeabi_ddiv>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8003a80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003a84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a88:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8003a92:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8003a96:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f001 fd93 	bl	80055c6 <xaxpy_32GB6RlT>
      }

      e[kase - 1] = b_A[qjj];
 8003aa0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003aa4:	1e5a      	subs	r2, r3, #1
 8003aa6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003ab0:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3b90      	subs	r3, #144	; 0x90
 8003ab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003abc:	00d3      	lsls	r3, r2, #3
 8003abe:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003ac2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3bc0      	subs	r3, #192	; 0xc0
 8003aca:	e9c3 0100 	strd	r0, r1, [r3]
    for (kase = qp1; kase < 4; kase++) {
 8003ace:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8003ad8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	dd97      	ble.n	8003a10 <svd_iYqUPJsu+0x3e0>
    }

    for (qq = m + 1; qq < 4; qq++) {
 8003ae0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003aea:	e025      	b.n	8003b38 <svd_iYqUPJsu+0x508>
      kase = (3 * m + qq) - 1;
 8003aec:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	441a      	add	r2, r3
 8003af6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003afa:	4413      	add	r3, r2
 8003afc:	3b01      	subs	r3, #1
 8003afe:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
      U[kase] = b_A[kase];
 8003b02:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003b06:	00da      	lsls	r2, r3, #3
 8003b08:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003b0c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	1899      	adds	r1, r3, r2
 8003b14:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003b1e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003b22:	4413      	add	r3, r2
 8003b24:	3b90      	subs	r3, #144	; 0x90
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = m + 1; qq < 4; qq++) {
 8003b2e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003b32:	3301      	adds	r3, #1
 8003b34:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003b38:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	ddd5      	ble.n	8003aec <svd_iYqUPJsu+0x4bc>
    }

    if (m + 1 <= 1) {
 8003b40:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f300 8182 	bgt.w	8003e4e <svd_iYqUPJsu+0x81e>
      nrm = xnrm2_Talqnny2(2, e, 2);
 8003b4a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003b4e:	2202      	movs	r2, #2
 8003b50:	4619      	mov	r1, r3
 8003b52:	2002      	movs	r0, #2
 8003b54:	f002 f874 	bl	8005c40 <xnrm2_Talqnny2>
 8003b58:	ed87 0b7a 	vstr	d0, [r7, #488]	; 0x1e8
      if (nrm == 0.0) {
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8003b68:	f7fc ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d006      	beq.n	8003b80 <svd_iYqUPJsu+0x550>
        e[0] = 0.0;
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
 8003b7e:	e13e      	b.n	8003dfe <svd_iYqUPJsu+0x7ce>
      } else {
        if (e[1] < 0.0) {
 8003b80:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	f7fc ffa6 	bl	8000adc <__aeabi_dcmplt>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d010      	beq.n	8003bb8 <svd_iYqUPJsu+0x588>
          e[0] = -nrm;
 8003b96:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003b9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003ba2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ba6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003baa:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8003bae:	ed87 7b58 	vstr	d7, [r7, #352]	; 0x160
 8003bb2:	e005      	b.n	8003bc0 <svd_iYqUPJsu+0x590>
 8003bb4:	3ff00000 	.word	0x3ff00000
        } else {
          e[0] = nrm;
 8003bb8:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8003bbc:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
        }

        nrm = e[0];
 8003bc0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8003bc4:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
        if (fabs(e[0]) >= 1.0020841800044864E-292) {
 8003bc8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8003bcc:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8003bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8003be0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003be4:	f7fc ff8e 	bl	8000b04 <__aeabi_dcmpge>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d039      	beq.n	8003c62 <svd_iYqUPJsu+0x632>
          nrm = 1.0 / e[0];
 8003bee:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8003bf2:	f04f 0000 	mov.w	r0, #0
 8003bf6:	49c8      	ldr	r1, [pc, #800]	; (8003f18 <svd_iYqUPJsu+0x8e8>)
 8003bf8:	f7fc fe28 	bl	800084c <__aeabi_ddiv>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
          for (qq = qp1; qq < 4; qq++) {
 8003c04:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003c08:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003c0c:	e024      	b.n	8003c58 <svd_iYqUPJsu+0x628>
            e[qq - 1] *= nrm;
 8003c0e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003c12:	3b01      	subs	r3, #1
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003c1a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003c1e:	4413      	add	r3, r2
 8003c20:	3bc0      	subs	r3, #192	; 0xc0
 8003c22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c26:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003c2a:	1e5c      	subs	r4, r3, #1
 8003c2c:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8003c30:	f7fc fce2 	bl	80005f8 <__aeabi_dmul>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	00e3      	lsls	r3, r4, #3
 8003c3e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003c42:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003c46:	4413      	add	r3, r2
 8003c48:	3bc0      	subs	r3, #192	; 0xc0
 8003c4a:	e9c3 0100 	strd	r0, r1, [r3]
          for (qq = qp1; qq < 4; qq++) {
 8003c4e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003c52:	3301      	adds	r3, #1
 8003c54:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003c58:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	ddd6      	ble.n	8003c0e <svd_iYqUPJsu+0x5de>
 8003c60:	e02d      	b.n	8003cbe <svd_iYqUPJsu+0x68e>
          }
        } else {
          for (qq = qp1; qq < 4; qq++) {
 8003c62:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003c66:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003c6a:	e024      	b.n	8003cb6 <svd_iYqUPJsu+0x686>
            e[qq - 1] /= nrm;
 8003c6c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003c70:	3b01      	subs	r3, #1
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003c78:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3bc0      	subs	r3, #192	; 0xc0
 8003c80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c84:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003c88:	1e5c      	subs	r4, r3, #1
 8003c8a:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8003c8e:	f7fc fddd 	bl	800084c <__aeabi_ddiv>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4610      	mov	r0, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	00e3      	lsls	r3, r4, #3
 8003c9c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003ca0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3bc0      	subs	r3, #192	; 0xc0
 8003ca8:	e9c3 0100 	strd	r0, r1, [r3]
          for (qq = qp1; qq < 4; qq++) {
 8003cac:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003cb6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	ddd6      	ble.n	8003c6c <svd_iYqUPJsu+0x63c>
          }
        }

        e[1]++;
 8003cbe:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	4b94      	ldr	r3, [pc, #592]	; (8003f18 <svd_iYqUPJsu+0x8e8>)
 8003cc8:	f7fc fae0 	bl	800028c <__adddf3>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
        e[0] = -e[0];
 8003cd4:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8003cd8:	4690      	mov	r8, r2
 8003cda:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003cde:	e9c7 8958 	strd	r8, r9, [r7, #352]	; 0x160
        for (qq = qp1; qq < 4; qq++) {
 8003ce2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003ce6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003cea:	e015      	b.n	8003d18 <svd_iYqUPJsu+0x6e8>
          work[qq - 1] = 0.0;
 8003cec:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003cf8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f1a3 01d8 	sub.w	r1, r3, #216	; 0xd8
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	e9c1 2300 	strd	r2, r3, [r1]
        for (qq = qp1; qq < 4; qq++) {
 8003d0e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003d12:	3301      	adds	r3, #1
 8003d14:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003d18:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	dde5      	ble.n	8003cec <svd_iYqUPJsu+0x6bc>
        }

        for (qq = qp1; qq < 4; qq++) {
 8003d20:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003d24:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003d28:	e026      	b.n	8003d78 <svd_iYqUPJsu+0x748>
          xaxpy_6hzNwyRv(2, e[qq - 1], b_A, 3 * (qq - 1) + 2, work, 2);
 8003d2a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003d36:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3bc0      	subs	r3, #192	; 0xc0
 8003d3e:	ed93 7b00 	vldr	d7, [r3]
 8003d42:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003d46:	1e5a      	subs	r2, r3, #1
 8003d48:	4613      	mov	r3, r2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4413      	add	r3, r2
 8003d4e:	1c98      	adds	r0, r3, #2
 8003d50:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003d54:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8003d58:	2302      	movs	r3, #2
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	4602      	mov	r2, r0
 8003d60:	eeb0 0a47 	vmov.f32	s0, s14
 8003d64:	eef0 0a67 	vmov.f32	s1, s15
 8003d68:	2002      	movs	r0, #2
 8003d6a:	f001 fc7e 	bl	800566a <xaxpy_6hzNwyRv>
        for (qq = qp1; qq < 4; qq++) {
 8003d6e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003d72:	3301      	adds	r3, #1
 8003d74:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003d78:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	ddd4      	ble.n	8003d2a <svd_iYqUPJsu+0x6fa>
        }

        for (qq = qp1; qq < 4; qq++) {
 8003d80:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003d84:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003d88:	e035      	b.n	8003df6 <svd_iYqUPJsu+0x7c6>
          xaxpy_nhRNE7tr(2, -e[qq - 1] / e[1], work, 2, b_A, 3 * (qq - 1) + 2);
 8003d8a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003d96:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3bc0      	subs	r3, #192	; 0xc0
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8003da6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003daa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003dae:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8003db2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8003db6:	f7fc fd49 	bl	800084c <__aeabi_ddiv>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	ec43 2b17 	vmov	d7, r2, r3
 8003dc2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003dc6:	1e5a      	subs	r2, r3, #1
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	3302      	adds	r3, #2
 8003dd0:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8003dd4:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	2202      	movs	r2, #2
 8003dde:	eeb0 0a47 	vmov.f32	s0, s14
 8003de2:	eef0 0a67 	vmov.f32	s1, s15
 8003de6:	2002      	movs	r0, #2
 8003de8:	f001 fc91 	bl	800570e <xaxpy_nhRNE7tr>
        for (qq = qp1; qq < 4; qq++) {
 8003dec:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003df0:	3301      	adds	r3, #1
 8003df2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003df6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	ddc5      	ble.n	8003d8a <svd_iYqUPJsu+0x75a>
        }
      }

      for (qq = qp1; qq < 4; qq++) {
 8003dfe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003e02:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003e06:	e01e      	b.n	8003e46 <svd_iYqUPJsu+0x816>
        V[qq - 1] = e[qq - 1];
 8003e08:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003e0c:	1e58      	subs	r0, r3, #1
 8003e0e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003e12:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003e16:	3b01      	subs	r3, #1
 8003e18:	00da      	lsls	r2, r3, #3
 8003e1a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	1899      	adds	r1, r3, r2
 8003e26:	00c3      	lsls	r3, r0, #3
 8003e28:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003e2c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003e30:	4413      	add	r3, r2
 8003e32:	3bc0      	subs	r3, #192	; 0xc0
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	e9c1 2300 	strd	r2, r3, [r1]
      for (qq = qp1; qq < 4; qq++) {
 8003e3c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003e40:	3301      	adds	r3, #1
 8003e42:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003e46:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	dddc      	ble.n	8003e08 <svd_iYqUPJsu+0x7d8>
  for (m = 0; m < 2; m++) {
 8003e4e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003e52:	3301      	adds	r3, #1
 8003e54:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8003e58:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f77f ac77 	ble.w	8003750 <svd_iYqUPJsu+0x120>
      }
    }
  }

  m = 1;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  b_s[2] = b_A[8];
 8003e68:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8003e6c:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
  e[1] = b_A[7];
 8003e70:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8003e74:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  e[2] = 0.0;
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 8003e84:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003e88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 8003e9e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003ea2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 8003eb8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003ebc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <svd_iYqUPJsu+0x8e8>)
 8003ecc:	e9c1 2300 	strd	r2, r3, [r1]
  for (qp1 = 1; qp1 >= 0; qp1--) {
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003ed6:	e12a      	b.n	800412e <svd_iYqUPJsu+0xafe>
    qq = 3 * qp1 + qp1;
 8003ed8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    if (b_s[qp1] != 0.0) {
 8003ee2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003eec:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3ba8      	subs	r3, #168	; 0xa8
 8003ef4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	f7fc fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 80c3 	bne.w	8004092 <svd_iYqUPJsu+0xa62>
      for (kase = qp1 + 2; kase < 4; kase++) {
 8003f0c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003f10:	3302      	adds	r3, #2
 8003f12:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8003f16:	e054      	b.n	8003fc2 <svd_iYqUPJsu+0x992>
 8003f18:	3ff00000 	.word	0x3ff00000
        qjj = ((kase - 1) * 3 + qp1) + 1;
 8003f1c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003f20:	1e5a      	subs	r2, r3, #1
 8003f22:	4613      	mov	r3, r2
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	441a      	add	r2, r3
 8003f28:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
        xaxpy_32GB6RlT(3 - qp1, -(xdotc_VAkR4IHS(3 - qp1, U, qq + 1, U, qjj) /
 8003f34:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003f38:	f1c3 0503 	rsb	r5, r3, #3
 8003f3c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003f40:	f1c3 0403 	rsb	r4, r3, #3
 8003f44:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003f48:	1c58      	adds	r0, r3, #1
 8003f4a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003f4e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8003f52:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003f56:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 8003f5a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	6813      	ldr	r3, [r2, #0]
 8003f62:	4602      	mov	r2, r0
 8003f64:	6809      	ldr	r1, [r1, #0]
 8003f66:	4620      	mov	r0, r4
 8003f68:	f001 fc23 	bl	80057b2 <xdotc_VAkR4IHS>
 8003f6c:	ec51 0b10 	vmov	r0, r1, d0
          U[qq]), qq + 1, U, qjj);
 8003f70:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003f74:	00da      	lsls	r2, r3, #3
 8003f76:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003f7a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4413      	add	r3, r2
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
        xaxpy_32GB6RlT(3 - qp1, -(xdotc_VAkR4IHS(3 - qp1, U, qq + 1, U, qjj) /
 8003f86:	f7fc fc61 	bl	800084c <__aeabi_ddiv>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8003f92:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f9a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003f9e:	1c59      	adds	r1, r3, #1
 8003fa0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003fa4:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8003fa8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f001 fb07 	bl	80055c6 <xaxpy_32GB6RlT>
      for (kase = qp1 + 2; kase < 4; kase++) {
 8003fb8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8003fc2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	dda8      	ble.n	8003f1c <svd_iYqUPJsu+0x8ec>
      }

      for (qjj = qp1 + 1; qjj < 4; qjj++) {
 8003fca:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8003fd4:	e02d      	b.n	8004032 <svd_iYqUPJsu+0xa02>
        kase = (3 * qp1 + qjj) - 1;
 8003fd6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8003fda:	4613      	mov	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	441a      	add	r2, r3
 8003fe0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        U[kase] = -U[kase];
 8003fec:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003ff0:	00da      	lsls	r2, r3, #3
 8003ff2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003ff6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004002:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004006:	00da      	lsls	r2, r3, #3
 8004008:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800400c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4413      	add	r3, r2
 8004014:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8004018:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800401c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004020:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8004024:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = qp1 + 1; qjj < 4; qjj++) {
 8004028:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800402c:	3301      	adds	r3, #1
 800402e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004032:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004036:	2b03      	cmp	r3, #3
 8004038:	ddcd      	ble.n	8003fd6 <svd_iYqUPJsu+0x9a6>
      }

      U[qq]++;
 800403a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800403e:	00da      	lsls	r2, r3, #3
 8004040:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004044:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	189c      	adds	r4, r3, r2
 800404c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	4b9d      	ldr	r3, [pc, #628]	; (80042cc <svd_iYqUPJsu+0xc9c>)
 8004056:	f7fc f919 	bl	800028c <__adddf3>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	e9c4 2300 	strd	r2, r3, [r4]
      if (qp1 - 1 >= 0) {
 8004062:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004066:	2b00      	cmp	r3, #0
 8004068:	dd5c      	ble.n	8004124 <svd_iYqUPJsu+0xaf4>
        U[3 * qp1] = 0.0;
 800406a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800406e:	4613      	mov	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	461a      	mov	r2, r3
 8004078:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800407c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	1899      	adds	r1, r3, r2
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	e9c1 2300 	strd	r2, r3, [r1]
 8004090:	e048      	b.n	8004124 <svd_iYqUPJsu+0xaf4>
      }
    } else {
      U[3 * qp1] = 0.0;
 8004092:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	461a      	mov	r2, r3
 80040a0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80040a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	1899      	adds	r1, r3, r2
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * qp1 + 1] = 0.0;
 80040b8:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80040bc:	4613      	mov	r3, r2
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	4413      	add	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	f103 0208 	add.w	r2, r3, #8
 80040c8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80040cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	1899      	adds	r1, r3, r2
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * qp1 + 2] = 0.0;
 80040e0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	f103 0210 	add.w	r2, r3, #16
 80040f0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80040f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	1899      	adds	r1, r3, r2
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 8004108:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800410c:	00da      	lsls	r2, r3, #3
 800410e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004112:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	1899      	adds	r1, r3, r2
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	4b6b      	ldr	r3, [pc, #428]	; (80042cc <svd_iYqUPJsu+0xc9c>)
 8004120:	e9c1 2300 	strd	r2, r3, [r1]
  for (qp1 = 1; qp1 >= 0; qp1--) {
 8004124:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004128:	3b01      	subs	r3, #1
 800412a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800412e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004132:	2b00      	cmp	r3, #0
 8004134:	f6bf aed0 	bge.w	8003ed8 <svd_iYqUPJsu+0x8a8>
    }
  }

  for (qp1 = 2; qp1 >= 0; qp1--) {
 8004138:	2302      	movs	r3, #2
 800413a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800413e:	e0bc      	b.n	80042ba <svd_iYqUPJsu+0xc8a>
    if ((qp1 + 1 <= 1) && (e[0] != 0.0)) {
 8004140:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004144:	2b00      	cmp	r3, #0
 8004146:	dc6a      	bgt.n	800421e <svd_iYqUPJsu+0xbee>
 8004148:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	f7fc fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d15f      	bne.n	800421e <svd_iYqUPJsu+0xbee>
      xaxpy_32GB6RlT(2, -(xdotc_VAkR4IHS(2, V, 2, V, 5) / V[1]), 2, V, 5);
 800415e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004162:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8004166:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800416a:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 800416e:	2305      	movs	r3, #5
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	2202      	movs	r2, #2
 8004176:	6809      	ldr	r1, [r1, #0]
 8004178:	2002      	movs	r0, #2
 800417a:	f001 fb1a 	bl	80057b2 <xdotc_VAkR4IHS>
 800417e:	ec51 0b10 	vmov	r0, r1, d0
 8004182:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3308      	adds	r3, #8
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f7fc fb5b 	bl	800084c <__aeabi_ddiv>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800419e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80041a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80041a6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80041aa:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80041ae:	2305      	movs	r3, #5
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	2102      	movs	r1, #2
 80041b4:	ed97 0b34 	vldr	d0, [r7, #208]	; 0xd0
 80041b8:	2002      	movs	r0, #2
 80041ba:	f001 fa04 	bl	80055c6 <xaxpy_32GB6RlT>
      xaxpy_32GB6RlT(2, -(xdotc_VAkR4IHS(2, V, 2, V, 8) / V[1]), 2, V, 8);
 80041be:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80041c2:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80041c6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80041ca:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 80041ce:	2308      	movs	r3, #8
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	6813      	ldr	r3, [r2, #0]
 80041d4:	2202      	movs	r2, #2
 80041d6:	6809      	ldr	r1, [r1, #0]
 80041d8:	2002      	movs	r0, #2
 80041da:	f001 faea 	bl	80057b2 <xdotc_VAkR4IHS>
 80041de:	ec51 0b10 	vmov	r0, r1, d0
 80041e2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80041e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	f7fc fb2b 	bl	800084c <__aeabi_ddiv>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80041fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004202:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004206:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800420a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800420e:	2308      	movs	r3, #8
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	2102      	movs	r1, #2
 8004214:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 8004218:	2002      	movs	r0, #2
 800421a:	f001 f9d4 	bl	80055c6 <xaxpy_32GB6RlT>
    }

    V[3 * qp1] = 0.0;
 800421e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004222:	4613      	mov	r3, r2
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	4413      	add	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	461a      	mov	r2, r3
 800422c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	1899      	adds	r1, r3, r2
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qp1 + 1] = 0.0;
 8004244:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004248:	4613      	mov	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	f103 0208 	add.w	r2, r3, #8
 8004254:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	1899      	adds	r1, r3, r2
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qp1 + 2] = 0.0;
 800426c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004270:	4613      	mov	r3, r2
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	f103 0210 	add.w	r2, r3, #16
 800427c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1899      	adds	r1, r3, r2
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9c1 2300 	strd	r2, r3, [r1]
    V[qp1 + 3 * qp1] = 1.0;
 8004294:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800429e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	1899      	adds	r1, r3, r2
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	4b08      	ldr	r3, [pc, #32]	; (80042cc <svd_iYqUPJsu+0xc9c>)
 80042ac:	e9c1 2300 	strd	r2, r3, [r1]
  for (qp1 = 2; qp1 >= 0; qp1--) {
 80042b0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80042b4:	3b01      	subs	r3, #1
 80042b6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80042ba:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f6bf af3e 	bge.w	8004140 <svd_iYqUPJsu+0xb10>
  }

  for (qp1 = 0; qp1 < 3; qp1++) {
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80042ca:	e138      	b.n	800453e <svd_iYqUPJsu+0xf0e>
 80042cc:	3ff00000 	.word	0x3ff00000
    smm1 = e[qp1];
 80042d0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80042da:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80042de:	4413      	add	r3, r2
 80042e0:	3bc0      	subs	r3, #192	; 0xc0
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
    if (b_s[qp1] != 0.0) {
 80042ea:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80042f4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80042f8:	4413      	add	r3, r2
 80042fa:	3ba8      	subs	r3, #168	; 0xa8
 80042fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	f7fc fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d17d      	bne.n	800440e <svd_iYqUPJsu+0xdde>
      rt = fabs(b_s[qp1]);
 8004312:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800431c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004320:	4413      	add	r3, r2
 8004322:	3ba8      	subs	r3, #168	; 0xa8
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800432c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004330:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004334:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8004338:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
      nrm = b_s[qp1] / rt;
 800433c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004346:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800434a:	4413      	add	r3, r2
 800434c:	3ba8      	subs	r3, #168	; 0xa8
 800434e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004352:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004356:	f7fc fa79 	bl	800084c <__aeabi_ddiv>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
      b_s[qp1] = rt;
 8004362:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004366:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004370:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004374:	4413      	add	r3, r2
 8004376:	3ba8      	subs	r3, #168	; 0xa8
 8004378:	e9c3 0100 	strd	r0, r1, [r3]
      if (qp1 + 1 < 3) {
 800437c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004380:	2b01      	cmp	r3, #1
 8004382:	dc09      	bgt.n	8004398 <svd_iYqUPJsu+0xd68>
        smm1 /= nrm;
 8004384:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004388:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 800438c:	f7fc fa5e 	bl	800084c <__aeabi_ddiv>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      }

      qq = 3 * qp1 + 1;
 8004398:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800439c:	4613      	mov	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	3301      	adds	r3, #1
 80043a4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
      for (qjj = qq; qjj <= qq + 2; qjj++) {
 80043a8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80043ac:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80043b0:	e026      	b.n	8004400 <svd_iYqUPJsu+0xdd0>
        U[qjj - 1] *= nrm;
 80043b2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80043b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80043ba:	3b01      	subs	r3, #1
 80043bc:	00da      	lsls	r2, r3, #3
 80043be:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80043c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4413      	add	r3, r2
 80043ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80043d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80043d6:	3b01      	subs	r3, #1
 80043d8:	00da      	lsls	r2, r3, #3
 80043da:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80043de:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	189c      	adds	r4, r3, r2
 80043e6:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80043ea:	f7fc f905 	bl	80005f8 <__aeabi_dmul>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	e9c4 2300 	strd	r2, r3, [r4]
      for (qjj = qq; qjj <= qq + 2; qjj++) {
 80043f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80043fa:	3301      	adds	r3, #1
 80043fc:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004400:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800440a:	4293      	cmp	r3, r2
 800440c:	ddd1      	ble.n	80043b2 <svd_iYqUPJsu+0xd82>
      }
    }

    if ((qp1 + 1 < 3) && (smm1 != 0.0)) {
 800440e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004412:	2b01      	cmp	r3, #1
 8004414:	f300 8081 	bgt.w	800451a <svd_iYqUPJsu+0xeea>
 8004418:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	f7fc fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d175      	bne.n	800451a <svd_iYqUPJsu+0xeea>
      rt = fabs(smm1);
 800442e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8004432:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8004436:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800443a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800443e:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 8004442:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
      nrm = rt / smm1;
 8004446:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800444a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800444e:	f7fc f9fd 	bl	800084c <__aeabi_ddiv>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
      smm1 = rt;
 800445a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800445e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      b_s[qp1 + 1] *= nrm;
 8004462:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004466:	3301      	adds	r3, #1
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800446e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004472:	4413      	add	r3, r2
 8004474:	3ba8      	subs	r3, #168	; 0xa8
 8004476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800447a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800447e:	1c5c      	adds	r4, r3, #1
 8004480:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8004484:	f7fc f8b8 	bl	80005f8 <__aeabi_dmul>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	00e3      	lsls	r3, r4, #3
 8004492:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004496:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800449a:	4413      	add	r3, r2
 800449c:	3ba8      	subs	r3, #168	; 0xa8
 800449e:	e9c3 0100 	strd	r0, r1, [r3]
      qq = (qp1 + 1) * 3 + 1;
 80044a2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	4613      	mov	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	3301      	adds	r3, #1
 80044b0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
      for (qjj = qq; qjj <= qq + 2; qjj++) {
 80044b4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80044b8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80044bc:	e026      	b.n	800450c <svd_iYqUPJsu+0xedc>
        V[qjj - 1] *= nrm;
 80044be:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80044c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80044c6:	3b01      	subs	r3, #1
 80044c8:	00da      	lsls	r2, r3, #3
 80044ca:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80044ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4413      	add	r3, r2
 80044d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044da:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80044de:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80044e2:	3b01      	subs	r3, #1
 80044e4:	00da      	lsls	r2, r3, #3
 80044e6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80044ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	189c      	adds	r4, r3, r2
 80044f2:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80044f6:	f7fc f87f 	bl	80005f8 <__aeabi_dmul>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	e9c4 2300 	strd	r2, r3, [r4]
      for (qjj = qq; qjj <= qq + 2; qjj++) {
 8004502:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004506:	3301      	adds	r3, #1
 8004508:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800450c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004510:	1c9a      	adds	r2, r3, #2
 8004512:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004516:	4293      	cmp	r3, r2
 8004518:	ddd1      	ble.n	80044be <svd_iYqUPJsu+0xe8e>
      }
    }

    e[qp1] = smm1;
 800451a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800451e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004528:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800452c:	4413      	add	r3, r2
 800452e:	3bc0      	subs	r3, #192	; 0xc0
 8004530:	e9c3 0100 	strd	r0, r1, [r3]
  for (qp1 = 0; qp1 < 3; qp1++) {
 8004534:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004538:	3301      	adds	r3, #1
 800453a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800453e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004542:	2b02      	cmp	r3, #2
 8004544:	f77f aec4 	ble.w	80042d0 <svd_iYqUPJsu+0xca0>
  }

  qp1 = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  nrm = fmax(fmax(fmax(0.0, fmax(fabs(b_s[0]), fabs(e[0]))), fmax(fabs(b_s[1]),
 800454e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8004552:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8004556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800455a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800455e:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8004562:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800456a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800456e:	ed97 1b2a 	vldr	d1, [r7, #168]	; 0xa8
 8004572:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 8004576:	f00c fd07 	bl	8010f88 <fmax>
 800457a:	eeb0 7a40 	vmov.f32	s14, s0
 800457e:	eef0 7a60 	vmov.f32	s15, s1
 8004582:	eeb0 1a47 	vmov.f32	s2, s14
 8004586:	eef0 1a67 	vmov.f32	s3, s15
 800458a:	ed9f 0b9b 	vldr	d0, [pc, #620]	; 80047f8 <svd_iYqUPJsu+0x11c8>
 800458e:	f00c fcfb 	bl	8010f88 <fmax>
 8004592:	eeb0 8a40 	vmov.f32	s16, s0
 8004596:	eef0 8a60 	vmov.f32	s17, s1
 800459a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800459e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80045a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    fabs(e[1]))), fmax(fabs(b_s[2]), fabs(e[2])));
 80045aa:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
  nrm = fmax(fmax(fmax(0.0, fmax(fabs(b_s[0]), fabs(e[0]))), fmax(fabs(b_s[1]),
 80045ae:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80045b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045ba:	ed97 1b26 	vldr	d1, [r7, #152]	; 0x98
 80045be:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 80045c2:	f00c fce1 	bl	8010f88 <fmax>
 80045c6:	eeb0 7a40 	vmov.f32	s14, s0
 80045ca:	eef0 7a60 	vmov.f32	s15, s1
 80045ce:	eeb0 1a47 	vmov.f32	s2, s14
 80045d2:	eef0 1a67 	vmov.f32	s3, s15
 80045d6:	eeb0 0a48 	vmov.f32	s0, s16
 80045da:	eef0 0a68 	vmov.f32	s1, s17
 80045de:	f00c fcd3 	bl	8010f88 <fmax>
 80045e2:	eeb0 8a40 	vmov.f32	s16, s0
 80045e6:	eef0 8a60 	vmov.f32	s17, s1
    fabs(e[1]))), fmax(fabs(b_s[2]), fabs(e[2])));
 80045ea:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
  nrm = fmax(fmax(fmax(0.0, fmax(fabs(b_s[0]), fabs(e[0]))), fmax(fabs(b_s[1]),
 80045ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80045f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    fabs(e[1]))), fmax(fabs(b_s[2]), fabs(e[2])));
 80045fa:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
  nrm = fmax(fmax(fmax(0.0, fmax(fabs(b_s[0]), fabs(e[0]))), fmax(fabs(b_s[1]),
 80045fe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004602:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800460a:	ed97 1b22 	vldr	d1, [r7, #136]	; 0x88
 800460e:	ed97 0b24 	vldr	d0, [r7, #144]	; 0x90
 8004612:	f00c fcb9 	bl	8010f88 <fmax>
 8004616:	eeb0 7a40 	vmov.f32	s14, s0
 800461a:	eef0 7a60 	vmov.f32	s15, s1
 800461e:	eeb0 1a47 	vmov.f32	s2, s14
 8004622:	eef0 1a67 	vmov.f32	s3, s15
 8004626:	eeb0 0a48 	vmov.f32	s0, s16
 800462a:	eef0 0a68 	vmov.f32	s1, s17
 800462e:	f00c fcab 	bl	8010f88 <fmax>
 8004632:	ed87 0b7a 	vstr	d0, [r7, #488]	; 0x1e8
  while ((m + 2 > 0) && (qp1 < 75)) {
 8004636:	f000 bf39 	b.w	80054ac <svd_iYqUPJsu+0x1e7c>
    kase = m + 1;
 800463a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800463e:	3301      	adds	r3, #1
 8004640:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    int32_T exitg1;
    do {
      exitg1 = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
      qq = kase;
 800464a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800464e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
      if (kase == 0) {
 8004652:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d103      	bne.n	8004662 <svd_iYqUPJsu+0x1032>
        exitg1 = 1;
 800465a:	2301      	movs	r3, #1
 800465c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8004660:	e09e      	b.n	80047a0 <svd_iYqUPJsu+0x1170>
      } else {
        rt = fabs(e[kase - 1]);
 8004662:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004666:	3b01      	subs	r3, #1
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800466e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004672:	4413      	add	r3, r2
 8004674:	3bc0      	subs	r3, #192	; 0xc0
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800467e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004686:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800468a:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 800468e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004692:	3b01      	subs	r3, #1
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800469a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800469e:	4413      	add	r3, r2
 80046a0:	3ba8      	subs	r3, #168	; 0xa8
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	67ba      	str	r2, [r7, #120]	; 0x78
 80046a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046ae:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80046b8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80046bc:	4413      	add	r3, r2
 80046be:	3ba8      	subs	r3, #168	; 0xa8
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	673a      	str	r2, [r7, #112]	; 0x70
 80046c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046ca:	677b      	str	r3, [r7, #116]	; 0x74
 80046cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80046d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80046d4:	f7fb fdda 	bl	800028c <__adddf3>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4610      	mov	r0, r2
 80046de:	4619      	mov	r1, r3
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	4b46      	ldr	r3, [pc, #280]	; (8004800 <svd_iYqUPJsu+0x11d0>)
 80046e6:	f7fb ff87 	bl	80005f8 <__aeabi_dmul>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4610      	mov	r0, r2
 80046f0:	4619      	mov	r1, r3
 80046f2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80046f6:	f7fc fa05 	bl	8000b04 <__aeabi_dcmpge>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d014      	beq.n	800472a <svd_iYqUPJsu+0x10fa>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 8004700:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004704:	3b01      	subs	r3, #1
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800470c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004710:	4413      	add	r3, r2
 8004712:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 8004722:	2301      	movs	r3, #1
 8004724:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8004728:	e03a      	b.n	80047a0 <svd_iYqUPJsu+0x1170>
        } else if ((rt <= 1.0020841800044864E-292) || ((qp1 > 20) && (rt <=
 800472a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8004736:	f7fc f9db 	bl	8000af0 <__aeabi_dcmple>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d115      	bne.n	800476c <svd_iYqUPJsu+0x113c>
 8004740:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004744:	2b14      	cmp	r3, #20
 8004746:	dd26      	ble.n	8004796 <svd_iYqUPJsu+0x1166>
                     2.2204460492503131E-16 * nrm))) {
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <svd_iYqUPJsu+0x11d0>)
 800474e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004752:	f7fb ff51 	bl	80005f8 <__aeabi_dmul>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4610      	mov	r0, r2
 800475c:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qp1 > 20) && (rt <=
 800475e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004762:	f7fc f9cf 	bl	8000b04 <__aeabi_dcmpge>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d014      	beq.n	8004796 <svd_iYqUPJsu+0x1166>
          e[kase - 1] = 0.0;
 800476c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004770:	3b01      	subs	r3, #1
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004778:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800477c:	4413      	add	r3, r2
 800477e:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800478e:	2301      	movs	r3, #1
 8004790:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8004794:	e004      	b.n	80047a0 <svd_iYqUPJsu+0x1170>
        } else {
          kase--;
 8004796:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800479a:	3b01      	subs	r3, #1
 800479c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        }
      }
    } while (exitg1 == 0);
 80047a0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f43f af4d 	beq.w	8004644 <svd_iYqUPJsu+0x1014>

    if (m + 1 == kase) {
 80047aa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d103      	bne.n	80047c0 <svd_iYqUPJsu+0x1190>
      kase = 4;
 80047b8:	2304      	movs	r3, #4
 80047ba:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80047be:	e0d5      	b.n	800496c <svd_iYqUPJsu+0x133c>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 80047c0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80047c4:	3302      	adds	r3, #2
 80047c6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
      k_ii = m + 2;
 80047ca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80047ce:	3302      	adds	r3, #2
 80047d0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
      exitg2 = false;
 80047d4:	2300      	movs	r3, #0
 80047d6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
      while ((!exitg2) && (k_ii >= kase)) {
 80047da:	e0a0      	b.n	800491e <svd_iYqUPJsu+0x12ee>
        qjj = k_ii;
 80047dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047e0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
        if (k_ii == kase) {
 80047e4:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 80047e8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d109      	bne.n	8004804 <svd_iYqUPJsu+0x11d4>
          exitg2 = true;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 80047f6:	e092      	b.n	800491e <svd_iYqUPJsu+0x12ee>
	...
 8004800:	3cb00000 	.word	0x3cb00000
        } else {
          rt = 0.0;
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          if (k_ii < m + 2) {
 8004810:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800481a:	4293      	cmp	r3, r2
 800481c:	dc13      	bgt.n	8004846 <svd_iYqUPJsu+0x1216>
            rt = fabs(e[k_ii - 1]);
 800481e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004822:	3b01      	subs	r3, #1
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800482a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800482e:	4413      	add	r3, r2
 8004830:	3bc0      	subs	r3, #192	; 0xc0
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	66ba      	str	r2, [r7, #104]	; 0x68
 8004838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800483c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800483e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8004842:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
          }

          if (k_ii > kase + 1) {
 8004846:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004850:	4293      	cmp	r3, r2
 8004852:	dd19      	ble.n	8004888 <svd_iYqUPJsu+0x1258>
            rt += fabs(e[k_ii - 2]);
 8004854:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004858:	3b02      	subs	r3, #2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004860:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004864:	4413      	add	r3, r2
 8004866:	3bc0      	subs	r3, #192	; 0xc0
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	663a      	str	r2, [r7, #96]	; 0x60
 800486e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004872:	667b      	str	r3, [r7, #100]	; 0x64
 8004874:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004878:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800487c:	f7fb fd06 	bl	800028c <__adddf3>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          }

          ztest = fabs(b_s[k_ii - 1]);
 8004888:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800488c:	3b01      	subs	r3, #1
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004894:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004898:	4413      	add	r3, r2
 800489a:	3ba8      	subs	r3, #168	; 0xa8
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80048a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048a8:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80048ac:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 80048b0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	4bc7      	ldr	r3, [pc, #796]	; (8004bd8 <svd_iYqUPJsu+0x15a8>)
 80048ba:	f7fb fe9d 	bl	80005f8 <__aeabi_dmul>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80048ca:	f7fc f91b 	bl	8000b04 <__aeabi_dcmpge>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <svd_iYqUPJsu+0x12ba>
 80048d4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80048e0:	f7fc f906 	bl	8000af0 <__aeabi_dcmple>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d014      	beq.n	8004914 <svd_iYqUPJsu+0x12e4>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 80048ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048ee:	3b01      	subs	r3, #1
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80048f6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80048fa:	4413      	add	r3, r2
 80048fc:	f1a3 01a8 	sub.w	r1, r3, #168	; 0xa8
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8004912:	e004      	b.n	800491e <svd_iYqUPJsu+0x12ee>
          } else {
            k_ii--;
 8004914:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004918:	3b01      	subs	r3, #1
 800491a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
      while ((!exitg2) && (k_ii >= kase)) {
 800491e:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <svd_iYqUPJsu+0x1304>
 8004926:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 800492a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800492e:	429a      	cmp	r2, r3
 8004930:	f6bf af54 	bge.w	80047dc <svd_iYqUPJsu+0x11ac>
          }
        }
      }

      if (qjj == kase) {
 8004934:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8004938:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800493c:	429a      	cmp	r2, r3
 800493e:	d103      	bne.n	8004948 <svd_iYqUPJsu+0x1318>
        kase = 3;
 8004940:	2303      	movs	r3, #3
 8004942:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8004946:	e011      	b.n	800496c <svd_iYqUPJsu+0x133c>
      } else if (m + 2 == qjj) {
 8004948:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800494c:	1c9a      	adds	r2, r3, #2
 800494e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004952:	4293      	cmp	r3, r2
 8004954:	d103      	bne.n	800495e <svd_iYqUPJsu+0x132e>
        kase = 1;
 8004956:	2301      	movs	r3, #1
 8004958:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800495c:	e006      	b.n	800496c <svd_iYqUPJsu+0x133c>
      } else {
        kase = 2;
 800495e:	2302      	movs	r3, #2
 8004960:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        qq = qjj;
 8004964:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004968:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
      }
    }

    switch (kase) {
 800496c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004970:	2b03      	cmp	r3, #3
 8004972:	f000 8133 	beq.w	8004bdc <svd_iYqUPJsu+0x15ac>
 8004976:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800497a:	2b03      	cmp	r3, #3
 800497c:	f300 849b 	bgt.w	80052b6 <svd_iYqUPJsu+0x1c86>
 8004980:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d006      	beq.n	8004996 <svd_iYqUPJsu+0x1366>
 8004988:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800498c:	2b02      	cmp	r3, #2
 800498e:	f000 808b 	beq.w	8004aa8 <svd_iYqUPJsu+0x1478>
 8004992:	f000 bc90 	b.w	80052b6 <svd_iYqUPJsu+0x1c86>
     case 1:
      rt = e[m];
 8004996:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80049a0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80049a4:	4413      	add	r3, r2
 80049a6:	3bc0      	subs	r3, #192	; 0xc0
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      e[m] = 0.0;
 80049b0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80049ba:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80049be:	4413      	add	r3, r2
 80049c0:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m + 1; qjj >= qq + 1; qjj--) {
 80049d0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80049d4:	3301      	adds	r3, #1
 80049d6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80049da:	e05d      	b.n	8004a98 <svd_iYqUPJsu+0x1468>
        smm1 = e[0];
 80049dc:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80049e0:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
        xrotg_B2eK2SzN(&b_s[qjj - 1], &rt, &ztest, &sqds);
 80049e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80049e8:	3b01      	subs	r3, #1
 80049ea:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	18d0      	adds	r0, r2, r3
 80049f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f6:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80049fa:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80049fe:	f001 fda1 	bl	8006544 <xrotg_B2eK2SzN>
        if (qjj > qq + 1) {
 8004a02:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	dd19      	ble.n	8004a44 <svd_iYqUPJsu+0x1414>
          rt = -sqds * e[0];
 8004a10:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8004a14:	653a      	str	r2, [r7, #80]	; 0x50
 8004a16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a1c:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8004a20:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a24:	f7fb fde8 	bl	80005f8 <__aeabi_dmul>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          smm1 = e[0] * ztest;
 8004a30:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8004a34:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8004a38:	f7fb fdde 	bl	80005f8 <__aeabi_dmul>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
        }

        xrot_miKOw6Cs(V, 3 * (qjj - 1) + 1, 3 * (m + 1) + 1, ztest, sqds);
 8004a44:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004a48:	1e5a      	subs	r2, r3, #1
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	1c59      	adds	r1, r3, #1
 8004a52:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	4613      	mov	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4413      	add	r3, r2
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8004a64:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8004a68:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a70:	eeb0 1a46 	vmov.f32	s2, s12
 8004a74:	eef0 1a66 	vmov.f32	s3, s13
 8004a78:	eeb0 0a47 	vmov.f32	s0, s14
 8004a7c:	eef0 0a67 	vmov.f32	s1, s15
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	f001 fc43 	bl	800630c <xrot_miKOw6Cs>
        e[0] = smm1;
 8004a86:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8004a8a:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
      for (qjj = m + 1; qjj >= qq + 1; qjj--) {
 8004a8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004a92:	3b01      	subs	r3, #1
 8004a94:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004a98:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8004a9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	db9b      	blt.n	80049dc <svd_iYqUPJsu+0x13ac>
      }
      break;
 8004aa4:	f000 bd02 	b.w	80054ac <svd_iYqUPJsu+0x1e7c>

     case 2:
      {
        rt = e[qq - 1];
 8004aa8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004aac:	3b01      	subs	r3, #1
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004ab4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004ab8:	4413      	add	r3, r2
 8004aba:	3bc0      	subs	r3, #192	; 0xc0
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
        e[qq - 1] = 0.0;
 8004ac4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004ad0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	e9c1 2300 	strd	r2, r3, [r1]
        for (qjj = qq + 1; qjj <= m + 2; qjj++) {
 8004ae6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004aea:	3301      	adds	r3, #1
 8004aec:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004af0:	e068      	b.n	8004bc4 <svd_iYqUPJsu+0x1594>
          real_T emm1;
          xrotg_B2eK2SzN(&b_s[qjj - 1], &rt, &ztest, &sqds);
 8004af2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004af6:	3b01      	subs	r3, #1
 8004af8:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	18d0      	adds	r0, r2, r3
 8004b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b04:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8004b08:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8004b0c:	f001 fd1a 	bl	8006544 <xrotg_B2eK2SzN>
          emm1 = e[qjj - 1];
 8004b10:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004b14:	3b01      	subs	r3, #1
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004b1c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004b20:	4413      	add	r3, r2
 8004b22:	3bc0      	subs	r3, #192	; 0xc0
 8004b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b28:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
          rt = emm1 * -sqds;
 8004b2c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8004b30:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b32:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8004b3c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b40:	f7fb fd5a 	bl	80005f8 <__aeabi_dmul>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          e[qjj - 1] = emm1 * ztest;
 8004b4c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004b50:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004b54:	1e5c      	subs	r4, r3, #1
 8004b56:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8004b5a:	f7fb fd4d 	bl	80005f8 <__aeabi_dmul>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	00e3      	lsls	r3, r4, #3
 8004b68:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004b6c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004b70:	4413      	add	r3, r2
 8004b72:	3bc0      	subs	r3, #192	; 0xc0
 8004b74:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_miKOw6Cs(U, 3 * (qjj - 1) + 1, 3 * (qq - 1) + 1, ztest, sqds);
 8004b78:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004b7c:	1e5a      	subs	r2, r3, #1
 8004b7e:	4613      	mov	r3, r2
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	4413      	add	r3, r2
 8004b84:	1c59      	adds	r1, r3, #1
 8004b86:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004b8a:	1e5a      	subs	r2, r3, #1
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	4413      	add	r3, r2
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8004b98:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8004b9c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004ba0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ba4:	eeb0 1a46 	vmov.f32	s2, s12
 8004ba8:	eef0 1a66 	vmov.f32	s3, s13
 8004bac:	eeb0 0a47 	vmov.f32	s0, s14
 8004bb0:	eef0 0a67 	vmov.f32	s1, s15
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	f001 fba9 	bl	800630c <xrot_miKOw6Cs>
        for (qjj = qq + 1; qjj <= m + 2; qjj++) {
 8004bba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004bc4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004bc8:	1c9a      	adds	r2, r3, #2
 8004bca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	dd8f      	ble.n	8004af2 <svd_iYqUPJsu+0x14c2>
        }
      }
      break;
 8004bd2:	f000 bc6b 	b.w	80054ac <svd_iYqUPJsu+0x1e7c>
 8004bd6:	bf00      	nop
 8004bd8:	3cb00000 	.word	0x3cb00000

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 8004bdc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004be0:	3301      	adds	r3, #1
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004be8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004bec:	4413      	add	r3, r2
 8004bee:	3ba8      	subs	r3, #168	; 0xa8
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 8004bf8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8004bfc:	643a      	str	r2, [r7, #64]	; 0x40
 8004bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c02:	647b      	str	r3, [r7, #68]	; 0x44
 8004c04:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004c0e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004c12:	4413      	add	r3, r2
 8004c14:	3ba8      	subs	r3, #168	; 0xa8
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c22:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8004c26:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8004c2a:	f00c f9ad 	bl	8010f88 <fmax>
 8004c2e:	eeb0 7a40 	vmov.f32	s14, s0
 8004c32:	eef0 7a60 	vmov.f32	s15, s1
 8004c36:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004c40:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004c44:	4413      	add	r3, r2
 8004c46:	3bc0      	subs	r3, #192	; 0xc0
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	633a      	str	r2, [r7, #48]	; 0x30
 8004c4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c52:	637b      	str	r3, [r7, #52]	; 0x34
 8004c54:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8004c58:	eeb0 0a47 	vmov.f32	s0, s14
 8004c5c:	eef0 0a67 	vmov.f32	s1, s15
 8004c60:	f00c f992 	bl	8010f88 <fmax>
 8004c64:	eeb0 7a40 	vmov.f32	s14, s0
 8004c68:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[qq])), fabs(e[qq]));
 8004c6c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004c76:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3ba8      	subs	r3, #168	; 0xa8
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 8004c82:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8004c8e:	eeb0 0a47 	vmov.f32	s0, s14
 8004c92:	eef0 0a67 	vmov.f32	s1, s15
 8004c96:	f00c f977 	bl	8010f88 <fmax>
 8004c9a:	eeb0 7a40 	vmov.f32	s14, s0
 8004c9e:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[qq])), fabs(e[qq]));
 8004ca2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004cac:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3bc0      	subs	r3, #192	; 0xc0
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 8004cb8:	623a      	str	r2, [r7, #32]
 8004cba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc0:	ed97 1b08 	vldr	d1, [r7, #32]
 8004cc4:	eeb0 0a47 	vmov.f32	s0, s14
 8004cc8:	eef0 0a67 	vmov.f32	s1, s15
 8004ccc:	f00c f95c 	bl	8010f88 <fmax>
 8004cd0:	eeb0 7a40 	vmov.f32	s14, s0
 8004cd4:	eef0 7a60 	vmov.f32	s15, s1
 8004cd8:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        rt = sqds / ztest;
 8004cdc:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8004ce0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8004ce4:	f7fb fdb2 	bl	800084c <__aeabi_ddiv>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
        smm1 = b_s[m] / ztest;
 8004cf0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004cfa:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004cfe:	4413      	add	r3, r2
 8004d00:	3ba8      	subs	r3, #168	; 0xa8
 8004d02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d06:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8004d0a:	f7fb fd9f 	bl	800084c <__aeabi_ddiv>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
        emm1 = e[m] / ztest;
 8004d16:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004d20:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004d24:	4413      	add	r3, r2
 8004d26:	3bc0      	subs	r3, #192	; 0xc0
 8004d28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d2c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8004d30:	f7fb fd8c 	bl	800084c <__aeabi_ddiv>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
        sqds = b_s[qq] / ztest;
 8004d3c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004d46:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3ba8      	subs	r3, #168	; 0xa8
 8004d4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d52:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8004d56:	f7fb fd79 	bl	800084c <__aeabi_ddiv>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 8004d62:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004d66:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004d6a:	f7fb fa8f 	bl	800028c <__adddf3>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4614      	mov	r4, r2
 8004d74:	461d      	mov	r5, r3
 8004d76:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004d7a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004d7e:	f7fb fa83 	bl	8000288 <__aeabi_dsub>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4620      	mov	r0, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f7fb fc35 	bl	80005f8 <__aeabi_dmul>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4614      	mov	r4, r2
 8004d94:	461d      	mov	r5, r3
 8004d96:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8004d9a:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 8004d9e:	f7fb fc2b 	bl	80005f8 <__aeabi_dmul>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4620      	mov	r0, r4
 8004da8:	4629      	mov	r1, r5
 8004daa:	f7fb fa6f 	bl	800028c <__adddf3>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dbe:	f7fb fd45 	bl	800084c <__aeabi_ddiv>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
        emm1 *= rt;
 8004dca:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004dce:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 8004dd2:	f7fb fc11 	bl	80005f8 <__aeabi_dmul>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
        emm1 *= emm1;
 8004dde:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8004de2:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 8004de6:	f7fb fc07 	bl	80005f8 <__aeabi_dmul>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 8004df2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	f7fb fe63 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <svd_iYqUPJsu+0x17ee>
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 8004e14:	f7fb fe58 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d141      	bne.n	8004ea2 <svd_iYqUPJsu+0x1872>
          shift = sqrt(smm1 * smm1 + emm1);
 8004e1e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004e22:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8004e26:	f7fb fbe7 	bl	80005f8 <__aeabi_dmul>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8004e36:	f7fb fa29 	bl	800028c <__adddf3>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	ec43 2b17 	vmov	d7, r2, r3
 8004e42:	eeb0 0a47 	vmov.f32	s0, s14
 8004e46:	eef0 0a67 	vmov.f32	s1, s15
 8004e4a:	f00c f8ef 	bl	801102c <sqrt>
 8004e4e:	ed87 0b7c 	vstr	d0, [r7, #496]	; 0x1f0
          if (smm1 < 0.0) {
 8004e52:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	f7fb fe3d 	bl	8000adc <__aeabi_dcmplt>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <svd_iYqUPJsu+0x1850>
            shift = -shift;
 8004e68:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004e6c:	603b      	str	r3, [r7, #0]
 8004e6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004e72:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	ed97 7b00 	vldr	d7, [r7]
 8004e7c:	ed87 7b7c 	vstr	d7, [r7, #496]	; 0x1f0
          }

          shift = emm1 / (smm1 + shift);
 8004e80:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004e84:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8004e88:	f7fb fa00 	bl	800028c <__adddf3>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 8004e94:	f7fb fcda 	bl	800084c <__aeabi_ddiv>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	e9c7 237c 	strd	r2, r3, [r7, #496]	; 0x1f0
 8004ea0:	e005      	b.n	8004eae <svd_iYqUPJsu+0x187e>
        } else {
          shift = 0.0;
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9c7 237c 	strd	r2, r3, [r7, #496]	; 0x1f0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 8004eae:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8004eb2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004eb6:	f7fb f9e9 	bl	800028c <__adddf3>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4614      	mov	r4, r2
 8004ec0:	461d      	mov	r5, r3
 8004ec2:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8004ec6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004eca:	f7fb f9dd 	bl	8000288 <__aeabi_dsub>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7fb fb8f 	bl	80005f8 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8004ee6:	f7fb f9d1 	bl	800028c <__adddf3>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
        ztest = e[qq] / ztest * sqds;
 8004ef2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004efc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004f00:	4413      	add	r3, r2
 8004f02:	3bc0      	subs	r3, #192	; 0xc0
 8004f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f08:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8004f0c:	f7fb fc9e 	bl	800084c <__aeabi_ddiv>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8004f1c:	f7fb fb6c 	bl	80005f8 <__aeabi_dmul>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        for (qjj = qq + 1; qjj <= m + 1; qjj++) {
 8004f28:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004f32:	e1a5      	b.n	8005280 <svd_iYqUPJsu+0x1c50>
          xrotg_B2eK2SzN(&rt, &ztest, &sqds, &smm1);
 8004f34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004f38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f3c:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8004f40:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8004f44:	f001 fafe 	bl	8006544 <xrotg_B2eK2SzN>
          if (qjj > qq + 1) {
 8004f48:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004f52:	4293      	cmp	r3, r2
 8004f54:	dd03      	ble.n	8004f5e <svd_iYqUPJsu+0x192e>
            e[0] = rt;
 8004f56:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004f5a:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
          }

          emm1 = e[qjj - 1];
 8004f5e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004f62:	3b01      	subs	r3, #1
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004f6a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004f6e:	4413      	add	r3, r2
 8004f70:	3bc0      	subs	r3, #192	; 0xc0
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
          rt = b_s[qjj - 1];
 8004f7a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004f86:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3ba8      	subs	r3, #168	; 0xa8
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          e[qjj - 1] = emm1 * sqds - rt * smm1;
 8004f96:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8004f9a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8004f9e:	f7fb fb2b 	bl	80005f8 <__aeabi_dmul>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4690      	mov	r8, r2
 8004fa8:	4699      	mov	r9, r3
 8004faa:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004fae:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8004fb2:	f7fb fb21 	bl	80005f8 <__aeabi_dmul>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004fc2:	1e5c      	subs	r4, r3, #1
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4640      	mov	r0, r8
 8004fca:	4649      	mov	r1, r9
 8004fcc:	f7fb f95c 	bl	8000288 <__aeabi_dsub>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	00e3      	lsls	r3, r4, #3
 8004fda:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004fde:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3bc0      	subs	r3, #192	; 0xc0
 8004fe6:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 8004fea:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004ff4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3ba8      	subs	r3, #168	; 0xa8
 8004ffc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005000:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005004:	f7fb faf8 	bl	80005f8 <__aeabi_dmul>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] *= sqds;
 8005010:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800501a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800501e:	4413      	add	r3, r2
 8005020:	3ba8      	subs	r3, #168	; 0xa8
 8005022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005026:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800502a:	f7fb fae5 	bl	80005f8 <__aeabi_dmul>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005040:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005044:	4413      	add	r3, r2
 8005046:	3ba8      	subs	r3, #168	; 0xa8
 8005048:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_miKOw6Cs(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 800504c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005050:	1e5a      	subs	r2, r3, #1
 8005052:	4613      	mov	r3, r2
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	4413      	add	r3, r2
 8005058:	1c59      	adds	r1, r3, #1
 800505a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 800506a:	ed97 6b4e 	vldr	d6, [r7, #312]	; 0x138
 800506e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005076:	eeb0 1a46 	vmov.f32	s2, s12
 800507a:	eef0 1a66 	vmov.f32	s3, s13
 800507e:	eeb0 0a47 	vmov.f32	s0, s14
 8005082:	eef0 0a67 	vmov.f32	s1, s15
 8005086:	6818      	ldr	r0, [r3, #0]
 8005088:	f001 f940 	bl	800630c <xrot_miKOw6Cs>
          b_s[qjj - 1] = rt * sqds + emm1 * smm1;
 800508c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005090:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005094:	f7fb fab0 	bl	80005f8 <__aeabi_dmul>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4690      	mov	r8, r2
 800509e:	4699      	mov	r9, r3
 80050a0:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80050a4:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80050a8:	f7fb faa6 	bl	80005f8 <__aeabi_dmul>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4610      	mov	r0, r2
 80050b2:	4619      	mov	r1, r3
 80050b4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80050b8:	1e5c      	subs	r4, r3, #1
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4640      	mov	r0, r8
 80050c0:	4649      	mov	r1, r9
 80050c2:	f7fb f8e3 	bl	800028c <__adddf3>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4610      	mov	r0, r2
 80050cc:	4619      	mov	r1, r3
 80050ce:	00e3      	lsls	r3, r4, #3
 80050d0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80050d4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80050d8:	4413      	add	r3, r2
 80050da:	3ba8      	subs	r3, #168	; 0xa8
 80050dc:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg_B2eK2SzN(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 80050e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80050e4:	3b01      	subs	r3, #1
 80050e6:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	18d0      	adds	r0, r2, r3
 80050ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80050f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050f6:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80050fa:	f001 fa23 	bl	8006544 <xrotg_B2eK2SzN>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 80050fe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005102:	3b01      	subs	r3, #1
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800510a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800510e:	4413      	add	r3, r2
 8005110:	3bc0      	subs	r3, #192	; 0xc0
 8005112:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005116:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800511a:	f7fb fa6d 	bl	80005f8 <__aeabi_dmul>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4614      	mov	r4, r2
 8005124:	461d      	mov	r5, r3
 8005126:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005130:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005134:	4413      	add	r3, r2
 8005136:	3ba8      	subs	r3, #168	; 0xa8
 8005138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800513c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005140:	f7fb fa5a 	bl	80005f8 <__aeabi_dmul>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4620      	mov	r0, r4
 800514a:	4629      	mov	r1, r5
 800514c:	f7fb f89e 	bl	800028c <__adddf3>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 8005158:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800515c:	3b01      	subs	r3, #1
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005164:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005168:	4413      	add	r3, r2
 800516a:	3bc0      	subs	r3, #192	; 0xc0
 800516c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005170:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005174:	61ba      	str	r2, [r7, #24]
 8005176:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005180:	f7fb fa3a 	bl	80005f8 <__aeabi_dmul>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4614      	mov	r4, r2
 800518a:	461d      	mov	r5, r3
 800518c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005196:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800519a:	4413      	add	r3, r2
 800519c:	3ba8      	subs	r3, #168	; 0xa8
 800519e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051a2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80051a6:	f7fb fa27 	bl	80005f8 <__aeabi_dmul>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4620      	mov	r0, r4
 80051b0:	4629      	mov	r1, r5
 80051b2:	f7fb f86b 	bl	800028c <__adddf3>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4610      	mov	r0, r2
 80051bc:	4619      	mov	r1, r3
 80051be:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80051c8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80051cc:	4413      	add	r3, r2
 80051ce:	3ba8      	subs	r3, #168	; 0xa8
 80051d0:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 80051d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80051de:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80051e2:	4413      	add	r3, r2
 80051e4:	3bc0      	subs	r3, #192	; 0xc0
 80051e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051ea:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80051ee:	f7fb fa03 	bl	80005f8 <__aeabi_dmul>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[qjj] *= sqds;
 80051fa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005204:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005208:	4413      	add	r3, r2
 800520a:	3bc0      	subs	r3, #192	; 0xc0
 800520c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005210:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005214:	f7fb f9f0 	bl	80005f8 <__aeabi_dmul>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4610      	mov	r0, r2
 800521e:	4619      	mov	r1, r3
 8005220:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800522a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800522e:	4413      	add	r3, r2
 8005230:	3bc0      	subs	r3, #192	; 0xc0
 8005232:	e9c3 0100 	strd	r0, r1, [r3]
          xrot_miKOw6Cs(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 8005236:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800523a:	1e5a      	subs	r2, r3, #1
 800523c:	4613      	mov	r3, r2
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	4413      	add	r3, r2
 8005242:	1c59      	adds	r1, r3, #1
 8005244:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8005248:	4613      	mov	r3, r2
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	4413      	add	r3, r2
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8005254:	ed97 6b4e 	vldr	d6, [r7, #312]	; 0x138
 8005258:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800525c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005260:	eeb0 1a46 	vmov.f32	s2, s12
 8005264:	eef0 1a66 	vmov.f32	s3, s13
 8005268:	eeb0 0a47 	vmov.f32	s0, s14
 800526c:	eef0 0a67 	vmov.f32	s1, s15
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	f001 f84b 	bl	800630c <xrot_miKOw6Cs>
        for (qjj = qq + 1; qjj <= m + 1; qjj++) {
 8005276:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800527a:	3301      	adds	r3, #1
 800527c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8005280:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800528a:	4293      	cmp	r3, r2
 800528c:	f77f ae52 	ble.w	8004f34 <svd_iYqUPJsu+0x1904>
        }

        e[m] = rt;
 8005290:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005294:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800529e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80052a2:	4413      	add	r3, r2
 80052a4:	3bc0      	subs	r3, #192	; 0xc0
 80052a6:	e9c3 0100 	strd	r0, r1, [r3]
        qp1++;
 80052aa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80052ae:	3301      	adds	r3, #1
 80052b0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
      }
      break;
 80052b4:	e0fa      	b.n	80054ac <svd_iYqUPJsu+0x1e7c>

     default:
      if (b_s[qq] < 0.0) {
 80052b6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80052c0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80052c4:	4413      	add	r3, r2
 80052c6:	3ba8      	subs	r3, #168	; 0xa8
 80052c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	f7fb fc02 	bl	8000adc <__aeabi_dcmplt>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d056      	beq.n	800538c <svd_iYqUPJsu+0x1d5c>
        b_s[qq] = -b_s[qq];
 80052de:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80052e8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80052ec:	4413      	add	r3, r2
 80052ee:	3ba8      	subs	r3, #168	; 0xa8
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	613a      	str	r2, [r7, #16]
 80052f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005306:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800530a:	4413      	add	r3, r2
 800530c:	3ba8      	subs	r3, #168	; 0xa8
 800530e:	ed97 7b04 	vldr	d7, [r7, #16]
 8005312:	ed83 7b00 	vstr	d7, [r3]
        qp1 = 3 * qq + 1;
 8005316:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800531a:	4613      	mov	r3, r2
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	4413      	add	r3, r2
 8005320:	3301      	adds	r3, #1
 8005322:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
        for (qjj = qp1; qjj <= qp1 + 2; qjj++) {
 8005326:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800532a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800532e:	e026      	b.n	800537e <svd_iYqUPJsu+0x1d4e>
          V[qjj - 1] = -V[qjj - 1];
 8005330:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005334:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005338:	3b01      	subs	r3, #1
 800533a:	00da      	lsls	r2, r3, #3
 800533c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4413      	add	r3, r2
 8005348:	e9d3 0100 	ldrd	r0, r1, [r3]
 800534c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005350:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005354:	3b01      	subs	r3, #1
 8005356:	00da      	lsls	r2, r3, #3
 8005358:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800535c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4413      	add	r3, r2
 8005364:	60b8      	str	r0, [r7, #8]
 8005366:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 800536a:	60fa      	str	r2, [r7, #12]
 800536c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005370:	ed83 7b00 	vstr	d7, [r3]
        for (qjj = qp1; qjj <= qp1 + 2; qjj++) {
 8005374:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005378:	3301      	adds	r3, #1
 800537a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800537e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005382:	1c9a      	adds	r2, r3, #2
 8005384:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005388:	4293      	cmp	r3, r2
 800538a:	ddd1      	ble.n	8005330 <svd_iYqUPJsu+0x1d00>
        }
      }

      qp1 = qq + 1;
 800538c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005390:	3301      	adds	r3, #1
 8005392:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
      while ((qq + 1 < 3) && (b_s[qq] < b_s[qp1])) {
 8005396:	e060      	b.n	800545a <svd_iYqUPJsu+0x1e2a>
        rt = b_s[qq];
 8005398:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80053a2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80053a6:	4413      	add	r3, r2
 80053a8:	3ba8      	subs	r3, #168	; 0xa8
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
        b_s[qq] = b_s[qp1];
 80053b2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80053bc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80053c0:	4413      	add	r3, r2
 80053c2:	3ba8      	subs	r3, #168	; 0xa8
 80053c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053c8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80053d2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80053d6:	4413      	add	r3, r2
 80053d8:	3ba8      	subs	r3, #168	; 0xa8
 80053da:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qp1] = rt;
 80053de:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80053e2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80053ec:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80053f0:	4413      	add	r3, r2
 80053f2:	3ba8      	subs	r3, #168	; 0xa8
 80053f4:	e9c3 0100 	strd	r0, r1, [r3]
        xswap_U9h3dV3C(V, 3 * qq + 1, 3 * (qq + 1) + 1);
 80053f8:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80053fc:	4613      	mov	r3, r2
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	4413      	add	r3, r2
 8005402:	1c59      	adds	r1, r3, #1
 8005404:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	4613      	mov	r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	4413      	add	r3, r2
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	f001 f992 	bl	8006744 <xswap_U9h3dV3C>
        xswap_U9h3dV3C(U, 3 * qq + 1, 3 * (qq + 1) + 1);
 8005420:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8005424:	4613      	mov	r3, r2
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	4413      	add	r3, r2
 800542a:	1c59      	adds	r1, r3, #1
 800542c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	4613      	mov	r3, r2
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	4413      	add	r3, r2
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800543e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	f001 f97e 	bl	8006744 <xswap_U9h3dV3C>
        qq = qp1;
 8005448:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800544c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
        qp1++;
 8005450:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005454:	3301      	adds	r3, #1
 8005456:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
      while ((qq + 1 < 3) && (b_s[qq] < b_s[qp1])) {
 800545a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800545e:	2b01      	cmp	r3, #1
 8005460:	dc1b      	bgt.n	800549a <svd_iYqUPJsu+0x1e6a>
 8005462:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800546c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005470:	4413      	add	r3, r2
 8005472:	3ba8      	subs	r3, #168	; 0xa8
 8005474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005478:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005482:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005486:	4413      	add	r3, r2
 8005488:	3ba8      	subs	r3, #168	; 0xa8
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f7fb fb25 	bl	8000adc <__aeabi_dcmplt>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	f47f af7f 	bne.w	8005398 <svd_iYqUPJsu+0x1d68>
      }

      qp1 = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
      m--;
 80054a0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80054a4:	3b01      	subs	r3, #1
 80054a6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
      break;
 80054aa:	bf00      	nop
  while ((m + 2 > 0) && (qp1 < 75)) {
 80054ac:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	db04      	blt.n	80054c0 <svd_iYqUPJsu+0x1e90>
 80054b6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80054ba:	2b4a      	cmp	r3, #74	; 0x4a
 80054bc:	f77f a8bd 	ble.w	800463a <svd_iYqUPJsu+0x100a>
    }
  }

  s[0] = b_s[0];
 80054c0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80054c4:	f507 7108 	add.w	r1, r7, #544	; 0x220
 80054c8:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 80054cc:	6809      	ldr	r1, [r1, #0]
 80054ce:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 80054d2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80054d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f103 0108 	add.w	r1, r3, #8
 80054e0:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80054e4:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 80054e8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80054ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f103 0110 	add.w	r1, r3, #16
 80054f6:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80054fa:	e9c1 2300 	strd	r2, r3, [r1]
}
 80054fe:	bf00      	nop
 8005500:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8005504:	46bd      	mov	sp, r7
 8005506:	ecbd 8b02 	vpop	{d8}
 800550a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550e:	bf00      	nop

08005510 <trisolve_7ekc8URj>:
#include "rtwtypes.h"
#include "trisolve_7ekc8URj.h"

/* Function for MATLAB Function: '<S7>/Correct' */
void trisolve_7ekc8URj(real_T A, real_T B_0[3])
{
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	ed87 0b02 	vstr	d0, [r7, #8]
 800551a:	6078      	str	r0, [r7, #4]
  if (B_0[0] != 0.0) {
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	f7fb facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <trisolve_7ekc8URj+0x3c>
    B_0[0] /= A;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800553a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800553e:	f7fb f985 	bl	800084c <__aeabi_ddiv>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B_0[1] != 0.0) {
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3308      	adds	r3, #8
 8005550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	f7fb fab4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10e      	bne.n	8005584 <trisolve_7ekc8URj+0x74>
    B_0[1] /= A;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3308      	adds	r3, #8
 800556a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f103 0408 	add.w	r4, r3, #8
 8005574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005578:	f7fb f968 	bl	800084c <__aeabi_ddiv>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B_0[2] != 0.0) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3310      	adds	r3, #16
 8005588:	e9d3 0100 	ldrd	r0, r1, [r3]
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	f7fb fa98 	bl	8000ac8 <__aeabi_dcmpeq>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d000      	beq.n	80055a0 <trisolve_7ekc8URj+0x90>
    B_0[2] /= A;
  }
}
 800559e:	e00e      	b.n	80055be <trisolve_7ekc8URj+0xae>
    B_0[2] /= A;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3310      	adds	r3, #16
 80055a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f103 0410 	add.w	r4, r3, #16
 80055ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055b2:	f7fb f94b 	bl	800084c <__aeabi_ddiv>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	e9c4 2300 	strd	r2, r3, [r4]
}
 80055be:	bf00      	nop
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd90      	pop	{r4, r7, pc}

080055c6 <xaxpy_32GB6RlT>:
#include "rtwtypes.h"
#include "xaxpy_32GB6RlT.h"

/* Function for MATLAB Function: '<S7>/Correct' */
void xaxpy_32GB6RlT(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 80055c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c8:	b089      	sub	sp, #36	; 0x24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6178      	str	r0, [r7, #20]
 80055ce:	ed87 0b02 	vstr	d0, [r7, #8]
 80055d2:	6139      	str	r1, [r7, #16]
 80055d4:	607a      	str	r2, [r7, #4]
 80055d6:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	dd41      	ble.n	8005662 <xaxpy_32GB6RlT+0x9c>
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055ea:	f7fb fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d000      	beq.n	80055f6 <xaxpy_32GB6RlT+0x30>
      int32_T tmp;
      tmp = (iy0 + k) - 1;
      y[tmp] += y[(ix0 + k) - 1] * a;
    }
  }
}
 80055f4:	e035      	b.n	8005662 <xaxpy_32GB6RlT+0x9c>
    for (k = 0; k < n; k++) {
 80055f6:	2300      	movs	r3, #0
 80055f8:	61fb      	str	r3, [r7, #28]
 80055fa:	e02e      	b.n	800565a <xaxpy_32GB6RlT+0x94>
      tmp = (iy0 + k) - 1;
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	4413      	add	r3, r2
 8005602:	3b01      	subs	r3, #1
 8005604:	61bb      	str	r3, [r7, #24]
      y[tmp] += y[(ix0 + k) - 1] * a;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	4413      	add	r3, r2
 800560e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	4413      	add	r3, r2
 8005618:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800561c:	3b01      	subs	r3, #1
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	4413      	add	r3, r2
 8005624:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800562c:	f7fa ffe4 	bl	80005f8 <__aeabi_dmul>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4610      	mov	r0, r2
 8005636:	4619      	mov	r1, r3
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	18d6      	adds	r6, r2, r3
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4620      	mov	r0, r4
 8005646:	4629      	mov	r1, r5
 8005648:	f7fa fe20 	bl	800028c <__adddf3>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	e9c6 2300 	strd	r2, r3, [r6]
    for (k = 0; k < n; k++) {
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	3301      	adds	r3, #1
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	429a      	cmp	r2, r3
 8005660:	dbcc      	blt.n	80055fc <xaxpy_32GB6RlT+0x36>
}
 8005662:	bf00      	nop
 8005664:	3724      	adds	r7, #36	; 0x24
 8005666:	46bd      	mov	sp, r7
 8005668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800566a <xaxpy_6hzNwyRv>:
#include "xaxpy_6hzNwyRv.h"

/* Function for MATLAB Function: '<S7>/Correct' */
void xaxpy_6hzNwyRv(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 800566a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800566c:	b089      	sub	sp, #36	; 0x24
 800566e:	af00      	add	r7, sp, #0
 8005670:	6178      	str	r0, [r7, #20]
 8005672:	ed87 0b02 	vstr	d0, [r7, #8]
 8005676:	6139      	str	r1, [r7, #16]
 8005678:	607a      	str	r2, [r7, #4]
 800567a:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2b00      	cmp	r3, #0
 8005680:	dd41      	ble.n	8005706 <xaxpy_6hzNwyRv+0x9c>
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800568e:	f7fb fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d000      	beq.n	800569a <xaxpy_6hzNwyRv+0x30>
      int32_T tmp;
      tmp = (iy0 + k) - 1;
      y[tmp] += x[(ix0 + k) - 1] * a;
    }
  }
}
 8005698:	e035      	b.n	8005706 <xaxpy_6hzNwyRv+0x9c>
    for (k = 0; k < n; k++) {
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
 800569e:	e02e      	b.n	80056fe <xaxpy_6hzNwyRv+0x94>
      tmp = (iy0 + k) - 1;
 80056a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	3b01      	subs	r3, #1
 80056a8:	61bb      	str	r3, [r7, #24]
      y[tmp] += x[(ix0 + k) - 1] * a;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	4413      	add	r3, r2
 80056b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80056c0:	3b01      	subs	r3, #1
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4413      	add	r3, r2
 80056c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056d0:	f7fa ff92 	bl	80005f8 <__aeabi_dmul>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4610      	mov	r0, r2
 80056da:	4619      	mov	r1, r3
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	18d6      	adds	r6, r2, r3
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4620      	mov	r0, r4
 80056ea:	4629      	mov	r1, r5
 80056ec:	f7fa fdce 	bl	800028c <__adddf3>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	e9c6 2300 	strd	r2, r3, [r6]
    for (k = 0; k < n; k++) {
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	3301      	adds	r3, #1
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	429a      	cmp	r2, r3
 8005704:	dbcc      	blt.n	80056a0 <xaxpy_6hzNwyRv+0x36>
}
 8005706:	bf00      	nop
 8005708:	3724      	adds	r7, #36	; 0x24
 800570a:	46bd      	mov	sp, r7
 800570c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800570e <xaxpy_nhRNE7tr>:
#include "xaxpy_nhRNE7tr.h"

/* Function for MATLAB Function: '<S7>/Correct' */
void xaxpy_nhRNE7tr(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                    y[9], int32_T iy0)
{
 800570e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005710:	b089      	sub	sp, #36	; 0x24
 8005712:	af00      	add	r7, sp, #0
 8005714:	6178      	str	r0, [r7, #20]
 8005716:	ed87 0b02 	vstr	d0, [r7, #8]
 800571a:	6139      	str	r1, [r7, #16]
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	dd41      	ble.n	80057aa <xaxpy_nhRNE7tr+0x9c>
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005732:	f7fb f9c9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d000      	beq.n	800573e <xaxpy_nhRNE7tr+0x30>
      int32_T tmp;
      tmp = (iy0 + k) - 1;
      y[tmp] += x[(ix0 + k) - 1] * a;
    }
  }
}
 800573c:	e035      	b.n	80057aa <xaxpy_nhRNE7tr+0x9c>
    for (k = 0; k < n; k++) {
 800573e:	2300      	movs	r3, #0
 8005740:	61fb      	str	r3, [r7, #28]
 8005742:	e02e      	b.n	80057a2 <xaxpy_nhRNE7tr+0x94>
      tmp = (iy0 + k) - 1;
 8005744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	4413      	add	r3, r2
 800574a:	3b01      	subs	r3, #1
 800574c:	61bb      	str	r3, [r7, #24]
      y[tmp] += x[(ix0 + k) - 1] * a;
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	4413      	add	r3, r2
 8005756:	e9d3 4500 	ldrd	r4, r5, [r3]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	4413      	add	r3, r2
 8005760:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005764:	3b01      	subs	r3, #1
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005774:	f7fa ff40 	bl	80005f8 <__aeabi_dmul>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4610      	mov	r0, r2
 800577e:	4619      	mov	r1, r3
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	18d6      	adds	r6, r2, r3
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4620      	mov	r0, r4
 800578e:	4629      	mov	r1, r5
 8005790:	f7fa fd7c 	bl	800028c <__adddf3>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	e9c6 2300 	strd	r2, r3, [r6]
    for (k = 0; k < n; k++) {
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	3301      	adds	r3, #1
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	dbcc      	blt.n	8005744 <xaxpy_nhRNE7tr+0x36>
}
 80057aa:	bf00      	nop
 80057ac:	3724      	adds	r7, #36	; 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057b2 <xdotc_VAkR4IHS>:
#include "xdotc_VAkR4IHS.h"

/* Function for MATLAB Function: '<S7>/Correct' */
real_T xdotc_VAkR4IHS(int32_T n, const real_T x[9], int32_T ix0, const real_T y
                      [9], int32_T iy0)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b088      	sub	sp, #32
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
 80057be:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (n >= 1) {
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	dd2b      	ble.n	800582a <xdotc_VAkR4IHS+0x78>
    for (k = 0; k < n; k++) {
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e024      	b.n	8005822 <xdotc_VAkR4IHS+0x70>
      d += x[(ix0 + k) - 1] * y[(iy0 + k) - 1];
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	4413      	add	r3, r2
 80057de:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80057e2:	3b01      	subs	r3, #1
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4413      	add	r3, r2
 80057ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80057f8:	3b01      	subs	r3, #1
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	4413      	add	r3, r2
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f7fa fef8 	bl	80005f8 <__aeabi_dmul>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005810:	f7fa fd3c 	bl	800028c <__adddf3>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (k = 0; k < n; k++) {
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	3301      	adds	r3, #1
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	429a      	cmp	r2, r3
 8005828:	dbd6      	blt.n	80057d8 <xdotc_VAkR4IHS+0x26>
    }
  }

  return d;
 800582a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800582e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005832:	eeb0 0a47 	vmov.f32	s0, s14
 8005836:	eef0 0a67 	vmov.f32	s1, s15
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <xgemv_4E6oVMBP>:
#include "div_nde_s32_floor.h"

/* Function for MATLAB Function: '<S7>/Correct' */
void xgemv_4E6oVMBP(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                    real_T x[9], int32_T ix0, real_T y[3])
{
 8005840:	b590      	push	{r4, r7, lr}
 8005842:	b08b      	sub	sp, #44	; 0x2c
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T iyend;
  if ((m != 0) && (n != 0)) {
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d06e      	beq.n	8005932 <xgemv_4E6oVMBP+0xf2>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d06b      	beq.n	8005932 <xgemv_4E6oVMBP+0xf2>
    int32_T b;
    if (n - 1 >= 0) {
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	dd06      	ble.n	800586e <xgemv_4E6oVMBP+0x2e>
      memset(&y[0], 0, (uint32_T)n * sizeof(real_T));
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	461a      	mov	r2, r3
 8005866:	2100      	movs	r1, #0
 8005868:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800586a:	f007 f949 	bl	800cb00 <memset>
    }

    b = (n - 1) * 3 + ia0;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	1e5a      	subs	r2, r3, #1
 8005872:	4613      	mov	r3, r2
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	4413      	add	r3, r2
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	4413      	add	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
    for (b_iy = ia0; b_iy <= b; b_iy += 3) {
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
 8005882:	e052      	b.n	800592a <xgemv_4E6oVMBP+0xea>
      real_T c;
      int32_T d;
      c = 0.0;
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      d = b_iy + m;
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
      for (iyend = b_iy; iyend < d; iyend++) {
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	623b      	str	r3, [r7, #32]
 800589c:	e024      	b.n	80058e8 <xgemv_4E6oVMBP+0xa8>
        c += x[((ix0 + iyend) - b_iy) - 1] * A[iyend - 1];
 800589e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	441a      	add	r2, r3
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80058ac:	3b01      	subs	r3, #1
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058b2:	4413      	add	r3, r2
 80058b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80058be:	3b01      	subs	r3, #1
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	4413      	add	r3, r2
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f7fa fe95 	bl	80005f8 <__aeabi_dmul>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80058d6:	f7fa fcd9 	bl	800028c <__adddf3>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	e9c7 2306 	strd	r2, r3, [r7, #24]
      for (iyend = b_iy; iyend < d; iyend++) {
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	3301      	adds	r3, #1
 80058e6:	623b      	str	r3, [r7, #32]
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	dbd6      	blt.n	800589e <xgemv_4E6oVMBP+0x5e>
      }

      iyend = div_nde_s32_floor(b_iy - ia0, 3);
 80058f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2103      	movs	r1, #3
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fb ffff 	bl	80018fc <div_nde_s32_floor>
 80058fe:	6238      	str	r0, [r7, #32]
      y[iyend] += c;
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005906:	4413      	add	r3, r2
 8005908:	e9d3 0100 	ldrd	r0, r1, [r3]
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005912:	18d4      	adds	r4, r2, r3
 8005914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005918:	f7fa fcb8 	bl	800028c <__adddf3>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	e9c4 2300 	strd	r2, r3, [r4]
    for (b_iy = ia0; b_iy <= b; b_iy += 3) {
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	3303      	adds	r3, #3
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
 800592a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	429a      	cmp	r2, r3
 8005930:	dda8      	ble.n	8005884 <xgemv_4E6oVMBP+0x44>
    }
  }
}
 8005932:	bf00      	nop
 8005934:	372c      	adds	r7, #44	; 0x2c
 8005936:	46bd      	mov	sp, r7
 8005938:	bd90      	pop	{r4, r7, pc}

0800593a <xgemv_QDh8c9kG>:
#include "div_nde_s32_floor.h"

/* Function for MATLAB Function: '<S8>/Predict' */
void xgemv_QDh8c9kG(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 800593a:	b590      	push	{r4, r7, lr}
 800593c:	b08b      	sub	sp, #44	; 0x2c
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
 8005946:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T iyend;
  if ((m != 0) && (n != 0)) {
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d070      	beq.n	8005a30 <xgemv_QDh8c9kG+0xf6>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d06d      	beq.n	8005a30 <xgemv_QDh8c9kG+0xf6>
    int32_T b;
    if (n - 1 >= 0) {
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	dd06      	ble.n	8005968 <xgemv_QDh8c9kG+0x2e>
      memset(&y[0], 0, (uint32_T)n * sizeof(real_T));
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	461a      	mov	r2, r3
 8005960:	2100      	movs	r1, #0
 8005962:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005964:	f007 f8cc 	bl	800cb00 <memset>
    }

    b = (n - 1) * 6 + ia0;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	1e5a      	subs	r2, r3, #1
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	461a      	mov	r2, r3
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	4413      	add	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
    for (b_iy = ia0; b_iy <= b; b_iy += 6) {
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
 8005980:	e052      	b.n	8005a28 <xgemv_QDh8c9kG+0xee>
      real_T c;
      int32_T d;
      c = 0.0;
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	e9c7 2306 	strd	r2, r3, [r7, #24]
      d = b_iy + m;
 800598e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
      for (iyend = b_iy; iyend < d; iyend++) {
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	623b      	str	r3, [r7, #32]
 800599a:	e024      	b.n	80059e6 <xgemv_QDh8c9kG+0xac>
        c += x[((ix0 + iyend) - b_iy) - 1] * A[iyend - 1];
 800599c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	441a      	add	r2, r3
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80059aa:	3b01      	subs	r3, #1
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059b0:	4413      	add	r3, r2
 80059b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80059bc:	3b01      	subs	r3, #1
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	4413      	add	r3, r2
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f7fa fe16 	bl	80005f8 <__aeabi_dmul>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80059d4:	f7fa fc5a 	bl	800028c <__adddf3>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      for (iyend = b_iy; iyend < d; iyend++) {
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	3301      	adds	r3, #1
 80059e4:	623b      	str	r3, [r7, #32]
 80059e6:	6a3a      	ldr	r2, [r7, #32]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	dbd6      	blt.n	800599c <xgemv_QDh8c9kG+0x62>
      }

      iyend = div_nde_s32_floor(b_iy - ia0, 6);
 80059ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2106      	movs	r1, #6
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fb ff80 	bl	80018fc <div_nde_s32_floor>
 80059fc:	6238      	str	r0, [r7, #32]
      y[iyend] += c;
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a04:	4413      	add	r3, r2
 8005a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a10:	18d4      	adds	r4, r2, r3
 8005a12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a16:	f7fa fc39 	bl	800028c <__adddf3>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	e9c4 2300 	strd	r2, r3, [r4]
    for (b_iy = ia0; b_iy <= b; b_iy += 6) {
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	3306      	adds	r3, #6
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
 8005a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	dda8      	ble.n	8005982 <xgemv_QDh8c9kG+0x48>
    }
  }
}
 8005a30:	bf00      	nop
 8005a32:	372c      	adds	r7, #44	; 0x2c
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd90      	pop	{r4, r7, pc}

08005a38 <xgerc_duqdQXG2>:
#include "xgerc_duqdQXG2.h"

/* Function for MATLAB Function: '<S7>/Correct' */
void xgerc_duqdQXG2(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[9], int32_T ia0)
{
 8005a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a3a:	b08f      	sub	sp, #60	; 0x3c
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6178      	str	r0, [r7, #20]
 8005a40:	6139      	str	r1, [r7, #16]
 8005a42:	ed87 0b02 	vstr	d0, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
  int32_T ijA;
  int32_T j;
  if (!(alpha1 == 0.0)) {
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a56:	f7fb f837 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d000      	beq.n	8005a62 <xgerc_duqdQXG2+0x2a>
      }

      jA += 3;
    }
  }
}
 8005a60:	e068      	b.n	8005b34 <xgerc_duqdQXG2+0xfc>
    jA = ia0;
 8005a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (j = 0; j < n; j++) {
 8005a66:	2300      	movs	r3, #0
 8005a68:	633b      	str	r3, [r7, #48]	; 0x30
 8005a6a:	e05f      	b.n	8005b2c <xgerc_duqdQXG2+0xf4>
      temp = y[j];
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	4413      	add	r3, r2
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	e9c7 2308 	strd	r2, r3, [r7, #32]
      if (temp != 0.0) {
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005a88:	f7fb f81e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d146      	bne.n	8005b20 <xgerc_duqdQXG2+0xe8>
        temp *= alpha1;
 8005a92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005a9a:	f7fa fdad 	bl	80005f8 <__aeabi_dmul>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	e9c7 2308 	strd	r2, r3, [r7, #32]
        b = m + jA;
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	4413      	add	r3, r2
 8005aac:	61fb      	str	r3, [r7, #28]
        for (ijA = jA; ijA < b; ijA++) {
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab2:	e031      	b.n	8005b18 <xgerc_duqdQXG2+0xe0>
          A[ijA - 1] += A[((ix0 + ijA) - jA) - 1] * temp;
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005aba:	3b01      	subs	r3, #1
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ac0:	4413      	add	r3, r2
 8005ac2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aca:	441a      	add	r2, r3
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ada:	4413      	add	r3, r2
 8005adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ae0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ae4:	f7fa fd88 	bl	80005f8 <__aeabi_dmul>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4610      	mov	r0, r2
 8005aee:	4619      	mov	r1, r3
 8005af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005af6:	3b01      	subs	r3, #1
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005afc:	18d6      	adds	r6, r2, r3
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4620      	mov	r0, r4
 8005b04:	4629      	mov	r1, r5
 8005b06:	f7fa fbc1 	bl	800028c <__adddf3>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	e9c6 2300 	strd	r2, r3, [r6]
        for (ijA = jA; ijA < b; ijA++) {
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b14:	3301      	adds	r3, #1
 8005b16:	637b      	str	r3, [r7, #52]	; 0x34
 8005b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	dbc9      	blt.n	8005ab4 <xgerc_duqdQXG2+0x7c>
      jA += 3;
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b22:	3303      	adds	r3, #3
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (j = 0; j < n; j++) {
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	3301      	adds	r3, #1
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	db9b      	blt.n	8005a6c <xgerc_duqdQXG2+0x34>
}
 8005b34:	bf00      	nop
 8005b36:	373c      	adds	r7, #60	; 0x3c
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b3c <xgerc_kAS2vIrq>:
#include "xgerc_kAS2vIrq.h"

/* Function for MATLAB Function: '<S8>/Predict' */
void xgerc_kAS2vIrq(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 8005b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b3e:	b08f      	sub	sp, #60	; 0x3c
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6178      	str	r0, [r7, #20]
 8005b44:	6139      	str	r1, [r7, #16]
 8005b46:	ed87 0b02 	vstr	d0, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
  int32_T ijA;
  int32_T j;
  if (!(alpha1 == 0.0)) {
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b5a:	f7fa ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d000      	beq.n	8005b66 <xgerc_kAS2vIrq+0x2a>
      }

      jA += 6;
    }
  }
}
 8005b64:	e068      	b.n	8005c38 <xgerc_kAS2vIrq+0xfc>
    jA = ia0;
 8005b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (j = 0; j < n; j++) {
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b6e:	e05f      	b.n	8005c30 <xgerc_kAS2vIrq+0xf4>
      temp = y[j];
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	4413      	add	r3, r2
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      if (temp != 0.0) {
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005b8c:	f7fa ff9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d146      	bne.n	8005c24 <xgerc_kAS2vIrq+0xe8>
        temp *= alpha1;
 8005b96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b9a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005b9e:	f7fa fd2b 	bl	80005f8 <__aeabi_dmul>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	e9c7 2308 	strd	r2, r3, [r7, #32]
        b = m + jA;
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	4413      	add	r3, r2
 8005bb0:	61fb      	str	r3, [r7, #28]
        for (ijA = jA; ijA < b; ijA++) {
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb6:	e031      	b.n	8005c1c <xgerc_kAS2vIrq+0xe0>
          A[ijA - 1] += A[((ix0 + ijA) - jA) - 1] * temp;
 8005bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bc4:	4413      	add	r3, r2
 8005bc6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bce:	441a      	add	r2, r3
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bde:	4413      	add	r3, r2
 8005be0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005be4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005be8:	f7fa fd06 	bl	80005f8 <__aeabi_dmul>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c00:	18d6      	adds	r6, r2, r3
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4620      	mov	r0, r4
 8005c08:	4629      	mov	r1, r5
 8005c0a:	f7fa fb3f 	bl	800028c <__adddf3>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	e9c6 2300 	strd	r2, r3, [r6]
        for (ijA = jA; ijA < b; ijA++) {
 8005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c18:	3301      	adds	r3, #1
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	dbc9      	blt.n	8005bb8 <xgerc_kAS2vIrq+0x7c>
      jA += 6;
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	3306      	adds	r3, #6
 8005c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (j = 0; j < n; j++) {
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	db9b      	blt.n	8005b70 <xgerc_kAS2vIrq+0x34>
}
 8005c38:	bf00      	nop
 8005c3a:	373c      	adds	r7, #60	; 0x3c
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c40 <xnrm2_Talqnny2>:
#include "xnrm2_Talqnny2.h"
#include <math.h>

/* Function for MATLAB Function: '<S7>/Correct' */
real_T xnrm2_Talqnny2(int32_T n, const real_T x[3], int32_T ix0)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b092      	sub	sp, #72	; 0x48
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f340 8090 	ble.w	8005d80 <xnrm2_Talqnny2+0x140>
    if (n == 1) {
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10e      	bne.n	8005c84 <xnrm2_Talqnny2+0x44>
      y = fabs(x[ix0 - 1]);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	4413      	add	r3, r2
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	4611      	mov	r1, r2
 8005c7a:	6439      	str	r1, [r7, #64]	; 0x40
 8005c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c80:	647b      	str	r3, [r7, #68]	; 0x44
 8005c82:	e07d      	b.n	8005d80 <xnrm2_Talqnny2+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005c8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	3b01      	subs	r3, #1
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c9e:	e05d      	b.n	8005d5c <xnrm2_Talqnny2+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8005ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	4413      	add	r3, r2
 8005cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	6239      	str	r1, [r7, #32]
 8005cb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8005cbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005cc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005cc4:	f7fa ff28 	bl	8000b18 <__aeabi_dcmpgt>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d029      	beq.n	8005d22 <xnrm2_Talqnny2+0xe2>
          real_T t;
          t = scale / absxk;
 8005cce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cd2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005cd6:	f7fa fdb9 	bl	800084c <__aeabi_ddiv>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8005ce2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ce6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005cea:	f7fa fc85 	bl	80005f8 <__aeabi_dmul>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005cfa:	f7fa fc7d 	bl	80005f8 <__aeabi_dmul>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4610      	mov	r0, r2
 8005d04:	4619      	mov	r1, r3
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	4b23      	ldr	r3, [pc, #140]	; (8005d98 <xnrm2_Talqnny2+0x158>)
 8005d0c:	f7fa fabe 	bl	800028c <__adddf3>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8005d18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005d20:	e019      	b.n	8005d56 <xnrm2_Talqnny2+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8005d22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d2a:	f7fa fd8f 	bl	800084c <__aeabi_ddiv>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8005d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005d3e:	f7fa fc5b 	bl	80005f8 <__aeabi_dmul>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005d4a:	f7fa fa9f 	bl	800028c <__adddf3>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8005d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d58:	3301      	adds	r3, #1
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	429a      	cmp	r2, r3
 8005d62:	dd9d      	ble.n	8005ca0 <xnrm2_Talqnny2+0x60>
        }
      }

      y = scale * sqrt(y);
 8005d64:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8005d68:	f00b f960 	bl	801102c <sqrt>
 8005d6c:	ec53 2b10 	vmov	r2, r3, d0
 8005d70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005d74:	f7fa fc40 	bl	80005f8 <__aeabi_dmul>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8005d80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d84:	ec43 2b17 	vmov	d7, r2, r3
}
 8005d88:	eeb0 0a47 	vmov.f32	s0, s14
 8005d8c:	eef0 0a67 	vmov.f32	s1, s15
 8005d90:	3748      	adds	r7, #72	; 0x48
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	3ff00000 	.word	0x3ff00000

08005d9c <xnrm2_VmvcPHhE>:
#include "xnrm2_VmvcPHhE.h"
#include <math.h>

/* Function for MATLAB Function: '<S8>/Predict' */
real_T xnrm2_VmvcPHhE(int32_T n, const real_T x[18], int32_T ix0)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b092      	sub	sp, #72	; 0x48
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f340 8090 	ble.w	8005edc <xnrm2_VmvcPHhE+0x140>
    if (n == 1) {
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d10e      	bne.n	8005de0 <xnrm2_VmvcPHhE+0x44>
      y = fabs(x[ix0 - 1]);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	4413      	add	r3, r2
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	6439      	str	r1, [r7, #64]	; 0x40
 8005dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dde:	e07d      	b.n	8005edc <xnrm2_VmvcPHhE+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005de8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	3b01      	subs	r3, #1
 8005df4:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dfa:	e05d      	b.n	8005eb8 <xnrm2_VmvcPHhE+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8005dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005e02:	3b01      	subs	r3, #1
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	4413      	add	r3, r2
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	4611      	mov	r1, r2
 8005e10:	6239      	str	r1, [r7, #32]
 8005e12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8005e18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005e20:	f7fa fe7a 	bl	8000b18 <__aeabi_dcmpgt>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d029      	beq.n	8005e7e <xnrm2_VmvcPHhE+0xe2>
          real_T t;
          t = scale / absxk;
 8005e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e2e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005e32:	f7fa fd0b 	bl	800084c <__aeabi_ddiv>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8005e3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e42:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005e46:	f7fa fbd7 	bl	80005f8 <__aeabi_dmul>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4610      	mov	r0, r2
 8005e50:	4619      	mov	r1, r3
 8005e52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e56:	f7fa fbcf 	bl	80005f8 <__aeabi_dmul>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4610      	mov	r0, r2
 8005e60:	4619      	mov	r1, r3
 8005e62:	f04f 0200 	mov.w	r2, #0
 8005e66:	4b23      	ldr	r3, [pc, #140]	; (8005ef4 <xnrm2_VmvcPHhE+0x158>)
 8005e68:	f7fa fa10 	bl	800028c <__adddf3>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8005e74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e78:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005e7c:	e019      	b.n	8005eb2 <xnrm2_VmvcPHhE+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8005e7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005e86:	f7fa fce1 	bl	800084c <__aeabi_ddiv>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8005e92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005e9a:	f7fa fbad 	bl	80005f8 <__aeabi_dmul>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005ea6:	f7fa f9f1 	bl	800028c <__adddf3>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8005eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	dd9d      	ble.n	8005dfc <xnrm2_VmvcPHhE+0x60>
        }
      }

      y = scale * sqrt(y);
 8005ec0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8005ec4:	f00b f8b2 	bl	801102c <sqrt>
 8005ec8:	ec53 2b10 	vmov	r2, r3, d0
 8005ecc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005ed0:	f7fa fb92 	bl	80005f8 <__aeabi_dmul>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8005edc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ee0:	ec43 2b17 	vmov	d7, r2, r3
}
 8005ee4:	eeb0 0a47 	vmov.f32	s0, s14
 8005ee8:	eef0 0a67 	vmov.f32	s1, s15
 8005eec:	3748      	adds	r7, #72	; 0x48
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	3ff00000 	.word	0x3ff00000

08005ef8 <xnrm2_qRRhL8tE>:
#include "xnrm2_qRRhL8tE.h"
#include <math.h>

/* Function for MATLAB Function: '<S7>/Correct' */
real_T xnrm2_qRRhL8tE(int32_T n, const real_T x[6], int32_T ix0)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b092      	sub	sp, #72	; 0x48
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f340 8090 	ble.w	8006038 <xnrm2_qRRhL8tE+0x140>
    if (n == 1) {
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d10e      	bne.n	8005f3c <xnrm2_qRRhL8tE+0x44>
      y = fabs(x[ix0 - 1]);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005f24:	3b01      	subs	r3, #1
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	4611      	mov	r1, r2
 8005f32:	6439      	str	r1, [r7, #64]	; 0x40
 8005f34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f38:	647b      	str	r3, [r7, #68]	; 0x44
 8005f3a:	e07d      	b.n	8006038 <xnrm2_qRRhL8tE+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8005f44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f56:	e05d      	b.n	8006014 <xnrm2_qRRhL8tE+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8005f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	4413      	add	r3, r2
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	6239      	str	r1, [r7, #32]
 8005f6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8005f74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005f7c:	f7fa fdcc 	bl	8000b18 <__aeabi_dcmpgt>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d029      	beq.n	8005fda <xnrm2_qRRhL8tE+0xe2>
          real_T t;
          t = scale / absxk;
 8005f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005f8e:	f7fa fc5d 	bl	800084c <__aeabi_ddiv>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8005f9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f9e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005fa2:	f7fa fb29 	bl	80005f8 <__aeabi_dmul>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4610      	mov	r0, r2
 8005fac:	4619      	mov	r1, r3
 8005fae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fb2:	f7fa fb21 	bl	80005f8 <__aeabi_dmul>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4610      	mov	r0, r2
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	f04f 0200 	mov.w	r2, #0
 8005fc2:	4b23      	ldr	r3, [pc, #140]	; (8006050 <xnrm2_qRRhL8tE+0x158>)
 8005fc4:	f7fa f962 	bl	800028c <__adddf3>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8005fd0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005fd8:	e019      	b.n	800600e <xnrm2_qRRhL8tE+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8005fda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005fde:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005fe2:	f7fa fc33 	bl	800084c <__aeabi_ddiv>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8005fee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ff2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005ff6:	f7fa faff 	bl	80005f8 <__aeabi_dmul>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006002:	f7fa f943 	bl	800028c <__adddf3>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800600e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006010:	3301      	adds	r3, #1
 8006012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	429a      	cmp	r2, r3
 800601a:	dd9d      	ble.n	8005f58 <xnrm2_qRRhL8tE+0x60>
        }
      }

      y = scale * sqrt(y);
 800601c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8006020:	f00b f804 	bl	801102c <sqrt>
 8006024:	ec53 2b10 	vmov	r2, r3, d0
 8006028:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800602c:	f7fa fae4 	bl	80005f8 <__aeabi_dmul>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8006038:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800603c:	ec43 2b17 	vmov	d7, r2, r3
}
 8006040:	eeb0 0a47 	vmov.f32	s0, s14
 8006044:	eef0 0a67 	vmov.f32	s1, s15
 8006048:	3748      	adds	r7, #72	; 0x48
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	3ff00000 	.word	0x3ff00000

08006054 <xnrm2_zhvkBxcX>:
#include "xnrm2_zhvkBxcX.h"
#include <math.h>

/* Function for MATLAB Function: '<S7>/Correct' */
real_T xnrm2_zhvkBxcX(int32_T n, const real_T x[9], int32_T ix0)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b092      	sub	sp, #72	; 0x48
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f340 8090 	ble.w	8006194 <xnrm2_zhvkBxcX+0x140>
    if (n == 1) {
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d10e      	bne.n	8006098 <xnrm2_zhvkBxcX+0x44>
      y = fabs(x[ix0 - 1]);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006080:	3b01      	subs	r3, #1
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	4413      	add	r3, r2
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	4611      	mov	r1, r2
 800608e:	6439      	str	r1, [r7, #64]	; 0x40
 8006090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006094:	647b      	str	r3, [r7, #68]	; 0x44
 8006096:	e07d      	b.n	8006194 <xnrm2_zhvkBxcX+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80060a0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	3b01      	subs	r3, #1
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b2:	e05d      	b.n	8006170 <xnrm2_zhvkBxcX+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 80060b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80060ba:	3b01      	subs	r3, #1
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4413      	add	r3, r2
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	4611      	mov	r1, r2
 80060c8:	6239      	str	r1, [r7, #32]
 80060ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 80060d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80060d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80060d8:	f7fa fd1e 	bl	8000b18 <__aeabi_dcmpgt>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d029      	beq.n	8006136 <xnrm2_zhvkBxcX+0xe2>
          real_T t;
          t = scale / absxk;
 80060e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80060ea:	f7fa fbaf 	bl	800084c <__aeabi_ddiv>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 80060f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80060fe:	f7fa fa7b 	bl	80005f8 <__aeabi_dmul>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800610e:	f7fa fa73 	bl	80005f8 <__aeabi_dmul>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4610      	mov	r0, r2
 8006118:	4619      	mov	r1, r3
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	4b23      	ldr	r3, [pc, #140]	; (80061ac <xnrm2_zhvkBxcX+0x158>)
 8006120:	f7fa f8b4 	bl	800028c <__adddf3>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 800612c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006130:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006134:	e019      	b.n	800616a <xnrm2_zhvkBxcX+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8006136:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800613a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800613e:	f7fa fb85 	bl	800084c <__aeabi_ddiv>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 800614a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800614e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006152:	f7fa fa51 	bl	80005f8 <__aeabi_dmul>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800615e:	f7fa f895 	bl	800028c <__adddf3>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 800616a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616c:	3301      	adds	r3, #1
 800616e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006174:	429a      	cmp	r2, r3
 8006176:	dd9d      	ble.n	80060b4 <xnrm2_zhvkBxcX+0x60>
        }
      }

      y = scale * sqrt(y);
 8006178:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800617c:	f00a ff56 	bl	801102c <sqrt>
 8006180:	ec53 2b10 	vmov	r2, r3, d0
 8006184:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006188:	f7fa fa36 	bl	80005f8 <__aeabi_dmul>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8006194:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006198:	ec43 2b17 	vmov	d7, r2, r3
}
 800619c:	eeb0 0a47 	vmov.f32	s0, s14
 80061a0:	eef0 0a67 	vmov.f32	s1, s15
 80061a4:	3748      	adds	r7, #72	; 0x48
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	3ff00000 	.word	0x3ff00000

080061b0 <xnrm2_zmdkvCDw>:
#include "xnrm2_zmdkvCDw.h"
#include <math.h>

/* Function for MATLAB Function: '<S7>/Correct' */
real_T xnrm2_zmdkvCDw(int32_T n, const real_T x[2], int32_T ix0)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b092      	sub	sp, #72	; 0x48
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f340 8090 	ble.w	80062f0 <xnrm2_zmdkvCDw+0x140>
    if (n == 1) {
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d10e      	bne.n	80061f4 <xnrm2_zmdkvCDw+0x44>
      y = fabs(x[ix0 - 1]);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80061dc:	3b01      	subs	r3, #1
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	4413      	add	r3, r2
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	4611      	mov	r1, r2
 80061ea:	6439      	str	r1, [r7, #64]	; 0x40
 80061ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061f0:	647b      	str	r3, [r7, #68]	; 0x44
 80061f2:	e07d      	b.n	80062f0 <xnrm2_zmdkvCDw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80061fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	3b01      	subs	r3, #1
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800620e:	e05d      	b.n	80062cc <xnrm2_zmdkvCDw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006216:	3b01      	subs	r3, #1
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	4413      	add	r3, r2
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	4611      	mov	r1, r2
 8006224:	6239      	str	r1, [r7, #32]
 8006226:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 800622c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006230:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006234:	f7fa fc70 	bl	8000b18 <__aeabi_dcmpgt>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d029      	beq.n	8006292 <xnrm2_zmdkvCDw+0xe2>
          real_T t;
          t = scale / absxk;
 800623e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006242:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006246:	f7fa fb01 	bl	800084c <__aeabi_ddiv>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8006252:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006256:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800625a:	f7fa f9cd 	bl	80005f8 <__aeabi_dmul>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4610      	mov	r0, r2
 8006264:	4619      	mov	r1, r3
 8006266:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800626a:	f7fa f9c5 	bl	80005f8 <__aeabi_dmul>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	4610      	mov	r0, r2
 8006274:	4619      	mov	r1, r3
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	4b23      	ldr	r3, [pc, #140]	; (8006308 <xnrm2_zmdkvCDw+0x158>)
 800627c:	f7fa f806 	bl	800028c <__adddf3>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8006288:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800628c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006290:	e019      	b.n	80062c6 <xnrm2_zmdkvCDw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8006292:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006296:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800629a:	f7fa fad7 	bl	800084c <__aeabi_ddiv>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 80062a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80062ae:	f7fa f9a3 	bl	80005f8 <__aeabi_dmul>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80062ba:	f7f9 ffe7 	bl	800028c <__adddf3>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 80062c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c8:	3301      	adds	r3, #1
 80062ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	429a      	cmp	r2, r3
 80062d2:	dd9d      	ble.n	8006210 <xnrm2_zmdkvCDw+0x60>
        }
      }

      y = scale * sqrt(y);
 80062d4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80062d8:	f00a fea8 	bl	801102c <sqrt>
 80062dc:	ec53 2b10 	vmov	r2, r3, d0
 80062e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80062e4:	f7fa f988 	bl	80005f8 <__aeabi_dmul>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 80062f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80062f8:	eeb0 0a47 	vmov.f32	s0, s14
 80062fc:	eef0 0a67 	vmov.f32	s1, s15
 8006300:	3748      	adds	r7, #72	; 0x48
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	3ff00000 	.word	0x3ff00000

0800630c <xrot_miKOw6Cs>:
#include "rtwtypes.h"
#include "xrot_miKOw6Cs.h"

/* Function for MATLAB Function: '<S7>/Correct' */
void xrot_miKOw6Cs(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 800630c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006310:	b08c      	sub	sp, #48	; 0x30
 8006312:	af00      	add	r7, sp, #0
 8006314:	61f8      	str	r0, [r7, #28]
 8006316:	61b9      	str	r1, [r7, #24]
 8006318:	617a      	str	r2, [r7, #20]
 800631a:	ed87 0b02 	vstr	d0, [r7, #8]
 800631e:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006328:	3b01      	subs	r3, #1
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	4413      	add	r3, r2
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800633e:	3b01      	subs	r3, #1
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 800634e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006352:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006356:	f7fa f94f 	bl	80005f8 <__aeabi_dmul>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4690      	mov	r8, r2
 8006360:	4699      	mov	r9, r3
 8006362:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006366:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800636a:	f7fa f945 	bl	80005f8 <__aeabi_dmul>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4610      	mov	r0, r2
 8006374:	4619      	mov	r1, r3
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800637c:	3b01      	subs	r3, #1
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	18d4      	adds	r4, r2, r3
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4640      	mov	r0, r8
 800638a:	4649      	mov	r1, r9
 800638c:	f7f9 ff7c 	bl	8000288 <__aeabi_dsub>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 8006398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800639c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80063a0:	f7fa f92a 	bl	80005f8 <__aeabi_dmul>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4690      	mov	r8, r2
 80063aa:	4699      	mov	r9, r3
 80063ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80063b4:	f7fa f920 	bl	80005f8 <__aeabi_dmul>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4610      	mov	r0, r2
 80063be:	4619      	mov	r1, r3
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80063c6:	3b01      	subs	r3, #1
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	18d4      	adds	r4, r2, r3
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4640      	mov	r0, r8
 80063d4:	4649      	mov	r1, r9
 80063d6:	f7f9 ff59 	bl	800028c <__adddf3>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	4413      	add	r3, r2
 80063ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063f2:	f7fa f901 	bl	80005f8 <__aeabi_dmul>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4614      	mov	r4, r2
 80063fc:	461d      	mov	r5, r3
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800640a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800640e:	f7fa f8f3 	bl	80005f8 <__aeabi_dmul>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4620      	mov	r0, r4
 8006418:	4629      	mov	r1, r5
 800641a:	f7f9 ff37 	bl	800028c <__adddf3>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	69fa      	ldr	r2, [r7, #28]
 800642c:	4413      	add	r3, r2
 800642e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006432:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006436:	f7fa f8df 	bl	80005f8 <__aeabi_dmul>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	4690      	mov	r8, r2
 8006440:	4699      	mov	r9, r3
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	00db      	lsls	r3, r3, #3
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800644e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006452:	f7fa f8d1 	bl	80005f8 <__aeabi_dmul>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4610      	mov	r0, r2
 800645c:	4619      	mov	r1, r3
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	18d4      	adds	r4, r2, r3
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	4640      	mov	r0, r8
 800646c:	4649      	mov	r1, r9
 800646e:	f7f9 ff0b 	bl	8000288 <__aeabi_dsub>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	18d1      	adds	r1, r2, r3
 8006482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006486:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	3301      	adds	r3, #1
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	4413      	add	r3, r2
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	3301      	adds	r3, #1
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	69fa      	ldr	r2, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 80064ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80064b6:	f7fa f89f 	bl	80005f8 <__aeabi_dmul>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4690      	mov	r8, r2
 80064c0:	4699      	mov	r9, r3
 80064c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80064ca:	f7fa f895 	bl	80005f8 <__aeabi_dmul>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4610      	mov	r0, r2
 80064d4:	4619      	mov	r1, r3
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	3301      	adds	r3, #1
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	18d4      	adds	r4, r2, r3
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4640      	mov	r0, r8
 80064e6:	4649      	mov	r1, r9
 80064e8:	f7f9 fece 	bl	8000288 <__aeabi_dsub>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 80064f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80064fc:	f7fa f87c 	bl	80005f8 <__aeabi_dmul>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4690      	mov	r8, r2
 8006506:	4699      	mov	r9, r3
 8006508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800650c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006510:	f7fa f872 	bl	80005f8 <__aeabi_dmul>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4610      	mov	r0, r2
 800651a:	4619      	mov	r1, r3
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	3301      	adds	r3, #1
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	18d4      	adds	r4, r2, r3
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4640      	mov	r0, r8
 800652c:	4649      	mov	r1, r9
 800652e:	f7f9 fead 	bl	800028c <__adddf3>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	e9c4 2300 	strd	r2, r3, [r4]
}
 800653a:	bf00      	nop
 800653c:	3730      	adds	r7, #48	; 0x30
 800653e:	46bd      	mov	sp, r7
 8006540:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006544 <xrotg_B2eK2SzN>:
#include "xrotg_B2eK2SzN.h"
#include <math.h>

/* Function for MATLAB Function: '<S7>/Correct' */
void xrotg_B2eK2SzN(real_T *a, real_T *b, real_T *c, real_T *s)
{
 8006544:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006548:	b090      	sub	sp, #64	; 0x40
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	607a      	str	r2, [r7, #4]
 8006552:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	4611      	mov	r1, r2
 8006566:	62b9      	str	r1, [r7, #40]	; 0x28
 8006568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	4611      	mov	r1, r2
 8006576:	6239      	str	r1, [r7, #32]
 8006578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 800657e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006582:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006586:	f7fa fac7 	bl	8000b18 <__aeabi_dcmpgt>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <xrotg_B2eK2SzN+0x56>
    roe = *a;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 800659a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800659e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80065a2:	f7f9 fe73 	bl	800028c <__adddf3>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80065ba:	f7fa fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01b      	beq.n	80065fc <xrotg_B2eK2SzN+0xb8>
    *s = 0.0;
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	4b59      	ldr	r3, [pc, #356]	; (8006740 <xrotg_B2eK2SzN+0x1fc>)
 80065da:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 80065de:	68f9      	ldr	r1, [r7, #12]
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 80065ec:	68b9      	ldr	r1, [r7, #8]
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 80065fa:	e09b      	b.n	8006734 <xrotg_B2eK2SzN+0x1f0>
    ads = absa / scale;
 80065fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006600:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006604:	f7fa f922 	bl	800084c <__aeabi_ddiv>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 8006610:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006614:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006618:	f7fa f918 	bl	800084c <__aeabi_ddiv>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 8006624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006628:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800662c:	f7f9 ffe4 	bl	80005f8 <__aeabi_dmul>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4690      	mov	r8, r2
 8006636:	4699      	mov	r9, r3
 8006638:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800663c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006640:	f7f9 ffda 	bl	80005f8 <__aeabi_dmul>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4640      	mov	r0, r8
 800664a:	4649      	mov	r1, r9
 800664c:	f7f9 fe1e 	bl	800028c <__adddf3>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	ec43 2b17 	vmov	d7, r2, r3
 8006658:	eeb0 0a47 	vmov.f32	s0, s14
 800665c:	eef0 0a67 	vmov.f32	s1, s15
 8006660:	f00a fce4 	bl	801102c <sqrt>
 8006664:	ec53 2b10 	vmov	r2, r3, d0
 8006668:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800666c:	f7f9 ffc4 	bl	80005f8 <__aeabi_dmul>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006684:	f7fa fa2a 	bl	8000adc <__aeabi_dcmplt>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <xrotg_B2eK2SzN+0x156>
      scale = -scale;
 800668e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8006690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006692:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006696:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    *c = *a / scale;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80066a4:	f7fa f8d2 	bl	800084c <__aeabi_ddiv>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80066bc:	f7fa f8c6 	bl	800084c <__aeabi_ddiv>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 80066ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80066d2:	f7fa fa21 	bl	8000b18 <__aeabi_dcmpgt>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d006      	beq.n	80066ea <xrotg_B2eK2SzN+0x1a6>
      *b = *s;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	e9c1 2300 	strd	r2, r3, [r1]
 80066e8:	e01f      	b.n	800672a <xrotg_B2eK2SzN+0x1e6>
    } else if (*c != 0.0) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066f0:	f04f 0200 	mov.w	r2, #0
 80066f4:	f04f 0300 	mov.w	r3, #0
 80066f8:	f7fa f9e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10d      	bne.n	800671e <xrotg_B2eK2SzN+0x1da>
      *b = 1.0 / *c;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f04f 0000 	mov.w	r0, #0
 800670c:	490c      	ldr	r1, [pc, #48]	; (8006740 <xrotg_B2eK2SzN+0x1fc>)
 800670e:	f7fa f89d 	bl	800084c <__aeabi_ddiv>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	e9c1 2300 	strd	r2, r3, [r1]
 800671c:	e005      	b.n	800672a <xrotg_B2eK2SzN+0x1e6>
      *b = 1.0;
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <xrotg_B2eK2SzN+0x1fc>)
 8006726:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006730:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006734:	bf00      	nop
 8006736:	3740      	adds	r7, #64	; 0x40
 8006738:	46bd      	mov	sp, r7
 800673a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800673e:	bf00      	nop
 8006740:	3ff00000 	.word	0x3ff00000

08006744 <xswap_U9h3dV3C>:
#include "rtwtypes.h"
#include "xswap_U9h3dV3C.h"

/* Function for MATLAB Function: '<S7>/Correct' */
void xswap_U9h3dV3C(real_T x[9], int32_T ix0, int32_T iy0)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006756:	3b01      	subs	r3, #1
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4413      	add	r3, r2
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800676c:	3b01      	subs	r3, #1
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	441a      	add	r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800677a:	3b01      	subs	r3, #1
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	4419      	add	r1, r3
 8006782:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006786:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006790:	3b01      	subs	r3, #1
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	18d1      	adds	r1, r2, r3
 8006798:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800679c:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	00d2      	lsls	r2, r2, #3
 80067bc:	68f9      	ldr	r1, [r7, #12]
 80067be:	4411      	add	r1, r2
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	18d1      	adds	r1, r2, r3
 80067d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067d4:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	3301      	adds	r3, #1
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3301      	adds	r3, #1
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	3201      	adds	r2, #1
 80067f8:	00d2      	lsls	r2, r2, #3
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	4411      	add	r1, r2
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3301      	adds	r3, #1
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	18d1      	adds	r1, r2, r3
 8006810:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006814:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006818:	bf00      	nop
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <batteryMeasurementFcn>:
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy);

/* Output and update for Simulink Function: '<S2>/Simulink Function - Measurement Function' */
real_T batteryMeasurementFcn(const real_T rtu_x[3])
{
 8006824:	b5b0      	push	{r4, r5, r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  real_T rtb_Product;

  /* Saturate: '<S3>/Saturation' incorporates:
   *  SignalConversion generated from: '<S3>/x'
   */
  if (rtu_x[0] > 1.0) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	4b30      	ldr	r3, [pc, #192]	; (80068f8 <batteryMeasurementFcn+0xd4>)
 8006838:	f7fa f96e 	bl	8000b18 <__aeabi_dcmpgt>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <batteryMeasurementFcn+0x2a>
    rtb_Product = 1.0;
 8006842:	f04f 0200 	mov.w	r2, #0
 8006846:	4b2c      	ldr	r3, [pc, #176]	; (80068f8 <batteryMeasurementFcn+0xd4>)
 8006848:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800684c:	e017      	b.n	800687e <batteryMeasurementFcn+0x5a>
  } else if (rtu_x[0] < 0.0) {
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	f7fa f93e 	bl	8000adc <__aeabi_dcmplt>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d006      	beq.n	8006874 <batteryMeasurementFcn+0x50>
    rtb_Product = 0.0;
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	f04f 0300 	mov.w	r3, #0
 800686e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8006872:	e004      	b.n	800687e <batteryMeasurementFcn+0x5a>
  } else {
    rtb_Product = rtu_x[0];
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	e9c7 2302 	strd	r2, r3, [r7, #8]
   *  Lookup_n-D: '<S3>/R0 Table'
   *  Product: '<S3>/Product'
   *  SignalConversion generated from: '<S3>/x'
   *  Sum: '<S3>/Add1'
   */
  return ((look1_binlx(rtb_Product, rtCP_EmTable_bp01Data,
 800687e:	2207      	movs	r2, #7
 8006880:	491e      	ldr	r1, [pc, #120]	; (80068fc <batteryMeasurementFcn+0xd8>)
 8006882:	481f      	ldr	r0, [pc, #124]	; (8006900 <batteryMeasurementFcn+0xdc>)
 8006884:	ed97 0b02 	vldr	d0, [r7, #8]
 8006888:	f7fb f860 	bl	800194c <look1_binlx>
 800688c:	ec55 4b10 	vmov	r4, r5, d0
                       rtCP_EmTable_tableData, 7U) - look1_binlx(rtb_Product,
 8006890:	2207      	movs	r2, #7
 8006892:	491c      	ldr	r1, [pc, #112]	; (8006904 <batteryMeasurementFcn+0xe0>)
 8006894:	481a      	ldr	r0, [pc, #104]	; (8006900 <batteryMeasurementFcn+0xdc>)
 8006896:	ed97 0b02 	vldr	d0, [r7, #8]
 800689a:	f7fb f857 	bl	800194c <look1_binlx>
 800689e:	ec51 0b10 	vmov	r0, r1, d0
            rtCP_R0Table_bp01Data, rtCP_R0Table_tableData, 7U) * rtU.current) -
 80068a2:	4b19      	ldr	r3, [pc, #100]	; (8006908 <batteryMeasurementFcn+0xe4>)
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f7f9 fea6 	bl	80005f8 <__aeabi_dmul>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
                       rtCP_EmTable_tableData, 7U) - look1_binlx(rtb_Product,
 80068b0:	4620      	mov	r0, r4
 80068b2:	4629      	mov	r1, r5
 80068b4:	f7f9 fce8 	bl	8000288 <__aeabi_dsub>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4610      	mov	r0, r2
 80068be:	4619      	mov	r1, r3
          rtu_x[1]) - rtu_x[2];
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3308      	adds	r3, #8
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
            rtCP_R0Table_bp01Data, rtCP_R0Table_tableData, 7U) * rtU.current) -
 80068c8:	f7f9 fcde 	bl	8000288 <__aeabi_dsub>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4610      	mov	r0, r2
 80068d2:	4619      	mov	r1, r3
          rtu_x[1]) - rtu_x[2];
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3310      	adds	r3, #16
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f7f9 fcd4 	bl	8000288 <__aeabi_dsub>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80068e8:	eeb0 0a47 	vmov.f32	s0, s14
 80068ec:	eef0 0a67 	vmov.f32	s1, s15
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bdb0      	pop	{r4, r5, r7, pc}
 80068f6:	bf00      	nop
 80068f8:	3ff00000 	.word	0x3ff00000
 80068fc:	080112a8 	.word	0x080112a8
 8006900:	080112e8 	.word	0x080112e8
 8006904:	080113e8 	.word	0x080113e8
 8006908:	20000290 	.word	0x20000290
 800690c:	00000000 	.word	0x00000000

08006910 <batteryStateFcn>:

/* Output and update for Simulink Function: '<S2>/Simulink Function - State Transition Function' */
void batteryStateFcn(const real_T rtu_x[3], real_T rty_xNext[3])
{
 8006910:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006914:	b088      	sub	sp, #32
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	6039      	str	r1, [r7, #0]
  real_T rtb_tau2;

  /* Saturate: '<S4>/Saturation' incorporates:
   *  SignalConversion generated from: '<S4>/x'
   */
  if (rtu_x[0] > 1.0) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	4b8e      	ldr	r3, [pc, #568]	; (8006b60 <batteryStateFcn+0x250>)
 8006928:	f7fa f8f6 	bl	8000b18 <__aeabi_dcmpgt>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <batteryStateFcn+0x2e>
    rtb_Saturation = 1.0;
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	4b8a      	ldr	r3, [pc, #552]	; (8006b60 <batteryStateFcn+0x250>)
 8006938:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800693c:	e017      	b.n	800696e <batteryStateFcn+0x5e>
  } else if (rtu_x[0] < 0.0) {
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	f7fa f8c6 	bl	8000adc <__aeabi_dcmplt>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d006      	beq.n	8006964 <batteryStateFcn+0x54>
    rtb_Saturation = 0.0;
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	f04f 0300 	mov.w	r3, #0
 800695e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8006962:	e004      	b.n	800696e <batteryStateFcn+0x5e>
  } else {
    rtb_Saturation = rtu_x[0];
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  /* End of Saturate: '<S4>/Saturation' */

  /* Lookup_n-D: '<S4>/tau1' incorporates:
   *  Saturate: '<S4>/Saturation'
   */
  rtb_tau1 = look1_binlx(rtb_Saturation, rtCP_tau1_bp01Data, rtCP_tau1_tableData,
 800696e:	2207      	movs	r2, #7
 8006970:	497c      	ldr	r1, [pc, #496]	; (8006b64 <batteryStateFcn+0x254>)
 8006972:	487d      	ldr	r0, [pc, #500]	; (8006b68 <batteryStateFcn+0x258>)
 8006974:	ed97 0b06 	vldr	d0, [r7, #24]
 8006978:	f7fa ffe8 	bl	800194c <look1_binlx>
 800697c:	ed87 0b04 	vstr	d0, [r7, #16]
    7U);

  /* Lookup_n-D: '<S4>/tau2' incorporates:
   *  Saturate: '<S4>/Saturation'
   */
  rtb_tau2 = look1_binlx(rtb_Saturation, rtCP_tau2_bp01Data, rtCP_tau2_tableData,
 8006980:	2207      	movs	r2, #7
 8006982:	497a      	ldr	r1, [pc, #488]	; (8006b6c <batteryStateFcn+0x25c>)
 8006984:	4878      	ldr	r0, [pc, #480]	; (8006b68 <batteryStateFcn+0x258>)
 8006986:	ed97 0b06 	vldr	d0, [r7, #24]
 800698a:	f7fa ffdf 	bl	800194c <look1_binlx>
 800698e:	ed87 0b02 	vstr	d0, [r7, #8]
   *  Lookup_n-D: '<S4>/R1'
   *  Lookup_n-D: '<S4>/R2'
   *  Saturate: '<S4>/Saturation'
   *  SignalConversion generated from: '<S4>/x'
   */
  rty_xNext[0] = -rtU.current / 18000.0;
 8006992:	4b77      	ldr	r3, [pc, #476]	; (8006b70 <batteryStateFcn+0x260>)
 8006994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006998:	4614      	mov	r4, r2
 800699a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800699e:	a36c      	add	r3, pc, #432	; (adr r3, 8006b50 <batteryStateFcn+0x240>)
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	4620      	mov	r0, r4
 80069a6:	4629      	mov	r1, r5
 80069a8:	f7f9 ff50 	bl	800084c <__aeabi_ddiv>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	e9c1 2300 	strd	r2, r3, [r1]
  rty_xNext[1] = -1.0 / rtb_tau1 * rtu_x[1] + rtU.current / (rtb_tau1 /
 80069b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80069ba:	f04f 0000 	mov.w	r0, #0
 80069be:	496d      	ldr	r1, [pc, #436]	; (8006b74 <batteryStateFcn+0x264>)
 80069c0:	f7f9 ff44 	bl	800084c <__aeabi_ddiv>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4610      	mov	r0, r2
 80069ca:	4619      	mov	r1, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3308      	adds	r3, #8
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f7f9 fe10 	bl	80005f8 <__aeabi_dmul>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4690      	mov	r8, r2
 80069de:	4699      	mov	r9, r3
 80069e0:	4b63      	ldr	r3, [pc, #396]	; (8006b70 <batteryStateFcn+0x260>)
 80069e2:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlx(rtb_Saturation, rtCP_R1_bp01Data, rtCP_R1_tableData, 7U));
 80069e6:	2207      	movs	r2, #7
 80069e8:	4963      	ldr	r1, [pc, #396]	; (8006b78 <batteryStateFcn+0x268>)
 80069ea:	485f      	ldr	r0, [pc, #380]	; (8006b68 <batteryStateFcn+0x258>)
 80069ec:	ed97 0b06 	vldr	d0, [r7, #24]
 80069f0:	f7fa ffac 	bl	800194c <look1_binlx>
 80069f4:	ec53 2b10 	vmov	r2, r3, d0
  rty_xNext[1] = -1.0 / rtb_tau1 * rtu_x[1] + rtU.current / (rtb_tau1 /
 80069f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80069fc:	f7f9 ff26 	bl	800084c <__aeabi_ddiv>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4620      	mov	r0, r4
 8006a06:	4629      	mov	r1, r5
 8006a08:	f7f9 ff20 	bl	800084c <__aeabi_ddiv>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4610      	mov	r0, r2
 8006a12:	4619      	mov	r1, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	f103 0408 	add.w	r4, r3, #8
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4649      	mov	r1, r9
 8006a22:	f7f9 fc33 	bl	800028c <__adddf3>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	e9c4 2300 	strd	r2, r3, [r4]
  rty_xNext[2] = -1.0 / rtb_tau2 * rtu_x[2] + rtU.current / (rtb_tau2 /
 8006a2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	494f      	ldr	r1, [pc, #316]	; (8006b74 <batteryStateFcn+0x264>)
 8006a38:	f7f9 ff08 	bl	800084c <__aeabi_ddiv>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3310      	adds	r3, #16
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f7f9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4690      	mov	r8, r2
 8006a56:	4699      	mov	r9, r3
 8006a58:	4b45      	ldr	r3, [pc, #276]	; (8006b70 <batteryStateFcn+0x260>)
 8006a5a:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlx(rtb_Saturation, rtCP_R2_bp01Data, rtCP_R2_tableData, 7U));
 8006a5e:	2207      	movs	r2, #7
 8006a60:	4946      	ldr	r1, [pc, #280]	; (8006b7c <batteryStateFcn+0x26c>)
 8006a62:	4841      	ldr	r0, [pc, #260]	; (8006b68 <batteryStateFcn+0x258>)
 8006a64:	ed97 0b06 	vldr	d0, [r7, #24]
 8006a68:	f7fa ff70 	bl	800194c <look1_binlx>
 8006a6c:	ec53 2b10 	vmov	r2, r3, d0
  rty_xNext[2] = -1.0 / rtb_tau2 * rtu_x[2] + rtU.current / (rtb_tau2 /
 8006a70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a74:	f7f9 feea 	bl	800084c <__aeabi_ddiv>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	4629      	mov	r1, r5
 8006a80:	f7f9 fee4 	bl	800084c <__aeabi_ddiv>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	f103 0410 	add.w	r4, r3, #16
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4640      	mov	r0, r8
 8006a98:	4649      	mov	r1, r9
 8006a9a:	f7f9 fbf7 	bl	800028c <__adddf3>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	e9c4 2300 	strd	r2, r3, [r4]
   *  Constant: '<S4>/Constant'
   *  Product: '<S4>/Product'
   *  SignalConversion generated from: '<S4>/x'
   *  Sum: '<S4>/Add'
   */
  rty_xNext[0] = rty_xNext[0] * 0.1 + rtu_x[0];
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006aac:	a32a      	add	r3, pc, #168	; (adr r3, 8006b58 <batteryStateFcn+0x248>)
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f7f9 fda1 	bl	80005f8 <__aeabi_dmul>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4610      	mov	r0, r2
 8006abc:	4619      	mov	r1, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f7f9 fbe2 	bl	800028c <__adddf3>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	e9c1 2300 	strd	r2, r3, [r1]
  rty_xNext[1] = rty_xNext[1] * 0.1 + rtu_x[1];
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ada:	a31f      	add	r3, pc, #124	; (adr r3, 8006b58 <batteryStateFcn+0x248>)
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fd8a 	bl	80005f8 <__aeabi_dmul>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4690      	mov	r8, r2
 8006aea:	4699      	mov	r9, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3308      	adds	r3, #8
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	f101 0408 	add.w	r4, r1, #8
 8006afa:	4640      	mov	r0, r8
 8006afc:	4649      	mov	r1, r9
 8006afe:	f7f9 fbc5 	bl	800028c <__adddf3>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	e9c4 2300 	strd	r2, r3, [r4]
  rty_xNext[2] = rty_xNext[2] * 0.1 + rtu_x[2];
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	3310      	adds	r3, #16
 8006b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b12:	a311      	add	r3, pc, #68	; (adr r3, 8006b58 <batteryStateFcn+0x248>)
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f7f9 fd6e 	bl	80005f8 <__aeabi_dmul>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4690      	mov	r8, r2
 8006b22:	4699      	mov	r9, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3310      	adds	r3, #16
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	f101 0410 	add.w	r4, r1, #16
 8006b32:	4640      	mov	r0, r8
 8006b34:	4649      	mov	r1, r9
 8006b36:	f7f9 fba9 	bl	800028c <__adddf3>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	e9c4 2300 	strd	r2, r3, [r4]
}
 8006b42:	bf00      	nop
 8006b44:	3720      	adds	r7, #32
 8006b46:	46bd      	mov	sp, r7
 8006b48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b4c:	f3af 8000 	nop.w
 8006b50:	00000000 	.word	0x00000000
 8006b54:	40d19400 	.word	0x40d19400
 8006b58:	9999999a 	.word	0x9999999a
 8006b5c:	3fb99999 	.word	0x3fb99999
 8006b60:	3ff00000 	.word	0x3ff00000
 8006b64:	08011368 	.word	0x08011368
 8006b68:	080112e8 	.word	0x080112e8
 8006b6c:	08011220 	.word	0x08011220
 8006b70:	20000290 	.word	0x20000290
 8006b74:	bff00000 	.word	0xbff00000
 8006b78:	08011328 	.word	0x08011328
 8006b7c:	080113a8 	.word	0x080113a8

08006b80 <UKFCorrectorAdditive_getPredict>:

/* Function for MATLAB Function: '<S7>/Correct' */
static void UKFCorrectorAdditive_getPredict(real_T Rs, const real_T X1[3], const
  real_T S[9], real_T alpha, real_T beta, real_T kappa, real_T *Ymean, real_T
  Pxy[3], real_T *Sy)
{
 8006b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b84:	ed2d 8b02 	vpush	{d8}
 8006b88:	b0e3      	sub	sp, #396	; 0x18c
 8006b8a:	af04      	add	r7, sp, #16
 8006b8c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8006b90:	ed04 0b02 	vstr	d0, [r4, #-8]
 8006b94:	f507 74bc 	add.w	r4, r7, #376	; 0x178
 8006b98:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 8006b9c:	6020      	str	r0, [r4, #0]
 8006b9e:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 8006ba2:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 8006ba6:	6001      	str	r1, [r0, #0]
 8006ba8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006bac:	ed01 1b02 	vstr	d1, [r1, #-8]
 8006bb0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006bb4:	ed81 2b00 	vstr	d2, [r1]
 8006bb8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006bbc:	ed01 3b02 	vstr	d3, [r1, #-8]
 8006bc0:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8006bc4:	f5a1 71ae 	sub.w	r1, r1, #348	; 0x15c
 8006bc8:	600a      	str	r2, [r1, #0]
 8006bca:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8006bce:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8006bd2:	6013      	str	r3, [r2, #0]
  real_T Wmean[2];
  real_T Wmean_0;
  real_T beta1;
  int32_T X2_tmp;
  int32_T knt;
  beta1 = alpha * alpha;
 8006bd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006bd8:	4619      	mov	r1, r3
 8006bda:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 8006bde:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006be2:	f7f9 fd09 	bl	80005f8 <__aeabi_dmul>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  *Sy = (kappa + 3.0) * beta1;
 8006bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	4ba3      	ldr	r3, [pc, #652]	; (8006e88 <UKFCorrectorAdditive_getPredict+0x308>)
 8006bfa:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006bfe:	f7f9 fb45 	bl	800028c <__adddf3>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4610      	mov	r0, r2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8006c0e:	f7f9 fcf3 	bl	80005f8 <__aeabi_dmul>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8006c1a:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[0] = 1.0 - 3.0 / *Sy;
 8006c1e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f04f 0000 	mov.w	r0, #0
 8006c2a:	4997      	ldr	r1, [pc, #604]	; (8006e88 <UKFCorrectorAdditive_getPredict+0x308>)
 8006c2c:	f7f9 fe0e 	bl	800084c <__aeabi_ddiv>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	f04f 0000 	mov.w	r0, #0
 8006c38:	4994      	ldr	r1, [pc, #592]	; (8006e8c <UKFCorrectorAdditive_getPredict+0x30c>)
 8006c3a:	f7f9 fb25 	bl	8000288 <__aeabi_dsub>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8006c46:	f5a1 7194 	sub.w	r1, r1, #296	; 0x128
 8006c4a:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = 1.0 / (2.0 * *Sy);
 8006c4e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006c52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	f7f9 fb17 	bl	800028c <__adddf3>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	f04f 0000 	mov.w	r0, #0
 8006c66:	4989      	ldr	r1, [pc, #548]	; (8006e8c <UKFCorrectorAdditive_getPredict+0x30c>)
 8006c68:	f7f9 fdf0 	bl	800084c <__aeabi_ddiv>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8006c74:	f5a1 7194 	sub.w	r1, r1, #296	; 0x128
 8006c78:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Wcov[0] = ((1.0 - beta1) + beta) + Wmean[0];
 8006c7c:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8006c80:	f04f 0000 	mov.w	r0, #0
 8006c84:	4981      	ldr	r1, [pc, #516]	; (8006e8c <UKFCorrectorAdditive_getPredict+0x30c>)
 8006c86:	f7f9 faff 	bl	8000288 <__aeabi_dsub>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4619      	mov	r1, r3
 8006c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f7f9 faf7 	bl	800028c <__adddf3>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006caa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	f7f9 faeb 	bl	800028c <__adddf3>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8006cbe:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8006cc2:	e9c1 2300 	strd	r2, r3, [r1]
  Wcov[1] = Wmean[1];
 8006cc6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006cca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006cce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006cd2:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8006cd6:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8006cda:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (Wmean[0] != 0.0) {
 8006cde:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006ce2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	f7f9 fee9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d164      	bne.n	8006dc6 <UKFCorrectorAdditive_getPredict+0x246>
    real_T Wcov_0;
    beta1 = Wmean[0];
 8006cfc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006d00:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    Wmean_0 = Wmean[0];
 8006d0c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006d10:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006d1c:	e9c1 2300 	strd	r2, r3, [r1]
    Wmean[0] /= Wmean[0];
 8006d20:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006d24:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006d28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d2c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006d30:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f7f9 fd88 	bl	800084c <__aeabi_ddiv>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8006d44:	f5a1 7194 	sub.w	r1, r1, #296	; 0x128
 8006d48:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov[0] /= beta1;
 8006d4c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006d50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006d54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d58:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8006d5c:	f7f9 fd76 	bl	800084c <__aeabi_ddiv>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8006d68:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8006d6c:	e9c1 2300 	strd	r2, r3, [r1]
    Wcov_0 = Wmean[1];
 8006d70:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006d74:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006d78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006d7c:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    Wmean[1] /= Wmean_0;
 8006d80:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006d84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006d88:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006d8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f7f9 fd5a 	bl	800084c <__aeabi_ddiv>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8006da0:	f5a1 7194 	sub.w	r1, r1, #296	; 0x128
 8006da4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Wcov[1] = Wcov_0 / beta1;
 8006da8:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8006dac:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8006db0:	f7f9 fd4c 	bl	800084c <__aeabi_ddiv>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8006dbc:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8006dc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006dc4:	e004      	b.n	8006dd0 <UKFCorrectorAdditive_getPredict+0x250>
  } else {
    beta1 = 1.0;
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	4b30      	ldr	r3, [pc, #192]	; (8006e8c <UKFCorrectorAdditive_getPredict+0x30c>)
 8006dcc:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  }

  *Sy = sqrt(*Sy);
 8006dd0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006dd4:	ed93 7b00 	vldr	d7, [r3]
 8006dd8:	eeb0 0a47 	vmov.f32	s0, s14
 8006ddc:	eef0 0a67 	vmov.f32	s1, s15
 8006de0:	f00a f924 	bl	801102c <sqrt>
 8006de4:	eeb0 7a40 	vmov.f32	s14, s0
 8006de8:	eef0 7a60 	vmov.f32	s15, s1
 8006dec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006df0:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 9; knt++) {
 8006df4:	2300      	movs	r3, #0
 8006df6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006dfa:	e03d      	b.n	8006e78 <UKFCorrectorAdditive_getPredict+0x2f8>
    Wmean_0 = *Sy * S[knt];
 8006dfc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e04:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006e08:	00da      	lsls	r2, r3, #3
 8006e0a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006e0e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4413      	add	r3, r2
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f7f9 fbed 	bl	80005f8 <__aeabi_dmul>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006e26:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt] = Wmean_0;
 8006e2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8006e36:	00c9      	lsls	r1, r1, #3
 8006e38:	f501 71b0 	add.w	r1, r1, #352	; 0x160
 8006e3c:	f107 0018 	add.w	r0, r7, #24
 8006e40:	4401      	add	r1, r0
 8006e42:	39a8      	subs	r1, #168	; 0xa8
 8006e44:	e9c1 2300 	strd	r2, r3, [r1]
    X2[knt + 9] = -Wmean_0;
 8006e48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8006e54:	3109      	adds	r1, #9
 8006e56:	4690      	mov	r8, r2
 8006e58:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8006e5c:	00cb      	lsls	r3, r1, #3
 8006e5e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006e62:	f107 0218 	add.w	r2, r7, #24
 8006e66:	4413      	add	r3, r2
 8006e68:	3ba8      	subs	r3, #168	; 0xa8
 8006e6a:	e9c3 8900 	strd	r8, r9, [r3]
  for (knt = 0; knt < 9; knt++) {
 8006e6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006e72:	3301      	adds	r3, #1
 8006e74:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006e78:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	ddbd      	ble.n	8006dfc <UKFCorrectorAdditive_getPredict+0x27c>
  }

  for (knt = 0; knt < 6; knt++) {
 8006e80:	2300      	movs	r3, #0
 8006e82:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006e86:	e085      	b.n	8006f94 <UKFCorrectorAdditive_getPredict+0x414>
 8006e88:	40080000 	.word	0x40080000
 8006e8c:	3ff00000 	.word	0x3ff00000
    X2[3 * knt] += X1[0];
 8006e90:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8006e94:	4613      	mov	r3, r2
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	4413      	add	r3, r2
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006ea0:	f107 0218 	add.w	r2, r7, #24
 8006ea4:	4413      	add	r3, r2
 8006ea6:	3ba8      	subs	r3, #168	; 0xa8
 8006ea8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006eac:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006eb0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eba:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	189c      	adds	r4, r3, r2
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	f7f9 f9e0 	bl	800028c <__adddf3>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	00e1      	lsls	r1, r4, #3
 8006ed2:	f501 71b0 	add.w	r1, r1, #352	; 0x160
 8006ed6:	f107 0018 	add.w	r0, r7, #24
 8006eda:	4401      	add	r1, r0
 8006edc:	39a8      	subs	r1, #168	; 0xa8
 8006ede:	e9c1 2300 	strd	r2, r3, [r1]
    X2_tmp = 3 * knt + 1;
 8006ee2:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	4413      	add	r3, r2
 8006eec:	3301      	adds	r3, #1
 8006eee:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    X2[X2_tmp] += X1[1];
 8006ef2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006efc:	f107 0218 	add.w	r2, r7, #24
 8006f00:	4413      	add	r3, r2
 8006f02:	3ba8      	subs	r3, #168	; 0xa8
 8006f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f08:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006f0c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3308      	adds	r3, #8
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	f7f9 f9b8 	bl	800028c <__adddf3>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006f24:	00c9      	lsls	r1, r1, #3
 8006f26:	f501 71b0 	add.w	r1, r1, #352	; 0x160
 8006f2a:	f107 0018 	add.w	r0, r7, #24
 8006f2e:	4401      	add	r1, r0
 8006f30:	39a8      	subs	r1, #168	; 0xa8
 8006f32:	e9c1 2300 	strd	r2, r3, [r1]
    X2_tmp = 3 * knt + 2;
 8006f36:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	4413      	add	r3, r2
 8006f40:	3302      	adds	r3, #2
 8006f42:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    X2[X2_tmp] += X1[2];
 8006f46:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006f50:	f107 0218 	add.w	r2, r7, #24
 8006f54:	4413      	add	r3, r2
 8006f56:	3ba8      	subs	r3, #168	; 0xa8
 8006f58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f5c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006f60:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3310      	adds	r3, #16
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	f7f9 f98e 	bl	800028c <__adddf3>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006f78:	00c9      	lsls	r1, r1, #3
 8006f7a:	f501 71b0 	add.w	r1, r1, #352	; 0x160
 8006f7e:	f107 0018 	add.w	r0, r7, #24
 8006f82:	4401      	add	r1, r0
 8006f84:	39a8      	subs	r1, #168	; 0xa8
 8006f86:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8006f8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006f8e:	3301      	adds	r3, #1
 8006f90:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006f94:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006f98:	2b05      	cmp	r3, #5
 8006f9a:	f77f af79 	ble.w	8006e90 <UKFCorrectorAdditive_getPredict+0x310>
  }

  for (knt = 0; knt < 6; knt++) {
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006fa4:	e01f      	b.n	8006fe6 <UKFCorrectorAdditive_getPredict+0x466>
    Y2[knt] = batteryMeasurementFcn(&X2[3 * knt]);
 8006fa6:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8006faa:	4613      	mov	r3, r2
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	4413      	add	r3, r2
 8006fb0:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff fc33 	bl	8006824 <batteryMeasurementFcn>
 8006fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8006fc2:	eef0 7a60 	vmov.f32	s15, s1
 8006fc6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006fd0:	f107 0218 	add.w	r2, r7, #24
 8006fd4:	4413      	add	r3, r2
 8006fd6:	3bd8      	subs	r3, #216	; 0xd8
 8006fd8:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 6; knt++) {
 8006fdc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006fe6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006fea:	2b05      	cmp	r3, #5
 8006fec:	dddb      	ble.n	8006fa6 <UKFCorrectorAdditive_getPredict+0x426>
  }

  *Sy = batteryMeasurementFcn(X1);
 8006fee:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006ff2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006ff6:	6818      	ldr	r0, [r3, #0]
 8006ff8:	f7ff fc14 	bl	8006824 <batteryMeasurementFcn>
 8006ffc:	eeb0 7a40 	vmov.f32	s14, s0
 8007000:	eef0 7a60 	vmov.f32	s15, s1
 8007004:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007008:	ed83 7b00 	vstr	d7, [r3]
  for (knt = 0; knt < 6; knt++) {
 800700c:	2300      	movs	r3, #0
 800700e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8007012:	e02b      	b.n	800706c <UKFCorrectorAdditive_getPredict+0x4ec>
    Y2_0[knt] = (Y2[knt] - *Sy) + *Sy;
 8007014:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800701e:	f107 0218 	add.w	r2, r7, #24
 8007022:	4413      	add	r3, r2
 8007024:	3bd8      	subs	r3, #216	; 0xd8
 8007026:	e9d3 0100 	ldrd	r0, r1, [r3]
 800702a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f7f9 f929 	bl	8000288 <__aeabi_dsub>
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	4610      	mov	r0, r2
 800703c:	4619      	mov	r1, r3
 800703e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f7f9 f921 	bl	800028c <__adddf3>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8007052:	f5a1 7084 	sub.w	r0, r1, #264	; 0x108
 8007056:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800705a:	00c9      	lsls	r1, r1, #3
 800705c:	4401      	add	r1, r0
 800705e:	e9c1 2300 	strd	r2, r3, [r1]
  for (knt = 0; knt < 6; knt++) {
 8007062:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007066:	3301      	adds	r3, #1
 8007068:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800706c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007070:	2b05      	cmp	r3, #5
 8007072:	ddcf      	ble.n	8007014 <UKFCorrectorAdditive_getPredict+0x494>
  }

  UTMeanCovSqrt_NbgcfSwv(Wmean, Wcov, beta1, *Sy, Y2_0, X1, X2, Ymean, &Wmean_0,
 8007074:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007078:	ed93 7b00 	vldr	d7, [r3]
 800707c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007080:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007084:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8007088:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800708c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8007090:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8007094:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8007098:	6812      	ldr	r2, [r2, #0]
 800709a:	9203      	str	r2, [sp, #12]
 800709c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070a0:	9202      	str	r2, [sp, #8]
 80070a2:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80070a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80070aa:	6812      	ldr	r2, [r2, #0]
 80070ac:	9201      	str	r2, [sp, #4]
 80070ae:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80070b2:	9200      	str	r2, [sp, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4622      	mov	r2, r4
 80070b8:	eeb0 1a47 	vmov.f32	s2, s14
 80070bc:	eef0 1a67 	vmov.f32	s3, s15
 80070c0:	ed97 0b5c 	vldr	d0, [r7, #368]	; 0x170
 80070c4:	f7f9 ff98 	bl	8000ff8 <UTMeanCovSqrt_NbgcfSwv>
    Pxy);
  Wmean[0] = Wmean_0;
 80070c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80070d4:	f5a1 7194 	sub.w	r1, r1, #296	; 0x128
 80070d8:	e9c1 2300 	strd	r2, r3, [r1]
  Wmean[1] = Rs;
 80070dc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80070e0:	f5a3 7194 	sub.w	r1, r3, #296	; 0x128
 80070e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80070e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
  *Sy = Wmean_0;
 80070f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80070fc:	e9c1 2300 	strd	r2, r3, [r1]
  beta1 = xnrm2_zmdkvCDw(1, Wmean, 2);
 8007100:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007104:	2202      	movs	r2, #2
 8007106:	4619      	mov	r1, r3
 8007108:	2001      	movs	r0, #1
 800710a:	f7ff f851 	bl	80061b0 <xnrm2_zmdkvCDw>
 800710e:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
  if (beta1 != 0.0) {
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800711e:	f7f9 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d000      	beq.n	800712a <UKFCorrectorAdditive_getPredict+0x5aa>
      *Sy = beta1;
    } else {
      *Sy = beta1;
    }
  }
}
 8007128:	e0de      	b.n	80072e8 <UKFCorrectorAdditive_getPredict+0x768>
    beta1 = rt_hypotd_snf(Wmean_0, beta1);
 800712a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800712e:	ed93 7b00 	vldr	d7, [r3]
 8007132:	ed97 1b5c 	vldr	d1, [r7, #368]	; 0x170
 8007136:	eeb0 0a47 	vmov.f32	s0, s14
 800713a:	eef0 0a67 	vmov.f32	s1, s15
 800713e:	f7fc f90f 	bl	8003360 <rt_hypotd_snf>
 8007142:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
    if (Wmean_0 >= 0.0) {
 8007146:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800714a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800714e:	f04f 0200 	mov.w	r2, #0
 8007152:	f04f 0300 	mov.w	r3, #0
 8007156:	f7f9 fcd5 	bl	8000b04 <__aeabi_dcmpge>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00b      	beq.n	8007178 <UKFCorrectorAdditive_getPredict+0x5f8>
      beta1 = -beta1;
 8007160:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8007164:	603b      	str	r3, [r7, #0]
 8007166:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800716a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800716e:	607b      	str	r3, [r7, #4]
 8007170:	ed97 7b00 	vldr	d7, [r7]
 8007174:	ed87 7b5c 	vstr	d7, [r7, #368]	; 0x170
    if (fabs(beta1) < 1.0020841800044864E-292) {
 8007178:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8007182:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8007190:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007194:	f7f9 fca2 	bl	8000adc <__aeabi_dcmplt>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 809e 	beq.w	80072dc <UKFCorrectorAdditive_getPredict+0x75c>
      knt = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        knt++;
 80071a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80071aa:	3301      	adds	r3, #1
 80071ac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        Wmean[1] *= 9.9792015476736E+291;
 80071b0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80071b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80071b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	4b4d      	ldr	r3, [pc, #308]	; (80072f8 <UKFCorrectorAdditive_getPredict+0x778>)
 80071c2:	f7f9 fa19 	bl	80005f8 <__aeabi_dmul>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80071ce:	f5a1 7194 	sub.w	r1, r1, #296	; 0x128
 80071d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        beta1 *= 9.9792015476736E+291;
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	4b47      	ldr	r3, [pc, #284]	; (80072f8 <UKFCorrectorAdditive_getPredict+0x778>)
 80071dc:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80071e0:	f7f9 fa0a 	bl	80005f8 <__aeabi_dmul>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
        *Sy *= 9.9792015476736E+291;
 80071ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80071f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071f4:	f04f 0200 	mov.w	r2, #0
 80071f8:	4b3f      	ldr	r3, [pc, #252]	; (80072f8 <UKFCorrectorAdditive_getPredict+0x778>)
 80071fa:	f7f9 f9fd 	bl	80005f8 <__aeabi_dmul>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8007206:	e9c1 2300 	strd	r2, r3, [r1]
      } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800720a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800720e:	60bb      	str	r3, [r7, #8]
 8007210:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8007214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8007222:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007226:	f7f9 fc59 	bl	8000adc <__aeabi_dcmplt>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <UKFCorrectorAdditive_getPredict+0x6b8>
 8007230:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007234:	2b13      	cmp	r3, #19
 8007236:	ddb6      	ble.n	80071a6 <UKFCorrectorAdditive_getPredict+0x626>
      beta1 = rt_hypotd_snf(*Sy, xnrm2_zmdkvCDw(1, Wmean, 2));
 8007238:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800723c:	ed93 8b00 	vldr	d8, [r3]
 8007240:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007244:	2202      	movs	r2, #2
 8007246:	4619      	mov	r1, r3
 8007248:	2001      	movs	r0, #1
 800724a:	f7fe ffb1 	bl	80061b0 <xnrm2_zmdkvCDw>
 800724e:	eeb0 7a40 	vmov.f32	s14, s0
 8007252:	eef0 7a60 	vmov.f32	s15, s1
 8007256:	eeb0 1a47 	vmov.f32	s2, s14
 800725a:	eef0 1a67 	vmov.f32	s3, s15
 800725e:	eeb0 0a48 	vmov.f32	s0, s16
 8007262:	eef0 0a68 	vmov.f32	s1, s17
 8007266:	f7fc f87b 	bl	8003360 <rt_hypotd_snf>
 800726a:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
      if (*Sy >= 0.0) {
 800726e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	f7f9 fc41 	bl	8000b04 <__aeabi_dcmpge>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <UKFCorrectorAdditive_getPredict+0x718>
        beta1 = -beta1;
 8007288:	f8d7 5170 	ldr.w	r5, [r7, #368]	; 0x170
 800728c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8007290:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8007294:	e9c7 565c 	strd	r5, r6, [r7, #368]	; 0x170
      for (X2_tmp = 0; X2_tmp < knt; X2_tmp++) {
 8007298:	2300      	movs	r3, #0
 800729a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800729e:	e010      	b.n	80072c2 <UKFCorrectorAdditive_getPredict+0x742>
        beta1 *= 1.0020841800044864E-292;
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80072a8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80072ac:	f7f9 f9a4 	bl	80005f8 <__aeabi_dmul>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
      for (X2_tmp = 0; X2_tmp < knt; X2_tmp++) {
 80072b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80072bc:	3301      	adds	r3, #1
 80072be:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80072c2:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80072c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80072ca:	429a      	cmp	r2, r3
 80072cc:	dbe8      	blt.n	80072a0 <UKFCorrectorAdditive_getPredict+0x720>
      *Sy = beta1;
 80072ce:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80072d2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80072d6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80072da:	e005      	b.n	80072e8 <UKFCorrectorAdditive_getPredict+0x768>
      *Sy = beta1;
 80072dc:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80072e0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80072e4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80072e8:	bf00      	nop
 80072ea:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 80072ee:	46bd      	mov	sp, r7
 80072f0:	ecbd 8b02 	vpop	{d8}
 80072f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072f8:	7c900000 	.word	0x7c900000
 80072fc:	00000000 	.word	0x00000000

08007300 <SoC_Estimation_UKF_2RC_for_MCU_step>:

/* Model step function */
void SoC_Estimation_UKF_2RC_for_MCU_step(void)
{
 8007300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007304:	f5ad 7d67 	sub.w	sp, sp, #924	; 0x39c
 8007308:	af02      	add	r7, sp, #8
   *  Constant: '<S5>/R1'
   *  DataStoreRead: '<S7>/Data Store ReadX'
   *  DataStoreWrite: '<S7>/Data Store WriteP'
   *  Inport: '<Root>/voltage'
   */
  batteryMeasurementFcn(rtDW.x);
 800730a:	48c7      	ldr	r0, [pc, #796]	; (8007628 <SoC_Estimation_UKF_2RC_for_MCU_step+0x328>)
 800730c:	f7ff fa8a 	bl	8006824 <batteryMeasurementFcn>
  UKFCorrectorAdditive_getPredict(3.1622776601683795, rtDW.x, rtDW.P_f, 1.0, 2.0,
 8007310:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007314:	f107 0208 	add.w	r2, r7, #8
 8007318:	463b      	mov	r3, r7
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	460b      	mov	r3, r1
 800731e:	ed9f 3bba 	vldr	d3, [pc, #744]	; 8007608 <SoC_Estimation_UKF_2RC_for_MCU_step+0x308>
 8007322:	ed9f 2bbb 	vldr	d2, [pc, #748]	; 8007610 <SoC_Estimation_UKF_2RC_for_MCU_step+0x310>
 8007326:	ed9f 1bbc 	vldr	d1, [pc, #752]	; 8007618 <SoC_Estimation_UKF_2RC_for_MCU_step+0x318>
 800732a:	49c0      	ldr	r1, [pc, #768]	; (800762c <SoC_Estimation_UKF_2RC_for_MCU_step+0x32c>)
 800732c:	48be      	ldr	r0, [pc, #760]	; (8007628 <SoC_Estimation_UKF_2RC_for_MCU_step+0x328>)
 800732e:	ed9f 0bbc 	vldr	d0, [pc, #752]	; 8007620 <SoC_Estimation_UKF_2RC_for_MCU_step+0x320>
 8007332:	f7ff fc25 	bl	8006b80 <UKFCorrectorAdditive_getPredict>
    0.0, &rtb_Product, Pxy, &temp);
  rtb_Product = rtU.voltage - rtb_Product;
 8007336:	4bbe      	ldr	r3, [pc, #760]	; (8007630 <SoC_Estimation_UKF_2RC_for_MCU_step+0x330>)
 8007338:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800733c:	f107 0310 	add.w	r3, r7, #16
 8007340:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007344:	f7f8 ffa0 	bl	8000288 <__aeabi_dsub>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	f107 0110 	add.w	r1, r7, #16
 8007350:	e941 2302 	strd	r2, r3, [r1, #-8]
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8007354:	2300      	movs	r3, #0
 8007356:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800735a:	e058      	b.n	800740e <SoC_Estimation_UKF_2RC_for_MCU_step+0x10e>
    R[3 * iAcol] = rtDW.P_f[iAcol];
 800735c:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8007360:	4613      	mov	r3, r2
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	1899      	adds	r1, r3, r2
 8007366:	4ab1      	ldr	r2, [pc, #708]	; (800762c <SoC_Estimation_UKF_2RC_for_MCU_step+0x32c>)
 8007368:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	4413      	add	r3, r2
 8007370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007374:	f507 7064 	add.w	r0, r7, #912	; 0x390
 8007378:	f5a0 701e 	sub.w	r0, r0, #632	; 0x278
 800737c:	00c9      	lsls	r1, r1, #3
 800737e:	4401      	add	r1, r0
 8007380:	e9c1 2300 	strd	r2, r3, [r1]
    R[3 * iAcol + 1] = rtDW.P_f[iAcol + 3];
 8007384:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8007388:	1cd8      	adds	r0, r3, #3
 800738a:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 800738e:	4613      	mov	r3, r2
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	4413      	add	r3, r2
 8007394:	1c59      	adds	r1, r3, #1
 8007396:	4aa5      	ldr	r2, [pc, #660]	; (800762c <SoC_Estimation_UKF_2RC_for_MCU_step+0x32c>)
 8007398:	00c3      	lsls	r3, r0, #3
 800739a:	4413      	add	r3, r2
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f507 7064 	add.w	r0, r7, #912	; 0x390
 80073a4:	f5a0 701e 	sub.w	r0, r0, #632	; 0x278
 80073a8:	00c9      	lsls	r1, r1, #3
 80073aa:	4401      	add	r1, r0
 80073ac:	e9c1 2300 	strd	r2, r3, [r1]
    R[3 * iAcol + 2] = rtDW.P_f[iAcol + 6];
 80073b0:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80073b4:	1d98      	adds	r0, r3, #6
 80073b6:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 80073ba:	4613      	mov	r3, r2
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	4413      	add	r3, r2
 80073c0:	1c99      	adds	r1, r3, #2
 80073c2:	4a9a      	ldr	r2, [pc, #616]	; (800762c <SoC_Estimation_UKF_2RC_for_MCU_step+0x32c>)
 80073c4:	00c3      	lsls	r3, r0, #3
 80073c6:	4413      	add	r3, r2
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	f507 7064 	add.w	r0, r7, #912	; 0x390
 80073d0:	f5a0 701e 	sub.w	r0, r0, #632	; 0x278
 80073d4:	00c9      	lsls	r1, r1, #3
 80073d6:	4401      	add	r1, r0
 80073d8:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_xNew[iAcol] = Pxy[iAcol];
 80073dc:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80073e0:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80073e4:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	4413      	add	r3, r2
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80073f4:	f5a1 705a 	sub.w	r0, r1, #872	; 0x368
 80073f8:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 80073fc:	00c9      	lsls	r1, r1, #3
 80073fe:	4401      	add	r1, r0
 8007400:	e9c1 2300 	strd	r2, r3, [r1]
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8007404:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8007408:	3301      	adds	r3, #1
 800740a:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800740e:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8007412:	2b02      	cmp	r3, #2
 8007414:	dda2      	ble.n	800735c <SoC_Estimation_UKF_2RC_for_MCU_step+0x5c>
  }

  trisolve_7ekc8URj(temp, rtb_xNew);
 8007416:	463b      	mov	r3, r7
 8007418:	ed93 7b00 	vldr	d7, [r3]
 800741c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007420:	4618      	mov	r0, r3
 8007422:	eeb0 0a47 	vmov.f32	s0, s14
 8007426:	eef0 0a67 	vmov.f32	s1, s15
 800742a:	f7fe f871 	bl	8005510 <trisolve_7ekc8URj>
  K[0] = rtb_xNew[0];
 800742e:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007432:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	f507 7164 	add.w	r1, r7, #912	; 0x390
 800743e:	f5a1 7148 	sub.w	r1, r1, #800	; 0x320
 8007442:	e9c1 2300 	strd	r2, r3, [r1]
  K[1] = rtb_xNew[1];
 8007446:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800744a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800744e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007452:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007456:	f5a1 7148 	sub.w	r1, r1, #800	; 0x320
 800745a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  K[2] = rtb_xNew[2];
 800745e:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007462:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007466:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800746a:	f507 7164 	add.w	r1, r7, #912	; 0x390
 800746e:	f5a1 7148 	sub.w	r1, r1, #800	; 0x320
 8007472:	e9c1 2304 	strd	r2, r3, [r1, #16]
  trisolve_7ekc8URj(temp, K);
 8007476:	463b      	mov	r3, r7
 8007478:	ed93 7b00 	vldr	d7, [r3]
 800747c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007480:	4618      	mov	r0, r3
 8007482:	eeb0 0a47 	vmov.f32	s0, s14
 8007486:	eef0 0a67 	vmov.f32	s1, s15
 800748a:	f7fe f841 	bl	8005510 <trisolve_7ekc8URj>
  for (b_j = 0; b_j < 3; b_j++) {
 800748e:	2300      	movs	r3, #0
 8007490:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8007494:	e036      	b.n	8007504 <SoC_Estimation_UKF_2RC_for_MCU_step+0x204>
    Pxy[b_j] = K[b_j] * temp;
 8007496:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800749a:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 800749e:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	4413      	add	r3, r2
 80074a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074aa:	463b      	mov	r3, r7
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f7f9 f8a2 	bl	80005f8 <__aeabi_dmul>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80074bc:	f5a1 704e 	sub.w	r0, r1, #824	; 0x338
 80074c0:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80074c4:	00c9      	lsls	r1, r1, #3
 80074c6:	4401      	add	r1, r0
 80074c8:	e9c1 2300 	strd	r2, r3, [r1]
    if (1 - b_j >= 0) {
 80074cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80074d0:	f1c3 0301 	rsb	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	db10      	blt.n	80074fa <SoC_Estimation_UKF_2RC_for_MCU_step+0x1fa>
      memset(&R[(b_j << 2) + 1], 0, (uint32_T)((1 - b_j) + 1) * sizeof(real_T));
 80074d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	3301      	adds	r3, #1
 80074e0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	18d0      	adds	r0, r2, r3
 80074e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80074ec:	f1c3 0302 	rsb	r3, r3, #2
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	461a      	mov	r2, r3
 80074f4:	2100      	movs	r1, #0
 80074f6:	f005 fb03 	bl	800cb00 <memset>
  for (b_j = 0; b_j < 3; b_j++) {
 80074fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80074fe:	3301      	adds	r3, #1
 8007500:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8007504:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8007508:	2b02      	cmp	r3, #2
 800750a:	ddc4      	ble.n	8007496 <SoC_Estimation_UKF_2RC_for_MCU_step+0x196>
    }
  }

  p = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	f887 3373 	strb.w	r3, [r7, #883]	; 0x373
  errorCondition = (R[0] == 0.0);
 8007512:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007516:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800751a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800751e:	2301      	movs	r3, #1
 8007520:	461e      	mov	r6, r3
 8007522:	f04f 0200 	mov.w	r2, #0
 8007526:	f04f 0300 	mov.w	r3, #0
 800752a:	f7f9 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <SoC_Estimation_UKF_2RC_for_MCU_step+0x238>
 8007534:	2300      	movs	r3, #0
 8007536:	461e      	mov	r6, r3
 8007538:	b2f3      	uxtb	r3, r6
 800753a:	f887 3372 	strb.w	r3, [r7, #882]	; 0x372
  if (!errorCondition) {
 800753e:	f897 3372 	ldrb.w	r3, [r7, #882]	; 0x372
 8007542:	2b00      	cmp	r3, #0
 8007544:	d115      	bne.n	8007572 <SoC_Estimation_UKF_2RC_for_MCU_step+0x272>
    errorCondition = (R[4] == 0.0);
 8007546:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800754a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800754e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007552:	2301      	movs	r3, #1
 8007554:	461e      	mov	r6, r3
 8007556:	f04f 0200 	mov.w	r2, #0
 800755a:	f04f 0300 	mov.w	r3, #0
 800755e:	f7f9 fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <SoC_Estimation_UKF_2RC_for_MCU_step+0x26c>
 8007568:	2300      	movs	r3, #0
 800756a:	461e      	mov	r6, r3
 800756c:	b2f3      	uxtb	r3, r6
 800756e:	f887 3372 	strb.w	r3, [r7, #882]	; 0x372
  }

  if (!errorCondition) {
 8007572:	f897 3372 	ldrb.w	r3, [r7, #882]	; 0x372
 8007576:	2b00      	cmp	r3, #0
 8007578:	d115      	bne.n	80075a6 <SoC_Estimation_UKF_2RC_for_MCU_step+0x2a6>
    errorCondition = (R[8] == 0.0);
 800757a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800757e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8007582:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007586:	2301      	movs	r3, #1
 8007588:	461e      	mov	r6, r3
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	f04f 0300 	mov.w	r3, #0
 8007592:	f7f9 fa99 	bl	8000ac8 <__aeabi_dcmpeq>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <SoC_Estimation_UKF_2RC_for_MCU_step+0x2a0>
 800759c:	2300      	movs	r3, #0
 800759e:	461e      	mov	r6, r3
 80075a0:	b2f3      	uxtb	r3, r6
 80075a2:	f887 3372 	strb.w	r3, [r7, #882]	; 0x372
  }

  if (errorCondition) {
 80075a6:	f897 3372 	ldrb.w	r3, [r7, #882]	; 0x372
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <SoC_Estimation_UKF_2RC_for_MCU_step+0x2b6>
    p = 2;
 80075ae:	2302      	movs	r3, #2
 80075b0:	f887 3373 	strb.w	r3, [r7, #883]	; 0x373
 80075b4:	e2f7      	b.n	8007ba6 <SoC_Estimation_UKF_2RC_for_MCU_step+0x8a6>
  } else {
    rtb_xNew[0] = Pxy[0];
 80075b6:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80075ba:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c2:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80075c6:	f5a1 715a 	sub.w	r1, r1, #872	; 0x368
 80075ca:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_xNew[1] = Pxy[1];
 80075ce:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80075d2:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80075d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80075da:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80075de:	f5a1 715a 	sub.w	r1, r1, #872	; 0x368
 80075e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    rtb_xNew[2] = Pxy[2];
 80075e6:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80075ea:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80075ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80075f2:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80075f6:	f5a1 715a 	sub.w	r1, r1, #872	; 0x368
 80075fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
    for (i = 0; i < 3; i++) {
 80075fe:	2300      	movs	r3, #0
 8007600:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8007604:	e083      	b.n	800770e <SoC_Estimation_UKF_2RC_for_MCU_step+0x40e>
 8007606:	bf00      	nop
	...
 8007614:	40000000 	.word	0x40000000
 8007618:	00000000 	.word	0x00000000
 800761c:	3ff00000 	.word	0x3ff00000
 8007620:	3ada5b53 	.word	0x3ada5b53
 8007624:	40094c58 	.word	0x40094c58
 8007628:	20000270 	.word	0x20000270
 800762c:	20000228 	.word	0x20000228
 8007630:	20000290 	.word	0x20000290
      iAcol = 3 * i;
 8007634:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8007638:	4613      	mov	r3, r2
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	4413      	add	r3, r2
 800763e:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
      temp = rtb_xNew[i];
 8007642:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007646:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 800764a:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	4413      	add	r3, r2
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	4639      	mov	r1, r7
 8007658:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_j = 0; b_j < i; b_j++) {
 800765c:	2300      	movs	r3, #0
 800765e:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8007662:	e02b      	b.n	80076bc <SoC_Estimation_UKF_2RC_for_MCU_step+0x3bc>
        temp -= R[b_j + iAcol] * rtb_xNew[b_j];
 8007664:	463b      	mov	r3, r7
 8007666:	e9d3 8900 	ldrd	r8, r9, [r3]
 800766a:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 800766e:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8007672:	4413      	add	r3, r2
 8007674:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8007678:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 800767c:	00db      	lsls	r3, r3, #3
 800767e:	4413      	add	r3, r2
 8007680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007684:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007688:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 800768c:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	4413      	add	r3, r2
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	f7f8 ffae 	bl	80005f8 <__aeabi_dmul>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4640      	mov	r0, r8
 80076a2:	4649      	mov	r1, r9
 80076a4:	f7f8 fdf0 	bl	8000288 <__aeabi_dsub>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4639      	mov	r1, r7
 80076ae:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_j = 0; b_j < i; b_j++) {
 80076b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80076b6:	3301      	adds	r3, #1
 80076b8:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 80076bc:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 80076c0:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80076c4:	429a      	cmp	r2, r3
 80076c6:	dbcd      	blt.n	8007664 <SoC_Estimation_UKF_2RC_for_MCU_step+0x364>
      }

      rtb_xNew[i] = temp / R[i + iAcol];
 80076c8:	463b      	mov	r3, r7
 80076ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076ce:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 80076d2:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80076d6:	4413      	add	r3, r2
 80076d8:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80076dc:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	4413      	add	r3, r2
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	f7f9 f8b0 	bl	800084c <__aeabi_ddiv>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80076f4:	f5a1 705a 	sub.w	r0, r1, #872	; 0x368
 80076f8:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 80076fc:	00c9      	lsls	r1, r1, #3
 80076fe:	4401      	add	r1, r0
 8007700:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 3; i++) {
 8007704:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007708:	3301      	adds	r3, #1
 800770a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800770e:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007712:	2b02      	cmp	r3, #2
 8007714:	dd8e      	ble.n	8007634 <SoC_Estimation_UKF_2RC_for_MCU_step+0x334>
    }

    scale = 3.3121686421112381E-170;
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800771e:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
    absxk = fabs(rtb_xNew[0]);
 8007722:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007726:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	4611      	mov	r1, r2
 8007730:	f8c7 1360 	str.w	r1, [r7, #864]	; 0x360
 8007734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007738:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
    if (absxk > 3.3121686421112381E-170) {
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8007744:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8007748:	f7f9 f9e6 	bl	8000b18 <__aeabi_dcmpgt>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <SoC_Estimation_UKF_2RC_for_MCU_step+0x466>
      nrmx = 1.0;
 8007752:	f04f 0200 	mov.w	r2, #0
 8007756:	4b7e      	ldr	r3, [pc, #504]	; (8007950 <SoC_Estimation_UKF_2RC_for_MCU_step+0x650>)
 8007758:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
      scale = absxk;
 800775c:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8007760:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
 8007764:	e018      	b.n	8007798 <SoC_Estimation_UKF_2RC_for_MCU_step+0x498>
    } else {
      temp = absxk / 3.3121686421112381E-170;
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 800776e:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8007772:	f7f9 f86b 	bl	800084c <__aeabi_ddiv>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4639      	mov	r1, r7
 800777c:	e9c1 2300 	strd	r2, r3, [r1]
      nrmx = temp * temp;
 8007780:	463b      	mov	r3, r7
 8007782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007786:	463b      	mov	r3, r7
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	f7f8 ff34 	bl	80005f8 <__aeabi_dmul>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
    }

    absxk = fabs(rtb_xNew[1]);
 8007798:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800779c:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80077a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80077a4:	4611      	mov	r1, r2
 80077a6:	f8c7 1360 	str.w	r1, [r7, #864]	; 0x360
 80077aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077ae:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
    if (absxk > scale) {
 80077b2:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 80077b6:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 80077ba:	f7f9 f9ad 	bl	8000b18 <__aeabi_dcmpgt>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d02c      	beq.n	800781e <SoC_Estimation_UKF_2RC_for_MCU_step+0x51e>
      temp = scale / absxk;
 80077c4:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 80077c8:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 80077cc:	f7f9 f83e 	bl	800084c <__aeabi_ddiv>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4639      	mov	r1, r7
 80077d6:	e9c1 2300 	strd	r2, r3, [r1]
      nrmx = nrmx * temp * temp + 1.0;
 80077da:	463b      	mov	r3, r7
 80077dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077e0:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 80077e4:	f7f8 ff08 	bl	80005f8 <__aeabi_dmul>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4610      	mov	r0, r2
 80077ee:	4619      	mov	r1, r3
 80077f0:	463b      	mov	r3, r7
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f7f8 feff 	bl	80005f8 <__aeabi_dmul>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4610      	mov	r0, r2
 8007800:	4619      	mov	r1, r3
 8007802:	f04f 0200 	mov.w	r2, #0
 8007806:	4b52      	ldr	r3, [pc, #328]	; (8007950 <SoC_Estimation_UKF_2RC_for_MCU_step+0x650>)
 8007808:	f7f8 fd40 	bl	800028c <__adddf3>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
      scale = absxk;
 8007814:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8007818:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
 800781c:	e01c      	b.n	8007858 <SoC_Estimation_UKF_2RC_for_MCU_step+0x558>
    } else {
      temp = absxk / scale;
 800781e:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8007822:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8007826:	f7f9 f811 	bl	800084c <__aeabi_ddiv>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4639      	mov	r1, r7
 8007830:	e9c1 2300 	strd	r2, r3, [r1]
      nrmx += temp * temp;
 8007834:	463b      	mov	r3, r7
 8007836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800783a:	463b      	mov	r3, r7
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f8 feda 	bl	80005f8 <__aeabi_dmul>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	e9d7 01e2 	ldrd	r0, r1, [r7, #904]	; 0x388
 800784c:	f7f8 fd1e 	bl	800028c <__adddf3>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
    }

    absxk = fabs(rtb_xNew[2]);
 8007858:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800785c:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007860:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007864:	4611      	mov	r1, r2
 8007866:	f8c7 1360 	str.w	r1, [r7, #864]	; 0x360
 800786a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800786e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
    if (absxk > scale) {
 8007872:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8007876:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 800787a:	f7f9 f94d 	bl	8000b18 <__aeabi_dcmpgt>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d02c      	beq.n	80078de <SoC_Estimation_UKF_2RC_for_MCU_step+0x5de>
      temp = scale / absxk;
 8007884:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8007888:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 800788c:	f7f8 ffde 	bl	800084c <__aeabi_ddiv>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4639      	mov	r1, r7
 8007896:	e9c1 2300 	strd	r2, r3, [r1]
      nrmx = nrmx * temp * temp + 1.0;
 800789a:	463b      	mov	r3, r7
 800789c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078a0:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 80078a4:	f7f8 fea8 	bl	80005f8 <__aeabi_dmul>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4610      	mov	r0, r2
 80078ae:	4619      	mov	r1, r3
 80078b0:	463b      	mov	r3, r7
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	f7f8 fe9f 	bl	80005f8 <__aeabi_dmul>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4610      	mov	r0, r2
 80078c0:	4619      	mov	r1, r3
 80078c2:	f04f 0200 	mov.w	r2, #0
 80078c6:	4b22      	ldr	r3, [pc, #136]	; (8007950 <SoC_Estimation_UKF_2RC_for_MCU_step+0x650>)
 80078c8:	f7f8 fce0 	bl	800028c <__adddf3>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
      scale = absxk;
 80078d4:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 80078d8:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
 80078dc:	e01c      	b.n	8007918 <SoC_Estimation_UKF_2RC_for_MCU_step+0x618>
    } else {
      temp = absxk / scale;
 80078de:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 80078e2:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 80078e6:	f7f8 ffb1 	bl	800084c <__aeabi_ddiv>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	4639      	mov	r1, r7
 80078f0:	e9c1 2300 	strd	r2, r3, [r1]
      nrmx += temp * temp;
 80078f4:	463b      	mov	r3, r7
 80078f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078fa:	463b      	mov	r3, r7
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f7f8 fe7a 	bl	80005f8 <__aeabi_dmul>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	e9d7 01e2 	ldrd	r0, r1, [r7, #904]	; 0x388
 800790c:	f7f8 fcbe 	bl	800028c <__adddf3>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
    }

    nrmx = scale * sqrt(nrmx);
 8007918:	ed97 0be2 	vldr	d0, [r7, #904]	; 0x388
 800791c:	f009 fb86 	bl	801102c <sqrt>
 8007920:	ec53 2b10 	vmov	r2, r3, d0
 8007924:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 8007928:	f7f8 fe66 	bl	80005f8 <__aeabi_dmul>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
    if (nrmx >= 1.0) {
 8007934:	f04f 0200 	mov.w	r2, #0
 8007938:	4b05      	ldr	r3, [pc, #20]	; (8007950 <SoC_Estimation_UKF_2RC_for_MCU_step+0x650>)
 800793a:	e9d7 01e2 	ldrd	r0, r1, [r7, #904]	; 0x388
 800793e:	f7f9 f8e1 	bl	8000b04 <__aeabi_dcmpge>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <SoC_Estimation_UKF_2RC_for_MCU_step+0x654>
      p = 1;
 8007948:	2301      	movs	r3, #1
 800794a:	f887 3373 	strb.w	r3, [r7, #883]	; 0x373
 800794e:	e12a      	b.n	8007ba6 <SoC_Estimation_UKF_2RC_for_MCU_step+0x8a6>
 8007950:	3ff00000 	.word	0x3ff00000
    } else {
      rotate_3AIOL9tK(sqrt(1.0 - nrmx * nrmx), rtb_xNew[2], &b_c[2], &s[2],
 8007954:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8007958:	e9d7 01e2 	ldrd	r0, r1, [r7, #904]	; 0x388
 800795c:	f7f8 fe4c 	bl	80005f8 <__aeabi_dmul>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	f04f 0000 	mov.w	r0, #0
 8007968:	4995      	ldr	r1, [pc, #596]	; (8007bc0 <SoC_Estimation_UKF_2RC_for_MCU_step+0x8c0>)
 800796a:	f7f8 fc8d 	bl	8000288 <__aeabi_dsub>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	ec43 2b17 	vmov	d7, r2, r3
 8007976:	eeb0 0a47 	vmov.f32	s0, s14
 800797a:	eef0 0a67 	vmov.f32	s1, s15
 800797e:	f009 fb55 	bl	801102c <sqrt>
 8007982:	eeb0 6a40 	vmov.f32	s12, s0
 8007986:	eef0 6a60 	vmov.f32	s13, s1
 800798a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800798e:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007992:	ed93 7b04 	vldr	d7, [r3, #16]
 8007996:	463a      	mov	r2, r7
 8007998:	f107 0310 	add.w	r3, r7, #16
 800799c:	f103 0110 	add.w	r1, r3, #16
 80079a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079a4:	3310      	adds	r3, #16
 80079a6:	4618      	mov	r0, r3
 80079a8:	eeb0 1a47 	vmov.f32	s2, s14
 80079ac:	eef0 1a67 	vmov.f32	s3, s15
 80079b0:	eeb0 0a46 	vmov.f32	s0, s12
 80079b4:	eef0 0a66 	vmov.f32	s1, s13
 80079b8:	f7fb fb3c 	bl	8003034 <rotate_3AIOL9tK>
                      &temp);
      rtb_xNew[2] = 0.0;
 80079bc:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80079c0:	f5a3 715a 	sub.w	r1, r3, #872	; 0x368
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
      rotate_3AIOL9tK(temp, rtb_xNew[1], &b_c[1], &s[1], &temp);
 80079d0:	463b      	mov	r3, r7
 80079d2:	ed93 7b00 	vldr	d7, [r3]
 80079d6:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80079da:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80079de:	ed93 6b02 	vldr	d6, [r3, #8]
 80079e2:	463a      	mov	r2, r7
 80079e4:	f107 0310 	add.w	r3, r7, #16
 80079e8:	f103 0108 	add.w	r1, r3, #8
 80079ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079f0:	3308      	adds	r3, #8
 80079f2:	4618      	mov	r0, r3
 80079f4:	eeb0 1a46 	vmov.f32	s2, s12
 80079f8:	eef0 1a66 	vmov.f32	s3, s13
 80079fc:	eeb0 0a47 	vmov.f32	s0, s14
 8007a00:	eef0 0a67 	vmov.f32	s1, s15
 8007a04:	f7fb fb16 	bl	8003034 <rotate_3AIOL9tK>
      rtb_xNew[1] = 0.0;
 8007a08:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007a0c:	f5a3 715a 	sub.w	r1, r3, #872	; 0x368
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	e9c1 2302 	strd	r2, r3, [r1, #8]
      rotate_3AIOL9tK(temp, rtb_xNew[0], &b_c[0], &s[0], &temp);
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	ed93 7b00 	vldr	d7, [r3]
 8007a22:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007a26:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007a2a:	ed93 6b00 	vldr	d6, [r3]
 8007a2e:	463a      	mov	r2, r7
 8007a30:	f107 0110 	add.w	r1, r7, #16
 8007a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a38:	4618      	mov	r0, r3
 8007a3a:	eeb0 1a46 	vmov.f32	s2, s12
 8007a3e:	eef0 1a66 	vmov.f32	s3, s13
 8007a42:	eeb0 0a47 	vmov.f32	s0, s14
 8007a46:	eef0 0a67 	vmov.f32	s1, s15
 8007a4a:	f7fb faf3 	bl	8003034 <rotate_3AIOL9tK>
      rtb_xNew[0] = 0.0;
 8007a4e:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007a52:	f5a3 715a 	sub.w	r1, r3, #872	; 0x368
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	f04f 0300 	mov.w	r3, #0
 8007a5e:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007a62:	2300      	movs	r3, #0
 8007a64:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8007a68:	e098      	b.n	8007b9c <SoC_Estimation_UKF_2RC_for_MCU_step+0x89c>
        for (i = iAcol + 1; i >= 1; i--) {
 8007a6a:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8007a6e:	3301      	adds	r3, #1
 8007a70:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8007a74:	e088      	b.n	8007b88 <SoC_Estimation_UKF_2RC_for_MCU_step+0x888>
          temp = rtb_xNew[iAcol];
 8007a76:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007a7a:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8007a7e:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	4413      	add	r3, r2
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	e9c1 2300 	strd	r2, r3, [r1]
          aoffset = (3 * iAcol + i) - 1;
 8007a90:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8007a94:	4613      	mov	r3, r2
 8007a96:	005b      	lsls	r3, r3, #1
 8007a98:	441a      	add	r2, r3
 8007a9a:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007a9e:	4413      	add	r3, r2
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
          scale = R[aoffset];
 8007aa6:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007aaa:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8007aae:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	4413      	add	r3, r2
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
          absxk = s[i - 1];
 8007abe:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8007ac8:	f5a2 7260 	sub.w	r2, r2, #896	; 0x380
 8007acc:	00db      	lsls	r3, r3, #3
 8007ace:	4413      	add	r3, r2
 8007ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad4:	e9c7 23d8 	strd	r2, r3, [r7, #864]	; 0x360
          nrmx = b_c[i - 1];
 8007ad8:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007adc:	3b01      	subs	r3, #1
 8007ade:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8007ae2:	f5a2 7254 	sub.w	r2, r2, #848	; 0x350
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	4413      	add	r3, r2
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
          R[aoffset] = scale * nrmx - absxk * temp;
 8007af2:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8007af6:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 8007afa:	f7f8 fd7d 	bl	80005f8 <__aeabi_dmul>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4690      	mov	r8, r2
 8007b04:	4699      	mov	r9, r3
 8007b06:	463b      	mov	r3, r7
 8007b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b0c:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8007b10:	f7f8 fd72 	bl	80005f8 <__aeabi_dmul>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4640      	mov	r0, r8
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	f7f8 fbb4 	bl	8000288 <__aeabi_dsub>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007b28:	f5a1 701e 	sub.w	r0, r1, #632	; 0x278
 8007b2c:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 8007b30:	00c9      	lsls	r1, r1, #3
 8007b32:	4401      	add	r1, r0
 8007b34:	e9c1 2300 	strd	r2, r3, [r1]
          rtb_xNew[iAcol] = nrmx * temp + scale * absxk;
 8007b38:	463b      	mov	r3, r7
 8007b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b3e:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8007b42:	f7f8 fd59 	bl	80005f8 <__aeabi_dmul>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4690      	mov	r8, r2
 8007b4c:	4699      	mov	r9, r3
 8007b4e:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8007b52:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 8007b56:	f7f8 fd4f 	bl	80005f8 <__aeabi_dmul>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4640      	mov	r0, r8
 8007b60:	4649      	mov	r1, r9
 8007b62:	f7f8 fb93 	bl	800028c <__adddf3>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007b6e:	f5a1 705a 	sub.w	r0, r1, #872	; 0x368
 8007b72:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8007b76:	00c9      	lsls	r1, r1, #3
 8007b78:	4401      	add	r1, r0
 8007b7a:	e9c1 2300 	strd	r2, r3, [r1]
        for (i = iAcol + 1; i >= 1; i--) {
 8007b7e:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007b82:	3b01      	subs	r3, #1
 8007b84:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8007b88:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f73f af72 	bgt.w	8007a76 <SoC_Estimation_UKF_2RC_for_MCU_step+0x776>
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007b92:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8007b96:	3301      	adds	r3, #1
 8007b98:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8007b9c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	f77f af62 	ble.w	8007a6a <SoC_Estimation_UKF_2RC_for_MCU_step+0x76a>
        }
      }
    }
  }

  if (p != 0) {
 8007ba6:	f997 3373 	ldrsb.w	r3, [r7, #883]	; 0x373
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 8342 	beq.w	8008234 <SoC_Estimation_UKF_2RC_for_MCU_step+0xf34>
    boolean_T exitg2;
    for (i = 0; i < 3; i++) {
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8007bb6:	e102      	b.n	8007dbe <SoC_Estimation_UKF_2RC_for_MCU_step+0xabe>
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8007bbe:	e0f4      	b.n	8007daa <SoC_Estimation_UKF_2RC_for_MCU_step+0xaaa>
 8007bc0:	3ff00000 	.word	0x3ff00000
        b_j = 3 * iAcol + i;
 8007bc4:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8007bc8:	4613      	mov	r3, r2
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	4413      	add	r3, r2
 8007bce:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
        R_0[b_j] = 0.0;
 8007bd8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007bdc:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8007be0:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	18d1      	adds	r1, r2, r3
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	f04f 0300 	mov.w	r3, #0
 8007bf0:	e9c1 2300 	strd	r2, r3, [r1]
        R_0[b_j] += R[3 * i] * R[3 * iAcol];
 8007bf4:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007bf8:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8007bfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	4413      	add	r3, r2
 8007c04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c08:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	4413      	add	r3, r2
 8007c12:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8007c16:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	4413      	add	r3, r2
 8007c1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c22:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8007c26:	4613      	mov	r3, r2
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8007c30:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	4413      	add	r3, r2
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f7f8 fcdc 	bl	80005f8 <__aeabi_dmul>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4640      	mov	r0, r8
 8007c46:	4649      	mov	r1, r9
 8007c48:	f7f8 fb20 	bl	800028c <__adddf3>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007c54:	f5a1 7030 	sub.w	r0, r1, #704	; 0x2c0
 8007c58:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8007c5c:	00c9      	lsls	r1, r1, #3
 8007c5e:	4401      	add	r1, r0
 8007c60:	e9c1 2300 	strd	r2, r3, [r1]
        R_0[b_j] += R[3 * i + 1] * R[3 * iAcol + 1];
 8007c64:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007c68:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8007c6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8007c70:	00db      	lsls	r3, r3, #3
 8007c72:	4413      	add	r3, r2
 8007c74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c78:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	4413      	add	r3, r2
 8007c82:	3301      	adds	r3, #1
 8007c84:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8007c88:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	4413      	add	r3, r2
 8007c90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c94:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8007c98:	4613      	mov	r3, r2
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	4413      	add	r3, r2
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8007ca4:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	4413      	add	r3, r2
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	f7f8 fca2 	bl	80005f8 <__aeabi_dmul>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4640      	mov	r0, r8
 8007cba:	4649      	mov	r1, r9
 8007cbc:	f7f8 fae6 	bl	800028c <__adddf3>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007cc8:	f5a1 7030 	sub.w	r0, r1, #704	; 0x2c0
 8007ccc:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8007cd0:	00c9      	lsls	r1, r1, #3
 8007cd2:	4401      	add	r1, r0
 8007cd4:	e9c1 2300 	strd	r2, r3, [r1]
        R_0[b_j] += R[3 * i + 2] * R[3 * iAcol + 2];
 8007cd8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007cdc:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8007ce0:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	4413      	add	r3, r2
 8007ce8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cec:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	4413      	add	r3, r2
 8007cf6:	3302      	adds	r3, #2
 8007cf8:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8007cfc:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	4413      	add	r3, r2
 8007d04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d08:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	4413      	add	r3, r2
 8007d12:	3302      	adds	r3, #2
 8007d14:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8007d18:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	4413      	add	r3, r2
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	f7f8 fc68 	bl	80005f8 <__aeabi_dmul>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4640      	mov	r0, r8
 8007d2e:	4649      	mov	r1, r9
 8007d30:	f7f8 faac 	bl	800028c <__adddf3>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007d3c:	f5a1 7030 	sub.w	r0, r1, #704	; 0x2c0
 8007d40:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8007d44:	00c9      	lsls	r1, r1, #3
 8007d46:	4401      	add	r1, r0
 8007d48:	e9c1 2300 	strd	r2, r3, [r1]
        Pxy_0[iAcol + 3 * i] = Pxy[iAcol] * Pxy[i];
 8007d4c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007d50:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8007d54:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8007d58:	00db      	lsls	r3, r3, #3
 8007d5a:	4413      	add	r3, r2
 8007d5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d60:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007d64:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8007d68:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	4413      	add	r3, r2
 8007d70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d74:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8007d78:	4613      	mov	r3, r2
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	441a      	add	r2, r3
 8007d7e:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8007d82:	18d6      	adds	r6, r2, r3
 8007d84:	4642      	mov	r2, r8
 8007d86:	464b      	mov	r3, r9
 8007d88:	f7f8 fc36 	bl	80005f8 <__aeabi_dmul>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007d94:	f5a1 700c 	sub.w	r0, r1, #560	; 0x230
 8007d98:	00f1      	lsls	r1, r6, #3
 8007d9a:	4401      	add	r1, r0
 8007d9c:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007da0:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8007da4:	3301      	adds	r3, #1
 8007da6:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8007daa:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	f77f af08 	ble.w	8007bc4 <SoC_Estimation_UKF_2RC_for_MCU_step+0x8c4>
    for (i = 0; i < 3; i++) {
 8007db4:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007db8:	3301      	adds	r3, #1
 8007dba:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8007dbe:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	f77f aef8 	ble.w	8007bb8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x8b8>
      }
    }

    errorCondition = true;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	f887 3372 	strb.w	r3, [r7, #882]	; 0x372
    for (i = 0; i < 9; i++) {
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8007dd4:	e04b      	b.n	8007e6e <SoC_Estimation_UKF_2RC_for_MCU_step+0xb6e>
      temp = R_0[i] - Pxy_0[i];
 8007dd6:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007dda:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8007dde:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	4413      	add	r3, r2
 8007de6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dea:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007dee:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8007df2:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	4413      	add	r3, r2
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fa43 	bl	8000288 <__aeabi_dsub>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4639      	mov	r1, r7
 8007e08:	e9c1 2300 	strd	r2, r3, [r1]
      if (errorCondition && (rtIsInf(temp) || rtIsNaN(temp))) {
 8007e0c:	f897 3372 	ldrb.w	r3, [r7, #882]	; 0x372
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d01a      	beq.n	8007e4a <SoC_Estimation_UKF_2RC_for_MCU_step+0xb4a>
 8007e14:	463b      	mov	r3, r7
 8007e16:	ed93 7b00 	vldr	d7, [r3]
 8007e1a:	eeb0 0a47 	vmov.f32	s0, s14
 8007e1e:	eef0 0a67 	vmov.f32	s1, s15
 8007e22:	f7fb fb8d 	bl	8003540 <rtIsInf>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10b      	bne.n	8007e44 <SoC_Estimation_UKF_2RC_for_MCU_step+0xb44>
 8007e2c:	463b      	mov	r3, r7
 8007e2e:	ed93 7b00 	vldr	d7, [r3]
 8007e32:	eeb0 0a47 	vmov.f32	s0, s14
 8007e36:	eef0 0a67 	vmov.f32	s1, s15
 8007e3a:	f7fb fba5 	bl	8003588 <rtIsNaN>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <SoC_Estimation_UKF_2RC_for_MCU_step+0xb4a>
        errorCondition = false;
 8007e44:	2300      	movs	r3, #0
 8007e46:	f887 3372 	strb.w	r3, [r7, #882]	; 0x372
      }

      Ss[i] = temp;
 8007e4a:	463b      	mov	r3, r7
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007e54:	f5a1 7042 	sub.w	r0, r1, #776	; 0x308
 8007e58:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8007e5c:	00c9      	lsls	r1, r1, #3
 8007e5e:	4401      	add	r1, r0
 8007e60:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 9; i++) {
 8007e64:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007e68:	3301      	adds	r3, #1
 8007e6a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8007e6e:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007e72:	2b08      	cmp	r3, #8
 8007e74:	ddaf      	ble.n	8007dd6 <SoC_Estimation_UKF_2RC_for_MCU_step+0xad6>
    }

    if (errorCondition) {
 8007e76:	f897 3372 	ldrb.w	r3, [r7, #882]	; 0x372
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <SoC_Estimation_UKF_2RC_for_MCU_step+0xb94>
      svd_iYqUPJsu(Ss, Pxy_0, s, R_0);
 8007e7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007e82:	f107 0210 	add.w	r2, r7, #16
 8007e86:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8007e8a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8007e8e:	f7fb fbcf 	bl	8003630 <svd_iYqUPJsu>
 8007e92:	e034      	b.n	8007efe <SoC_Estimation_UKF_2RC_for_MCU_step+0xbfe>
    } else {
      s[0] = (rtNaN);
 8007e94:	4bce      	ldr	r3, [pc, #824]	; (80081d0 <SoC_Estimation_UKF_2RC_for_MCU_step+0xed0>)
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007e9e:	f5a1 7160 	sub.w	r1, r1, #896	; 0x380
 8007ea2:	e9c1 2300 	strd	r2, r3, [r1]
      s[1] = (rtNaN);
 8007ea6:	4bca      	ldr	r3, [pc, #808]	; (80081d0 <SoC_Estimation_UKF_2RC_for_MCU_step+0xed0>)
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007eb0:	f5a1 7160 	sub.w	r1, r1, #896	; 0x380
 8007eb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      s[2] = (rtNaN);
 8007eb8:	4bc5      	ldr	r3, [pc, #788]	; (80081d0 <SoC_Estimation_UKF_2RC_for_MCU_step+0xed0>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007ec2:	f5a1 7160 	sub.w	r1, r1, #896	; 0x380
 8007ec6:	e9c1 2304 	strd	r2, r3, [r1, #16]
      for (i = 0; i < 9; i++) {
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8007ed0:	e011      	b.n	8007ef6 <SoC_Estimation_UKF_2RC_for_MCU_step+0xbf6>
        R_0[i] = (rtNaN);
 8007ed2:	4bbf      	ldr	r3, [pc, #764]	; (80081d0 <SoC_Estimation_UKF_2RC_for_MCU_step+0xed0>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007edc:	f5a1 7030 	sub.w	r0, r1, #704	; 0x2c0
 8007ee0:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8007ee4:	00c9      	lsls	r1, r1, #3
 8007ee6:	4401      	add	r1, r0
 8007ee8:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 9; i++) {
 8007eec:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8007ef6:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8007efa:	2b08      	cmp	r3, #8
 8007efc:	dde9      	ble.n	8007ed2 <SoC_Estimation_UKF_2RC_for_MCU_step+0xbd2>
      }
    }

    memset(&Ss[0], 0, 9U * sizeof(real_T));
 8007efe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007f02:	2248      	movs	r2, #72	; 0x48
 8007f04:	2100      	movs	r1, #0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f004 fdfa 	bl	800cb00 <memset>
    Ss[0] = s[0];
 8007f0c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007f10:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007f1c:	f5a1 7142 	sub.w	r1, r1, #776	; 0x308
 8007f20:	e9c1 2300 	strd	r2, r3, [r1]
    Ss[4] = s[1];
 8007f24:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007f28:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8007f2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007f30:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007f34:	f5a1 7142 	sub.w	r1, r1, #776	; 0x308
 8007f38:	e9c1 2308 	strd	r2, r3, [r1, #32]
    Ss[8] = s[2];
 8007f3c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007f40:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8007f44:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007f48:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8007f4c:	f5a1 7142 	sub.w	r1, r1, #776	; 0x308
 8007f50:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    for (b_j = 0; b_j < 9; b_j++) {
 8007f54:	2300      	movs	r3, #0
 8007f56:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8007f5a:	e022      	b.n	8007fa2 <SoC_Estimation_UKF_2RC_for_MCU_step+0xca2>
      Ss[b_j] = sqrt(Ss[b_j]);
 8007f5c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007f60:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 8007f64:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	4413      	add	r3, r2
 8007f6c:	ed93 7b00 	vldr	d7, [r3]
 8007f70:	eeb0 0a47 	vmov.f32	s0, s14
 8007f74:	eef0 0a67 	vmov.f32	s1, s15
 8007f78:	f009 f858 	bl	801102c <sqrt>
 8007f7c:	eeb0 7a40 	vmov.f32	s14, s0
 8007f80:	eef0 7a60 	vmov.f32	s15, s1
 8007f84:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007f88:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 8007f8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	4413      	add	r3, r2
 8007f94:	ed83 7b00 	vstr	d7, [r3]
    for (b_j = 0; b_j < 9; b_j++) {
 8007f98:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8007fa2:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8007fa6:	2b08      	cmp	r3, #8
 8007fa8:	ddd8      	ble.n	8007f5c <SoC_Estimation_UKF_2RC_for_MCU_step+0xc5c>
    }

    for (i = 0; i < 3; i++) {
 8007faa:	2300      	movs	r3, #0
 8007fac:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8007fb0:	e0cd      	b.n	800814e <SoC_Estimation_UKF_2RC_for_MCU_step+0xe4e>
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8007fb8:	e0bf      	b.n	800813a <SoC_Estimation_UKF_2RC_for_MCU_step+0xe3a>
        b_j = 3 * iAcol + i;
 8007fba:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8007fc8:	4413      	add	r3, r2
 8007fca:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
        R[b_j] = 0.0;
 8007fce:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007fd2:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8007fd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	18d1      	adds	r1, r2, r3
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	f04f 0300 	mov.w	r3, #0
 8007fe6:	e9c1 2300 	strd	r2, r3, [r1]
        R[b_j] += Ss[3 * i] * R_0[iAcol];
 8007fea:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8007fee:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8007ff2:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ffe:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008002:	4613      	mov	r3, r2
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	4413      	add	r3, r2
 8008008:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800800c:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	4413      	add	r3, r2
 8008014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008018:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800801c:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8008020:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8008024:	00db      	lsls	r3, r3, #3
 8008026:	4413      	add	r3, r2
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f7f8 fae4 	bl	80005f8 <__aeabi_dmul>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4640      	mov	r0, r8
 8008036:	4649      	mov	r1, r9
 8008038:	f7f8 f928 	bl	800028c <__adddf3>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8008044:	f5a1 701e 	sub.w	r0, r1, #632	; 0x278
 8008048:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 800804c:	00c9      	lsls	r1, r1, #3
 800804e:	4401      	add	r1, r0
 8008050:	e9c1 2300 	strd	r2, r3, [r1]
        R[b_j] += Ss[3 * i + 1] * R_0[iAcol + 3];
 8008054:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008058:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 800805c:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008060:	00db      	lsls	r3, r3, #3
 8008062:	4413      	add	r3, r2
 8008064:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008068:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 800806c:	4613      	mov	r3, r2
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	4413      	add	r3, r2
 8008072:	3301      	adds	r3, #1
 8008074:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8008078:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	4413      	add	r3, r2
 8008080:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008084:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8008088:	3303      	adds	r3, #3
 800808a:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800808e:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	4413      	add	r3, r2
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 faad 	bl	80005f8 <__aeabi_dmul>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	f7f8 f8f1 	bl	800028c <__adddf3>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80080b2:	f5a1 701e 	sub.w	r0, r1, #632	; 0x278
 80080b6:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80080ba:	00c9      	lsls	r1, r1, #3
 80080bc:	4401      	add	r1, r0
 80080be:	e9c1 2300 	strd	r2, r3, [r1]
        R[b_j] += Ss[3 * i + 2] * R_0[iAcol + 6];
 80080c2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80080c6:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 80080ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	4413      	add	r3, r2
 80080d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080d6:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 80080da:	4613      	mov	r3, r2
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	4413      	add	r3, r2
 80080e0:	3302      	adds	r3, #2
 80080e2:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80080e6:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	4413      	add	r3, r2
 80080ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080f2:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80080f6:	3306      	adds	r3, #6
 80080f8:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80080fc:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	4413      	add	r3, r2
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	f7f8 fa76 	bl	80005f8 <__aeabi_dmul>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4640      	mov	r0, r8
 8008112:	4649      	mov	r1, r9
 8008114:	f7f8 f8ba 	bl	800028c <__adddf3>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8008120:	f5a1 701e 	sub.w	r0, r1, #632	; 0x278
 8008124:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8008128:	00c9      	lsls	r1, r1, #3
 800812a:	4401      	add	r1, r0
 800812c:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8008130:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8008134:	3301      	adds	r3, #1
 8008136:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800813a:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800813e:	2b02      	cmp	r3, #2
 8008140:	f77f af3b 	ble.w	8007fba <SoC_Estimation_UKF_2RC_for_MCU_step+0xcba>
    for (i = 0; i < 3; i++) {
 8008144:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008148:	3301      	adds	r3, #1
 800814a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800814e:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008152:	2b02      	cmp	r3, #2
 8008154:	f77f af2d 	ble.w	8007fb2 <SoC_Estimation_UKF_2RC_for_MCU_step+0xcb2>
      }
    }

    errorCondition = true;
 8008158:	2301      	movs	r3, #1
 800815a:	f887 3372 	strb.w	r3, [r7, #882]	; 0x372
    iAcol = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
    exitg2 = false;
 8008164:	2300      	movs	r3, #0
 8008166:	f887 3371 	strb.w	r3, [r7, #881]	; 0x371
    while ((!exitg2) && (iAcol < 3)) {
 800816a:	e046      	b.n	80081fa <SoC_Estimation_UKF_2RC_for_MCU_step+0xefa>
      int32_T exitg1;
      i = iAcol + 1;
 800816c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8008170:	3301      	adds	r3, #1
 8008172:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
      do {
        exitg1 = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
        if (i + 1 < 4) {
 800817c:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008180:	2b02      	cmp	r3, #2
 8008182:	dc27      	bgt.n	80081d4 <SoC_Estimation_UKF_2RC_for_MCU_step+0xed4>
          if (!(R[3 * iAcol + i] == 0.0)) {
 8008184:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8008188:	4613      	mov	r3, r2
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	441a      	add	r2, r3
 800818e:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008192:	4413      	add	r3, r2
 8008194:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8008198:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	4413      	add	r3, r2
 80081a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081a4:	f04f 0200 	mov.w	r2, #0
 80081a8:	f04f 0300 	mov.w	r3, #0
 80081ac:	f7f8 fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d106      	bne.n	80081c4 <SoC_Estimation_UKF_2RC_for_MCU_step+0xec4>
            errorCondition = false;
 80081b6:	2300      	movs	r3, #0
 80081b8:	f887 3372 	strb.w	r3, [r7, #882]	; 0x372
            exitg1 = 1;
 80081bc:	2301      	movs	r3, #1
 80081be:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80081c2:	e00f      	b.n	80081e4 <SoC_Estimation_UKF_2RC_for_MCU_step+0xee4>
          } else {
            i++;
 80081c4:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80081c8:	3301      	adds	r3, #1
 80081ca:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 80081ce:	e009      	b.n	80081e4 <SoC_Estimation_UKF_2RC_for_MCU_step+0xee4>
 80081d0:	20000210 	.word	0x20000210
          }
        } else {
          iAcol++;
 80081d4:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80081d8:	3301      	adds	r3, #1
 80081da:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
          exitg1 = 2;
 80081de:	2302      	movs	r3, #2
 80081e0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
        }
      } while (exitg1 == 0);
 80081e4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d0c4      	beq.n	8008176 <SoC_Estimation_UKF_2RC_for_MCU_step+0xe76>

      if (exitg1 == 1) {
 80081ec:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d102      	bne.n	80081fa <SoC_Estimation_UKF_2RC_for_MCU_step+0xefa>
        exitg2 = true;
 80081f4:	2301      	movs	r3, #1
 80081f6:	f887 3371 	strb.w	r3, [r7, #881]	; 0x371
    while ((!exitg2) && (iAcol < 3)) {
 80081fa:	f897 3371 	ldrb.w	r3, [r7, #881]	; 0x371
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d103      	bne.n	800820a <SoC_Estimation_UKF_2RC_for_MCU_step+0xf0a>
 8008202:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8008206:	2b02      	cmp	r3, #2
 8008208:	ddb0      	ble.n	800816c <SoC_Estimation_UKF_2RC_for_MCU_step+0xe6c>
      }
    }

    if (!errorCondition) {
 800820a:	f897 3372 	ldrb.w	r3, [r7, #882]	; 0x372
 800820e:	2b00      	cmp	r3, #0
 8008210:	d110      	bne.n	8008234 <SoC_Estimation_UKF_2RC_for_MCU_step+0xf34>
      memcpy(&R_0[0], &R[0], 9U * sizeof(real_T));
 8008212:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8008216:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800821a:	2248      	movs	r2, #72	; 0x48
 800821c:	4618      	mov	r0, r3
 800821e:	f004 fc61 	bl	800cae4 <memcpy>
      qr_zNlMH7mU(R_0, Pxy_0, R);
 8008222:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008226:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800822a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800822e:	4618      	mov	r0, r3
 8008230:	f7fa f928 	bl	8002484 <qr_zNlMH7mU>
    }
  }

  for (i = 0; i < 3; i++) {
 8008234:	2300      	movs	r3, #0
 8008236:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800823a:	e06c      	b.n	8008316 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1016>
    rtDW.P_f[3 * i] = R[i];
 800823c:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008240:	4613      	mov	r3, r2
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	1899      	adds	r1, r3, r2
 8008246:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800824a:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 800824e:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	4413      	add	r3, r2
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	48ad      	ldr	r0, [pc, #692]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 800825c:	00c9      	lsls	r1, r1, #3
 800825e:	4401      	add	r1, r0
 8008260:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.P_f[3 * i + 1] = R[i + 3];
 8008264:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008268:	1cd8      	adds	r0, r3, #3
 800826a:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 800826e:	4613      	mov	r3, r2
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	4413      	add	r3, r2
 8008274:	1c59      	adds	r1, r3, #1
 8008276:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800827a:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 800827e:	00c3      	lsls	r3, r0, #3
 8008280:	4413      	add	r3, r2
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	48a2      	ldr	r0, [pc, #648]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 8008288:	00c9      	lsls	r1, r1, #3
 800828a:	4401      	add	r1, r0
 800828c:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.P_f[3 * i + 2] = R[i + 6];
 8008290:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008294:	1d98      	adds	r0, r3, #6
 8008296:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 800829a:	4613      	mov	r3, r2
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	4413      	add	r3, r2
 80082a0:	1c99      	adds	r1, r3, #2
 80082a2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80082a6:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 80082aa:	00c3      	lsls	r3, r0, #3
 80082ac:	4413      	add	r3, r2
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	4897      	ldr	r0, [pc, #604]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 80082b4:	00c9      	lsls	r1, r1, #3
 80082b6:	4401      	add	r1, r0
 80082b8:	e9c1 2300 	strd	r2, r3, [r1]

    /* DataStoreWrite: '<S7>/Data Store WriteX' */
    rtDW.x[i] += K[i] * rtb_Product;
 80082bc:	4a94      	ldr	r2, [pc, #592]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 80082be:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80082c2:	3309      	adds	r3, #9
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	4413      	add	r3, r2
 80082c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082cc:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80082d0:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 80082d4:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	4413      	add	r3, r2
 80082dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082e0:	f107 0310 	add.w	r3, r7, #16
 80082e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082e8:	f7f8 f986 	bl	80005f8 <__aeabi_dmul>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	4640      	mov	r0, r8
 80082f2:	4649      	mov	r1, r9
 80082f4:	f7f7 ffca 	bl	800028c <__adddf3>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4884      	ldr	r0, [pc, #528]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 80082fe:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8008302:	3109      	adds	r1, #9
 8008304:	00c9      	lsls	r1, r1, #3
 8008306:	4401      	add	r1, r0
 8008308:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 800830c:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008310:	3301      	adds	r3, #1
 8008312:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008316:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800831a:	2b02      	cmp	r3, #2
 800831c:	dd8e      	ble.n	800823c <SoC_Estimation_UKF_2RC_for_MCU_step+0xf3c>
  /* End of Outputs for SubSystem: '<S5>/Correct1' */

  /* Saturate: '<Root>/Saturation' incorporates:
   *  DataStoreRead: '<S9>/Data Store Read'
   */
  if (rtDW.x[0] > 1.0) {
 800831e:	4b7c      	ldr	r3, [pc, #496]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 8008320:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8008324:	f04f 0200 	mov.w	r2, #0
 8008328:	4b7a      	ldr	r3, [pc, #488]	; (8008514 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1214>)
 800832a:	f7f8 fbf5 	bl	8000b18 <__aeabi_dcmpgt>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d006      	beq.n	8008342 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1042>
    /* Outport: '<Root>/SoCEstimatedUKF' */
    rtY.SoCEstimatedUKF = 1.0;
 8008334:	4978      	ldr	r1, [pc, #480]	; (8008518 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1218>)
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	4b76      	ldr	r3, [pc, #472]	; (8008514 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1214>)
 800833c:	e9c1 2300 	strd	r2, r3, [r1]
 8008340:	e019      	b.n	8008376 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1076>
  } else if (rtDW.x[0] < 0.0) {
 8008342:	4b73      	ldr	r3, [pc, #460]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 8008344:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8008348:	f04f 0200 	mov.w	r2, #0
 800834c:	f04f 0300 	mov.w	r3, #0
 8008350:	f7f8 fbc4 	bl	8000adc <__aeabi_dcmplt>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d007      	beq.n	800836a <SoC_Estimation_UKF_2RC_for_MCU_step+0x106a>
    /* Outport: '<Root>/SoCEstimatedUKF' */
    rtY.SoCEstimatedUKF = 0.0;
 800835a:	496f      	ldr	r1, [pc, #444]	; (8008518 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1218>)
 800835c:	f04f 0200 	mov.w	r2, #0
 8008360:	f04f 0300 	mov.w	r3, #0
 8008364:	e9c1 2300 	strd	r2, r3, [r1]
 8008368:	e005      	b.n	8008376 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1076>
  } else {
    /* Outport: '<Root>/SoCEstimatedUKF' */
    rtY.SoCEstimatedUKF = rtDW.x[0];
 800836a:	4b69      	ldr	r3, [pc, #420]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 800836c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008370:	4969      	ldr	r1, [pc, #420]	; (8008518 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1218>)
 8008372:	e9c1 2300 	strd	r2, r3, [r1]
  /* End of Saturate: '<Root>/Saturation' */

  /* Saturate: '<S1>/Saturation' incorporates:
   *  DataStoreRead: '<S9>/Data Store Read'
   */
  if (rtDW.x[0] > 1.0) {
 8008376:	4b66      	ldr	r3, [pc, #408]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 8008378:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800837c:	f04f 0200 	mov.w	r2, #0
 8008380:	4b64      	ldr	r3, [pc, #400]	; (8008514 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1214>)
 8008382:	f7f8 fbc9 	bl	8000b18 <__aeabi_dcmpgt>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d008      	beq.n	800839e <SoC_Estimation_UKF_2RC_for_MCU_step+0x109e>
    rtb_Product = 1.0;
 800838c:	f107 0310 	add.w	r3, r7, #16
 8008390:	4619      	mov	r1, r3
 8008392:	f04f 0200 	mov.w	r2, #0
 8008396:	4b5f      	ldr	r3, [pc, #380]	; (8008514 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1214>)
 8008398:	e941 2302 	strd	r2, r3, [r1, #-8]
 800839c:	e01c      	b.n	80083d8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x10d8>
  } else if (rtDW.x[0] < 0.0) {
 800839e:	4b5c      	ldr	r3, [pc, #368]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 80083a0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80083a4:	f04f 0200 	mov.w	r2, #0
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	f7f8 fb96 	bl	8000adc <__aeabi_dcmplt>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d009      	beq.n	80083ca <SoC_Estimation_UKF_2RC_for_MCU_step+0x10ca>
    rtb_Product = 0.0;
 80083b6:	f107 0310 	add.w	r3, r7, #16
 80083ba:	4619      	mov	r1, r3
 80083bc:	f04f 0200 	mov.w	r2, #0
 80083c0:	f04f 0300 	mov.w	r3, #0
 80083c4:	e941 2302 	strd	r2, r3, [r1, #-8]
 80083c8:	e006      	b.n	80083d8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x10d8>
  } else {
    rtb_Product = rtDW.x[0];
 80083ca:	4b51      	ldr	r3, [pc, #324]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 80083cc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80083d0:	f107 0110 	add.w	r1, r7, #16
 80083d4:	e941 2302 	strd	r2, r3, [r1, #-8]
   *  Lookup_n-D: '<S1>/Em Table'
   *  Lookup_n-D: '<S1>/R0 Table'
   *  Product: '<S1>/Product'
   *  Sum: '<S1>/Add1'
   */
  rtY.voltageEstimatedUKF = ((look1_binlx(rtb_Product, rtCP_EmTable_bp01Data_f,
 80083d8:	f107 0310 	add.w	r3, r7, #16
 80083dc:	ed13 7b02 	vldr	d7, [r3, #-8]
 80083e0:	2207      	movs	r2, #7
 80083e2:	494e      	ldr	r1, [pc, #312]	; (800851c <SoC_Estimation_UKF_2RC_for_MCU_step+0x121c>)
 80083e4:	484e      	ldr	r0, [pc, #312]	; (8008520 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1220>)
 80083e6:	eeb0 0a47 	vmov.f32	s0, s14
 80083ea:	eef0 0a67 	vmov.f32	s1, s15
 80083ee:	f7f9 faad 	bl	800194c <look1_binlx>
 80083f2:	ec59 8b10 	vmov	r8, r9, d0
    rtCP_EmTable_tableData_o, 7U) - look1_binlx(rtb_Product,
 80083f6:	f107 0310 	add.w	r3, r7, #16
 80083fa:	ed13 7b02 	vldr	d7, [r3, #-8]
 80083fe:	2207      	movs	r2, #7
 8008400:	4948      	ldr	r1, [pc, #288]	; (8008524 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1224>)
 8008402:	4847      	ldr	r0, [pc, #284]	; (8008520 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1220>)
 8008404:	eeb0 0a47 	vmov.f32	s0, s14
 8008408:	eef0 0a67 	vmov.f32	s1, s15
 800840c:	f7f9 fa9e 	bl	800194c <look1_binlx>
 8008410:	ec51 0b10 	vmov	r0, r1, d0
    rtCP_R0Table_bp01Data_c, rtCP_R0Table_tableData_n, 7U) * rtU.current) -
 8008414:	4b44      	ldr	r3, [pc, #272]	; (8008528 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1228>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f7f8 f8ed 	bl	80005f8 <__aeabi_dmul>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
    rtCP_EmTable_tableData_o, 7U) - look1_binlx(rtb_Product,
 8008422:	4640      	mov	r0, r8
 8008424:	4649      	mov	r1, r9
 8008426:	f7f7 ff2f 	bl	8000288 <__aeabi_dsub>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	4610      	mov	r0, r2
 8008430:	4619      	mov	r1, r3
    rtDW.x[1]) - rtDW.x[2];
 8008432:	4b37      	ldr	r3, [pc, #220]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 8008434:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
    rtCP_R0Table_bp01Data_c, rtCP_R0Table_tableData_n, 7U) * rtU.current) -
 8008438:	f7f7 ff26 	bl	8000288 <__aeabi_dsub>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4610      	mov	r0, r2
 8008442:	4619      	mov	r1, r3
    rtDW.x[1]) - rtDW.x[2];
 8008444:	4b32      	ldr	r3, [pc, #200]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 8008446:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800844a:	f7f7 ff1d 	bl	8000288 <__aeabi_dsub>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
  rtY.voltageEstimatedUKF = ((look1_binlx(rtb_Product, rtCP_EmTable_bp01Data_f,
 8008452:	4931      	ldr	r1, [pc, #196]	; (8008518 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1218>)
 8008454:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Outport: '<Root>/SoCMeasuredUKF' incorporates:
   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'
   *  Gain: '<Root>/Convert to SOC1'
   */
  rtY.SoCMeasuredUKF = 0.2 * rtDW.DiscreteTimeIntegrator_DSTATE;
 8008458:	4b2d      	ldr	r3, [pc, #180]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 800845a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800845e:	a328      	add	r3, pc, #160	; (adr r3, 8008500 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1200>)
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	f7f8 f8c8 	bl	80005f8 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	492a      	ldr	r1, [pc, #168]	; (8008518 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1218>)
 800846e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  /* MATLAB Function: '<S8>/Predict' incorporates:
   *  Constant: '<S5>/Q'
   *  DataStoreRead: '<S8>/Data Store ReadX'
   *  DataStoreWrite: '<S8>/Data Store WriteP'
   */
  batteryStateFcn(rtDW.x, b_c);
 8008472:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008476:	4619      	mov	r1, r3
 8008478:	482c      	ldr	r0, [pc, #176]	; (800852c <SoC_Estimation_UKF_2RC_for_MCU_step+0x122c>)
 800847a:	f7fe fa49 	bl	8006910 <batteryStateFcn>
  for (i = 0; i < 9; i++) {
 800847e:	2300      	movs	r3, #0
 8008480:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008484:	e031      	b.n	80084ea <SoC_Estimation_UKF_2RC_for_MCU_step+0x11ea>
    temp = 1.7320508075688772 * rtDW.P_f[i];
 8008486:	4a22      	ldr	r2, [pc, #136]	; (8008510 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1210>)
 8008488:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	4413      	add	r3, r2
 8008490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008494:	a31c      	add	r3, pc, #112	; (adr r3, 8008508 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1208>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f7f8 f8ad 	bl	80005f8 <__aeabi_dmul>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4639      	mov	r1, r7
 80084a4:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[i] = temp;
 80084a8:	463b      	mov	r3, r7
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 80084b2:	00c9      	lsls	r1, r1, #3
 80084b4:	f501 7164 	add.w	r1, r1, #912	; 0x390
 80084b8:	4439      	add	r1, r7
 80084ba:	39c8      	subs	r1, #200	; 0xc8
 80084bc:	e9c1 2300 	strd	r2, r3, [r1]
    X2state[i + 9] = -temp;
 80084c0:	463b      	mov	r3, r7
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 80084ca:	3109      	adds	r1, #9
 80084cc:	4614      	mov	r4, r2
 80084ce:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80084d2:	00cb      	lsls	r3, r1, #3
 80084d4:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80084d8:	443b      	add	r3, r7
 80084da:	3bc8      	subs	r3, #200	; 0xc8
 80084dc:	e9c3 4500 	strd	r4, r5, [r3]
  for (i = 0; i < 9; i++) {
 80084e0:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80084e4:	3301      	adds	r3, #1
 80084e6:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 80084ea:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	ddc9      	ble.n	8008486 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1186>
  }

  for (i = 0; i < 6; i++) {
 80084f2:	2300      	movs	r3, #0
 80084f4:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 80084f8:	e082      	b.n	8008600 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1300>
 80084fa:	bf00      	nop
 80084fc:	f3af 8000 	nop.w
 8008500:	9999999a 	.word	0x9999999a
 8008504:	3fc99999 	.word	0x3fc99999
 8008508:	e8584caa 	.word	0xe8584caa
 800850c:	3ffbb67a 	.word	0x3ffbb67a
 8008510:	20000228 	.word	0x20000228
 8008514:	3ff00000 	.word	0x3ff00000
 8008518:	200002a0 	.word	0x200002a0
 800851c:	080112a8 	.word	0x080112a8
 8008520:	080112e8 	.word	0x080112e8
 8008524:	080113e8 	.word	0x080113e8
 8008528:	20000290 	.word	0x20000290
 800852c:	20000270 	.word	0x20000270
    X2state[3 * i] += rtDW.x[0];
 8008530:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008534:	4613      	mov	r3, r2
 8008536:	005b      	lsls	r3, r3, #1
 8008538:	4413      	add	r3, r2
 800853a:	00db      	lsls	r3, r3, #3
 800853c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008540:	443b      	add	r3, r7
 8008542:	3bc8      	subs	r3, #200	; 0xc8
 8008544:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008548:	4bcb      	ldr	r3, [pc, #812]	; (8008878 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1578>)
 800854a:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800854e:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008552:	4613      	mov	r3, r2
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	189e      	adds	r6, r3, r2
 8008558:	4622      	mov	r2, r4
 800855a:	462b      	mov	r3, r5
 800855c:	f7f7 fe96 	bl	800028c <__adddf3>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	00f1      	lsls	r1, r6, #3
 8008566:	f501 7164 	add.w	r1, r1, #912	; 0x390
 800856a:	4439      	add	r1, r7
 800856c:	39c8      	subs	r1, #200	; 0xc8
 800856e:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol = 3 * i + 1;
 8008572:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008576:	4613      	mov	r3, r2
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	4413      	add	r3, r2
 800857c:	3301      	adds	r3, #1
 800857e:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
    X2state[iAcol] += rtDW.x[1];
 8008582:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800858c:	443b      	add	r3, r7
 800858e:	3bc8      	subs	r3, #200	; 0xc8
 8008590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008594:	4bb8      	ldr	r3, [pc, #736]	; (8008878 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1578>)
 8008596:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800859a:	f7f7 fe77 	bl	800028c <__adddf3>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 80085a6:	00c9      	lsls	r1, r1, #3
 80085a8:	f501 7164 	add.w	r1, r1, #912	; 0x390
 80085ac:	4439      	add	r1, r7
 80085ae:	39c8      	subs	r1, #200	; 0xc8
 80085b0:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol = 3 * i + 2;
 80085b4:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 80085b8:	4613      	mov	r3, r2
 80085ba:	005b      	lsls	r3, r3, #1
 80085bc:	4413      	add	r3, r2
 80085be:	3302      	adds	r3, #2
 80085c0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
    X2state[iAcol] += rtDW.x[2];
 80085c4:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80085c8:	00db      	lsls	r3, r3, #3
 80085ca:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80085ce:	443b      	add	r3, r7
 80085d0:	3bc8      	subs	r3, #200	; 0xc8
 80085d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085d6:	4ba8      	ldr	r3, [pc, #672]	; (8008878 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1578>)
 80085d8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80085dc:	f7f7 fe56 	bl	800028c <__adddf3>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 80085e8:	00c9      	lsls	r1, r1, #3
 80085ea:	f501 7164 	add.w	r1, r1, #912	; 0x390
 80085ee:	4439      	add	r1, r7
 80085f0:	39c8      	subs	r1, #200	; 0xc8
 80085f2:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 6; i++) {
 80085f6:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80085fa:	3301      	adds	r3, #1
 80085fc:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008600:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008604:	2b05      	cmp	r3, #5
 8008606:	dd93      	ble.n	8008530 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1230>
  }

  for (i = 0; i < 6; i++) {
 8008608:	2300      	movs	r3, #0
 800860a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800860e:	e019      	b.n	8008644 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1344>
    batteryStateFcn(&X2state[3 * i], &Y2[3 * i]);
 8008610:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008614:	4613      	mov	r3, r2
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	4413      	add	r3, r2
 800861a:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 800861e:	00db      	lsls	r3, r3, #3
 8008620:	18d0      	adds	r0, r2, r3
 8008622:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008626:	4613      	mov	r3, r2
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	4413      	add	r3, r2
 800862c:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8008630:	00db      	lsls	r3, r3, #3
 8008632:	4413      	add	r3, r2
 8008634:	4619      	mov	r1, r3
 8008636:	f7fe f96b 	bl	8006910 <batteryStateFcn>
  for (i = 0; i < 6; i++) {
 800863a:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800863e:	3301      	adds	r3, #1
 8008640:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008644:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008648:	2b05      	cmp	r3, #5
 800864a:	dde1      	ble.n	8008610 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1310>
  }

  batteryStateFcn(rtDW.x, Pxy);
 800864c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008650:	4619      	mov	r1, r3
 8008652:	488a      	ldr	r0, [pc, #552]	; (800887c <SoC_Estimation_UKF_2RC_for_MCU_step+0x157c>)
 8008654:	f7fe f95c 	bl	8006910 <batteryStateFcn>
  rtb_xNew[0] = Pxy[0] * 0.0;
 8008658:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800865c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8008660:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008664:	f04f 0200 	mov.w	r2, #0
 8008668:	f04f 0300 	mov.w	r3, #0
 800866c:	f7f7 ffc4 	bl	80005f8 <__aeabi_dmul>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8008678:	f5a1 715a 	sub.w	r1, r1, #872	; 0x368
 800867c:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_xNew[1] = Pxy[1] * 0.0;
 8008680:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008684:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8008688:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	f04f 0300 	mov.w	r3, #0
 8008694:	f7f7 ffb0 	bl	80005f8 <__aeabi_dmul>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80086a0:	f5a1 715a 	sub.w	r1, r1, #872	; 0x368
 80086a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_xNew[2] = Pxy[2] * 0.0;
 80086a8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80086ac:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80086b0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80086b4:	f04f 0200 	mov.w	r2, #0
 80086b8:	f04f 0300 	mov.w	r3, #0
 80086bc:	f7f7 ff9c 	bl	80005f8 <__aeabi_dmul>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80086c8:	f5a1 715a 	sub.w	r1, r1, #872	; 0x368
 80086cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
  for (i = 0; i < 6; i++) {
 80086d0:	2300      	movs	r3, #0
 80086d2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 80086d6:	e078      	b.n	80087ca <SoC_Estimation_UKF_2RC_for_MCU_step+0x14ca>
    rtb_xNew[0] += Y2[3 * i] * 0.16666666666666666;
 80086d8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80086dc:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80086e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80086e4:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 80086e8:	4613      	mov	r3, r2
 80086ea:	005b      	lsls	r3, r3, #1
 80086ec:	4413      	add	r3, r2
 80086ee:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80086f2:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	4413      	add	r3, r2
 80086fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086fe:	a35c      	add	r3, pc, #368	; (adr r3, 8008870 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1570>)
 8008700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008704:	f7f7 ff78 	bl	80005f8 <__aeabi_dmul>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4620      	mov	r0, r4
 800870e:	4629      	mov	r1, r5
 8008710:	f7f7 fdbc 	bl	800028c <__adddf3>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	f507 7164 	add.w	r1, r7, #912	; 0x390
 800871c:	f5a1 715a 	sub.w	r1, r1, #872	; 0x368
 8008720:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_xNew[1] += Y2[3 * i + 1] * 0.16666666666666666;
 8008724:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008728:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800872c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8008730:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008734:	4613      	mov	r3, r2
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	4413      	add	r3, r2
 800873a:	3301      	adds	r3, #1
 800873c:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8008740:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	4413      	add	r3, r2
 8008748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800874c:	a348      	add	r3, pc, #288	; (adr r3, 8008870 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1570>)
 800874e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008752:	f7f7 ff51 	bl	80005f8 <__aeabi_dmul>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4620      	mov	r0, r4
 800875c:	4629      	mov	r1, r5
 800875e:	f7f7 fd95 	bl	800028c <__adddf3>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	f507 7164 	add.w	r1, r7, #912	; 0x390
 800876a:	f5a1 715a 	sub.w	r1, r1, #872	; 0x368
 800876e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    rtb_xNew[2] += Y2[3 * i + 2] * 0.16666666666666666;
 8008772:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008776:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800877a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800877e:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008782:	4613      	mov	r3, r2
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	4413      	add	r3, r2
 8008788:	3302      	adds	r3, #2
 800878a:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800878e:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	4413      	add	r3, r2
 8008796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800879a:	a335      	add	r3, pc, #212	; (adr r3, 8008870 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1570>)
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	f7f7 ff2a 	bl	80005f8 <__aeabi_dmul>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	4620      	mov	r0, r4
 80087aa:	4629      	mov	r1, r5
 80087ac:	f7f7 fd6e 	bl	800028c <__adddf3>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80087b8:	f5a1 715a 	sub.w	r1, r1, #872	; 0x368
 80087bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
  for (i = 0; i < 6; i++) {
 80087c0:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80087c4:	3301      	adds	r3, #1
 80087c6:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 80087ca:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80087ce:	2b05      	cmp	r3, #5
 80087d0:	dd82      	ble.n	80086d8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x13d8>
  }

  rtb_Product = Pxy[0] - rtb_xNew[0];
 80087d2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80087d6:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80087da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087de:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80087e2:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	f7f7 fd4d 	bl	8000288 <__aeabi_dsub>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	f107 0110 	add.w	r1, r7, #16
 80087f6:	e941 2302 	strd	r2, r3, [r1, #-8]
  Pxy[0] = rtb_Product;
 80087fa:	f107 0310 	add.w	r3, r7, #16
 80087fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008802:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8008806:	f5a1 714e 	sub.w	r1, r1, #824	; 0x338
 800880a:	e9c1 2300 	strd	r2, r3, [r1]
  Pxy[1] -= rtb_xNew[1];
 800880e:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008812:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8008816:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800881a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800881e:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8008822:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008826:	f7f7 fd2f 	bl	8000288 <__aeabi_dsub>
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8008832:	f5a1 714e 	sub.w	r1, r1, #824	; 0x338
 8008836:	e9c1 2302 	strd	r2, r3, [r1, #8]
  Pxy[2] -= rtb_xNew[2];
 800883a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800883e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8008842:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008846:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800884a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800884e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008852:	f7f7 fd19 	bl	8000288 <__aeabi_dsub>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	f507 7164 	add.w	r1, r7, #912	; 0x390
 800885e:	f5a1 714e 	sub.w	r1, r1, #824	; 0x338
 8008862:	e9c1 2304 	strd	r2, r3, [r1, #16]
  for (i = 0; i < 6; i++) {
 8008866:	2300      	movs	r3, #0
 8008868:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800886c:	e07f      	b.n	800896e <SoC_Estimation_UKF_2RC_for_MCU_step+0x166e>
 800886e:	bf00      	nop
 8008870:	55555555 	.word	0x55555555
 8008874:	3fc55555 	.word	0x3fc55555
 8008878:	20000228 	.word	0x20000228
 800887c:	20000270 	.word	0x20000270
    Y2[3 * i] -= rtb_xNew[0];
 8008880:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008884:	4613      	mov	r3, r2
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	4413      	add	r3, r2
 800888a:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800888e:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	4413      	add	r3, r2
 8008896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800889a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800889e:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80088a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80088a6:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 80088aa:	4613      	mov	r3, r2
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	189e      	adds	r6, r3, r2
 80088b0:	4622      	mov	r2, r4
 80088b2:	462b      	mov	r3, r5
 80088b4:	f7f7 fce8 	bl	8000288 <__aeabi_dsub>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80088c0:	f5a1 70ac 	sub.w	r0, r1, #344	; 0x158
 80088c4:	00f1      	lsls	r1, r6, #3
 80088c6:	4401      	add	r1, r0
 80088c8:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol = 3 * i + 1;
 80088cc:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 80088d0:	4613      	mov	r3, r2
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	4413      	add	r3, r2
 80088d6:	3301      	adds	r3, #1
 80088d8:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
    Y2[iAcol] -= rtb_xNew[1];
 80088dc:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80088e0:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80088e4:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	4413      	add	r3, r2
 80088ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088f0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80088f4:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80088f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80088fc:	f7f7 fcc4 	bl	8000288 <__aeabi_dsub>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8008908:	f5a1 70ac 	sub.w	r0, r1, #344	; 0x158
 800890c:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8008910:	00c9      	lsls	r1, r1, #3
 8008912:	4401      	add	r1, r0
 8008914:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol = 3 * i + 2;
 8008918:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 800891c:	4613      	mov	r3, r2
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	4413      	add	r3, r2
 8008922:	3302      	adds	r3, #2
 8008924:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
    Y2[iAcol] -= rtb_xNew[2];
 8008928:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800892c:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8008930:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	4413      	add	r3, r2
 8008938:	e9d3 0100 	ldrd	r0, r1, [r3]
 800893c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008940:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8008944:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008948:	f7f7 fc9e 	bl	8000288 <__aeabi_dsub>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8008954:	f5a1 70ac 	sub.w	r0, r1, #344	; 0x158
 8008958:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 800895c:	00c9      	lsls	r1, r1, #3
 800895e:	4401      	add	r1, r0
 8008960:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 6; i++) {
 8008964:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008968:	3301      	adds	r3, #1
 800896a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800896e:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008972:	2b05      	cmp	r3, #5
 8008974:	dd84      	ble.n	8008880 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1580>
  }

  for (i = 0; i < 3; i++) {
 8008976:	2300      	movs	r3, #0
 8008978:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800897c:	e03b      	b.n	80089f6 <SoC_Estimation_UKF_2RC_for_MCU_step+0x16f6>
    for (iAcol = 0; iAcol < 6; iAcol++) {
 800897e:	2300      	movs	r3, #0
 8008980:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8008984:	e02e      	b.n	80089e4 <SoC_Estimation_UKF_2RC_for_MCU_step+0x16e4>
      tmp[iAcol + 6 * i] = Y2[3 * iAcol + i] * 0.408248290463863;
 8008986:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 800898a:	4613      	mov	r3, r2
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	441a      	add	r2, r3
 8008990:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008994:	4413      	add	r3, r2
 8008996:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800899a:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	4413      	add	r3, r2
 80089a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089a6:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 80089aa:	4613      	mov	r3, r2
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	4413      	add	r3, r2
 80089b0:	005b      	lsls	r3, r3, #1
 80089b2:	461a      	mov	r2, r3
 80089b4:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80089b8:	18d4      	adds	r4, r2, r3
 80089ba:	f20f 63a4 	addw	r3, pc, #1700	; 0x6a4
 80089be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c2:	f7f7 fe19 	bl	80005f8 <__aeabi_dmul>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	f507 7164 	add.w	r1, r7, #912	; 0x390
 80089ce:	f5a1 70f4 	sub.w	r0, r1, #488	; 0x1e8
 80089d2:	00e1      	lsls	r1, r4, #3
 80089d4:	4401      	add	r1, r0
 80089d6:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 6; iAcol++) {
 80089da:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80089de:	3301      	adds	r3, #1
 80089e0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 80089e4:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80089e8:	2b05      	cmp	r3, #5
 80089ea:	ddcc      	ble.n	8008986 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1686>
  for (i = 0; i < 3; i++) {
 80089ec:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80089f0:	3301      	adds	r3, #1
 80089f2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 80089f6:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	ddbf      	ble.n	800897e <SoC_Estimation_UKF_2RC_for_MCU_step+0x167e>
    }
  }

  qr_cqxNMU1I(tmp, X2state, R);
 80089fe:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008a02:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 8008a06:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7f9 f888 	bl	8001b20 <qr_cqxNMU1I>
  for (b_j = 0; b_j < 3; b_j++) {
 8008a10:	2300      	movs	r3, #0
 8008a12:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8008a16:	e037      	b.n	8008a88 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1788>
    if (1 - b_j >= 0) {
 8008a18:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008a1c:	f1c3 0301 	rsb	r3, r3, #1
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	db10      	blt.n	8008a46 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1746>
      memset(&R[(b_j << 2) + 1], 0, (uint32_T)((1 - b_j) + 1) * sizeof(real_T));
 8008a24:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008a30:	00db      	lsls	r3, r3, #3
 8008a32:	18d0      	adds	r0, r2, r3
 8008a34:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008a38:	f1c3 0302 	rsb	r3, r3, #2
 8008a3c:	00db      	lsls	r3, r3, #3
 8008a3e:	461a      	mov	r2, r3
 8008a40:	2100      	movs	r1, #0
 8008a42:	f004 f85d 	bl	800cb00 <memset>
    }

    b_c[b_j] = 0.0;
 8008a46:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008a4a:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8008a4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	18d1      	adds	r1, r2, r3
 8008a56:	f04f 0200 	mov.w	r2, #0
 8008a5a:	f04f 0300 	mov.w	r3, #0
 8008a5e:	e9c1 2300 	strd	r2, r3, [r1]
    K[b_j] = 0.0;
 8008a62:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008a66:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8008a6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008a6e:	00db      	lsls	r3, r3, #3
 8008a70:	18d1      	adds	r1, r2, r3
 8008a72:	f04f 0200 	mov.w	r2, #0
 8008a76:	f04f 0300 	mov.w	r3, #0
 8008a7a:	e9c1 2300 	strd	r2, r3, [r1]
  for (b_j = 0; b_j < 3; b_j++) {
 8008a7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008a82:	3301      	adds	r3, #1
 8008a84:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8008a88:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	ddc3      	ble.n	8008a18 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1718>
  }

  rotate_3AIOL9tK(R[0], rtb_Product, &b_c[0], &K[0], &R[0]);
 8008a90:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008a94:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8008a98:	ed93 7b00 	vldr	d7, [r3]
 8008a9c:	f107 0310 	add.w	r3, r7, #16
 8008aa0:	ed13 6b02 	vldr	d6, [r3, #-8]
 8008aa4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008aa8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8008aac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	eeb0 1a46 	vmov.f32	s2, s12
 8008ab6:	eef0 1a66 	vmov.f32	s3, s13
 8008aba:	eeb0 0a47 	vmov.f32	s0, s14
 8008abe:	eef0 0a67 	vmov.f32	s1, s15
 8008ac2:	f7fa fab7 	bl	8003034 <rotate_3AIOL9tK>
  for (b_j = 0; b_j < 2; b_j++) {
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8008acc:	e0d1      	b.n	8008c72 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1972>
    temp = Pxy[b_j + 1];
 8008ace:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8008ad8:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 8008adc:	00db      	lsls	r3, r3, #3
 8008ade:	4413      	add	r3, r2
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i <= b_j; i++) {
 8008aea:	2300      	movs	r3, #0
 8008aec:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008af0:	e078      	b.n	8008be4 <SoC_Estimation_UKF_2RC_for_MCU_step+0x18e4>
      absxk = b_c[i];
 8008af2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008af6:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8008afa:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	4413      	add	r3, r2
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	e9c7 23d8 	strd	r2, r3, [r7, #864]	; 0x360
      nrmx = K[i];
 8008b0a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008b0e:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8008b12:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008b16:	00db      	lsls	r3, r3, #3
 8008b18:	4413      	add	r3, r2
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
      rtb_Product = nrmx * temp;
 8008b22:	463b      	mov	r3, r7
 8008b24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b28:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8008b2c:	f7f7 fd64 	bl	80005f8 <__aeabi_dmul>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	f107 0110 	add.w	r1, r7, #16
 8008b38:	e941 2302 	strd	r2, r3, [r1, #-8]
      aoffset = (b_j + 1) * 3 + i;
 8008b3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	4613      	mov	r3, r2
 8008b44:	005b      	lsls	r3, r3, #1
 8008b46:	4413      	add	r3, r2
 8008b48:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
      scale = R[aoffset];
 8008b52:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008b56:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8008b5a:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	4413      	add	r3, r2
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
      temp = absxk * temp - scale * nrmx;
 8008b6a:	463b      	mov	r3, r7
 8008b6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b70:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8008b74:	f7f7 fd40 	bl	80005f8 <__aeabi_dmul>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4614      	mov	r4, r2
 8008b7e:	461d      	mov	r5, r3
 8008b80:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8008b84:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 8008b88:	f7f7 fd36 	bl	80005f8 <__aeabi_dmul>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4620      	mov	r0, r4
 8008b92:	4629      	mov	r1, r5
 8008b94:	f7f7 fb78 	bl	8000288 <__aeabi_dsub>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	e9c1 2300 	strd	r2, r3, [r1]
      R[aoffset] = scale * absxk + rtb_Product;
 8008ba2:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8008ba6:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 8008baa:	f7f7 fd25 	bl	80005f8 <__aeabi_dmul>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	f107 0310 	add.w	r3, r7, #16
 8008bba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bbe:	f7f7 fb65 	bl	800028c <__adddf3>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8008bca:	f5a1 701e 	sub.w	r0, r1, #632	; 0x278
 8008bce:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 8008bd2:	00c9      	lsls	r1, r1, #3
 8008bd4:	4401      	add	r1, r0
 8008bd6:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i <= b_j; i++) {
 8008bda:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008bde:	3301      	adds	r3, #1
 8008be0:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008be4:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008be8:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008bec:	429a      	cmp	r2, r3
 8008bee:	dd80      	ble.n	8008af2 <SoC_Estimation_UKF_2RC_for_MCU_step+0x17f2>
    }

    rotate_3AIOL9tK(R[(b_j + 3 * (b_j + 1)) + 1], temp, &b_c[b_j + 1], &K[b_j +
 8008bf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	441a      	add	r2, r3
 8008bfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008c00:	4413      	add	r3, r2
 8008c02:	3301      	adds	r3, #1
 8008c04:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8008c08:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	4413      	add	r3, r2
 8008c10:	ed93 7b00 	vldr	d7, [r3]
 8008c14:	463b      	mov	r3, r7
 8008c16:	ed93 6b00 	vldr	d6, [r3]
 8008c1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008c1e:	3301      	adds	r3, #1
 8008c20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008c24:	00db      	lsls	r3, r3, #3
 8008c26:	18d0      	adds	r0, r2, r3
 8008c28:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	18d1      	adds	r1, r2, r3
                    1], &R[(b_j + 3 * (b_j + 1)) + 1]);
 8008c36:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	005b      	lsls	r3, r3, #1
 8008c40:	441a      	add	r2, r3
 8008c42:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008c46:	4413      	add	r3, r2
 8008c48:	3301      	adds	r3, #1
    rotate_3AIOL9tK(R[(b_j + 3 * (b_j + 1)) + 1], temp, &b_c[b_j + 1], &K[b_j +
 8008c4a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	4413      	add	r3, r2
 8008c52:	461a      	mov	r2, r3
 8008c54:	eeb0 1a46 	vmov.f32	s2, s12
 8008c58:	eef0 1a66 	vmov.f32	s3, s13
 8008c5c:	eeb0 0a47 	vmov.f32	s0, s14
 8008c60:	eef0 0a67 	vmov.f32	s1, s15
 8008c64:	f7fa f9e6 	bl	8003034 <rotate_3AIOL9tK>
  for (b_j = 0; b_j < 2; b_j++) {
 8008c68:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8008c72:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	f77f af29 	ble.w	8008ace <SoC_Estimation_UKF_2RC_for_MCU_step+0x17ce>
  }

  for (i = 0; i < 3; i++) {
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008c82:	e04d      	b.n	8008d20 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1a20>
    R_0[3 * i] = R[i];
 8008c84:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008c88:	4613      	mov	r3, r2
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	1899      	adds	r1, r3, r2
 8008c8e:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008c92:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8008c96:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	4413      	add	r3, r2
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f507 7064 	add.w	r0, r7, #912	; 0x390
 8008ca6:	f5a0 7030 	sub.w	r0, r0, #704	; 0x2c0
 8008caa:	00c9      	lsls	r1, r1, #3
 8008cac:	4401      	add	r1, r0
 8008cae:	e9c1 2300 	strd	r2, r3, [r1]
    R_0[3 * i + 1] = R[i + 3];
 8008cb2:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008cb6:	1cd8      	adds	r0, r3, #3
 8008cb8:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	4413      	add	r3, r2
 8008cc2:	1c59      	adds	r1, r3, #1
 8008cc4:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008cc8:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8008ccc:	00c3      	lsls	r3, r0, #3
 8008cce:	4413      	add	r3, r2
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	f507 7064 	add.w	r0, r7, #912	; 0x390
 8008cd8:	f5a0 7030 	sub.w	r0, r0, #704	; 0x2c0
 8008cdc:	00c9      	lsls	r1, r1, #3
 8008cde:	4401      	add	r1, r0
 8008ce0:	e9c1 2300 	strd	r2, r3, [r1]
    R_0[3 * i + 2] = R[i + 6];
 8008ce4:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008ce8:	1d98      	adds	r0, r3, #6
 8008cea:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008cee:	4613      	mov	r3, r2
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	4413      	add	r3, r2
 8008cf4:	1c99      	adds	r1, r3, #2
 8008cf6:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008cfa:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8008cfe:	00c3      	lsls	r3, r0, #3
 8008d00:	4413      	add	r3, r2
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f507 7064 	add.w	r0, r7, #912	; 0x390
 8008d0a:	f5a0 7030 	sub.w	r0, r0, #704	; 0x2c0
 8008d0e:	00c9      	lsls	r1, r1, #3
 8008d10:	4401      	add	r1, r0
 8008d12:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 8008d16:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008d20:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	ddad      	ble.n	8008c84 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1984>
  }

  for (i = 0; i < 9; i++) {
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008d2e:	e026      	b.n	8008d7e <SoC_Estimation_UKF_2RC_for_MCU_step+0x1a7e>
    R[i] = R_0[i];
 8008d30:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008d34:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8008d38:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	4413      	add	r3, r2
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8008d48:	f5a1 701e 	sub.w	r0, r1, #632	; 0x278
 8008d4c:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8008d50:	00c9      	lsls	r1, r1, #3
 8008d52:	4401      	add	r1, r0
 8008d54:	e9c1 2300 	strd	r2, r3, [r1]
    Ss[i] = 0.0;
 8008d58:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008d5c:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 8008d60:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	18d1      	adds	r1, r2, r3
 8008d68:	f04f 0200 	mov.w	r2, #0
 8008d6c:	f04f 0300 	mov.w	r3, #0
 8008d70:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 9; i++) {
 8008d74:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008d78:	3301      	adds	r3, #1
 8008d7a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008d7e:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008d82:	2b08      	cmp	r3, #8
 8008d84:	ddd4      	ble.n	8008d30 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1a30>
  }

  Ss[0] = 1.0;
 8008d86:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008d8a:	f5a3 7142 	sub.w	r1, r3, #776	; 0x308
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	4bb1      	ldr	r3, [pc, #708]	; (8009058 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1d58>)
 8008d94:	e9c1 2300 	strd	r2, r3, [r1]
  Ss[4] = 1.0;
 8008d98:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008d9c:	f5a3 7142 	sub.w	r1, r3, #776	; 0x308
 8008da0:	f04f 0200 	mov.w	r2, #0
 8008da4:	4bac      	ldr	r3, [pc, #688]	; (8009058 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1d58>)
 8008da6:	e9c1 2308 	strd	r2, r3, [r1, #32]
  Ss[8] = 1.0;
 8008daa:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008dae:	f5a3 7142 	sub.w	r1, r3, #776	; 0x308
 8008db2:	f04f 0200 	mov.w	r2, #0
 8008db6:	4ba8      	ldr	r3, [pc, #672]	; (8009058 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1d58>)
 8008db8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8008dc2:	e08c      	b.n	8008ede <SoC_Estimation_UKF_2RC_for_MCU_step+0x1bde>
    b_j = iAcol * 3;
 8008dc4:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8008dc8:	4613      	mov	r3, r2
 8008dca:	005b      	lsls	r3, r3, #1
 8008dcc:	4413      	add	r3, r2
 8008dce:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
    for (i = 0; i < 3; i++) {
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008dd8:	e078      	b.n	8008ecc <SoC_Estimation_UKF_2RC_for_MCU_step+0x1bcc>
      aoffset = i * 3;
 8008dda:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008dde:	4613      	mov	r3, r2
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	4413      	add	r3, r2
 8008de4:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
      R_0[b_j + i] = (R[aoffset + 1] * Ss[iAcol + 3] + R[aoffset] * Ss[iAcol]) +
 8008de8:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8008dec:	3301      	adds	r3, #1
 8008dee:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8008df2:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	4413      	add	r3, r2
 8008dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dfe:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8008e02:	3303      	adds	r3, #3
 8008e04:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8008e08:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	4413      	add	r3, r2
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f7f7 fbf0 	bl	80005f8 <__aeabi_dmul>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4614      	mov	r4, r2
 8008e1e:	461d      	mov	r5, r3
 8008e20:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008e24:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8008e28:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	4413      	add	r3, r2
 8008e30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e34:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008e38:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 8008e3c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	4413      	add	r3, r2
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 fbd6 	bl	80005f8 <__aeabi_dmul>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4620      	mov	r0, r4
 8008e52:	4629      	mov	r1, r5
 8008e54:	f7f7 fa1a 	bl	800028c <__adddf3>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4690      	mov	r8, r2
 8008e5e:	4699      	mov	r9, r3
        R[aoffset + 2] * Ss[iAcol + 6];
 8008e60:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8008e64:	3302      	adds	r3, #2
 8008e66:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8008e6a:	f5a2 721e 	sub.w	r2, r2, #632	; 0x278
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	4413      	add	r3, r2
 8008e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e76:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8008e7a:	3306      	adds	r3, #6
 8008e7c:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8008e80:	f5a2 7242 	sub.w	r2, r2, #776	; 0x308
 8008e84:	00db      	lsls	r3, r3, #3
 8008e86:	4413      	add	r3, r2
 8008e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8c:	f7f7 fbb4 	bl	80005f8 <__aeabi_dmul>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4610      	mov	r0, r2
 8008e96:	4619      	mov	r1, r3
      R_0[b_j + i] = (R[aoffset + 1] * Ss[iAcol + 3] + R[aoffset] * Ss[iAcol]) +
 8008e98:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 8008e9c:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008ea0:	18d4      	adds	r4, r2, r3
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	f7f7 f9ef 	bl	800028c <__adddf3>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8008eb6:	f5a1 7030 	sub.w	r0, r1, #704	; 0x2c0
 8008eba:	00e1      	lsls	r1, r4, #3
 8008ebc:	4401      	add	r1, r0
 8008ebe:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 3; i++) {
 8008ec2:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008ecc:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	dd82      	ble.n	8008dda <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ada>
  for (iAcol = 0; iAcol < 3; iAcol++) {
 8008ed4:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8008ed8:	3301      	adds	r3, #1
 8008eda:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8008ede:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	f77f af6e 	ble.w	8008dc4 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ac4>
    }
  }

  for (i = 0; i < 3; i++) {
 8008ee8:	2300      	movs	r3, #0
 8008eea:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8008eee:	e09e      	b.n	800902e <SoC_Estimation_UKF_2RC_for_MCU_step+0x1d2e>
    Y2[6 * i] = R_0[3 * i];
 8008ef0:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	005b      	lsls	r3, r3, #1
 8008ef8:	1899      	adds	r1, r3, r2
 8008efa:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008efe:	4613      	mov	r3, r2
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	4413      	add	r3, r2
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	461c      	mov	r4, r3
 8008f08:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008f0c:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8008f10:	00cb      	lsls	r3, r1, #3
 8008f12:	4413      	add	r3, r2
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8008f1c:	f5a1 70ac 	sub.w	r0, r1, #344	; 0x158
 8008f20:	00e1      	lsls	r1, r4, #3
 8008f22:	4401      	add	r1, r0
 8008f24:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[6 * i + 3] = rtCP_Q_Value[i];
 8008f28:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	4413      	add	r3, r2
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	1cd9      	adds	r1, r3, #3
 8008f36:	4a49      	ldr	r2, [pc, #292]	; (800905c <SoC_Estimation_UKF_2RC_for_MCU_step+0x1d5c>)
 8008f38:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008f3c:	00db      	lsls	r3, r3, #3
 8008f3e:	4413      	add	r3, r2
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	f507 7064 	add.w	r0, r7, #912	; 0x390
 8008f48:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 8008f4c:	00c9      	lsls	r1, r1, #3
 8008f4e:	4401      	add	r1, r0
 8008f50:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[6 * i + 1] = R_0[3 * i + 1];
 8008f54:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008f58:	4613      	mov	r3, r2
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	4413      	add	r3, r2
 8008f5e:	1c58      	adds	r0, r3, #1
 8008f60:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008f64:	4613      	mov	r3, r2
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	4413      	add	r3, r2
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	1c59      	adds	r1, r3, #1
 8008f6e:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008f72:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8008f76:	00c3      	lsls	r3, r0, #3
 8008f78:	4413      	add	r3, r2
 8008f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7e:	f507 7064 	add.w	r0, r7, #912	; 0x390
 8008f82:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 8008f86:	00c9      	lsls	r1, r1, #3
 8008f88:	4401      	add	r1, r0
 8008f8a:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[6 * i + 4] = rtCP_Q_Value[i + 3];
 8008f8e:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008f92:	1cd8      	adds	r0, r3, #3
 8008f94:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008f98:	4613      	mov	r3, r2
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	4413      	add	r3, r2
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	1d19      	adds	r1, r3, #4
 8008fa2:	4a2e      	ldr	r2, [pc, #184]	; (800905c <SoC_Estimation_UKF_2RC_for_MCU_step+0x1d5c>)
 8008fa4:	00c3      	lsls	r3, r0, #3
 8008fa6:	4413      	add	r3, r2
 8008fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fac:	f507 7064 	add.w	r0, r7, #912	; 0x390
 8008fb0:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 8008fb4:	00c9      	lsls	r1, r1, #3
 8008fb6:	4401      	add	r1, r0
 8008fb8:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[6 * i + 2] = R_0[3 * i + 2];
 8008fbc:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	4413      	add	r3, r2
 8008fc6:	1c98      	adds	r0, r3, #2
 8008fc8:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8008fcc:	4613      	mov	r3, r2
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	4413      	add	r3, r2
 8008fd2:	005b      	lsls	r3, r3, #1
 8008fd4:	1c99      	adds	r1, r3, #2
 8008fd6:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008fda:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8008fde:	00c3      	lsls	r3, r0, #3
 8008fe0:	4413      	add	r3, r2
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	f507 7064 	add.w	r0, r7, #912	; 0x390
 8008fea:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 8008fee:	00c9      	lsls	r1, r1, #3
 8008ff0:	4401      	add	r1, r0
 8008ff2:	e9c1 2300 	strd	r2, r3, [r1]
    Y2[6 * i + 5] = rtCP_Q_Value[i + 6];
 8008ff6:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8008ffa:	1d98      	adds	r0, r3, #6
 8008ffc:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8009000:	4613      	mov	r3, r2
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	4413      	add	r3, r2
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	1d59      	adds	r1, r3, #5
 800900a:	4a14      	ldr	r2, [pc, #80]	; (800905c <SoC_Estimation_UKF_2RC_for_MCU_step+0x1d5c>)
 800900c:	00c3      	lsls	r3, r0, #3
 800900e:	4413      	add	r3, r2
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	f507 7064 	add.w	r0, r7, #912	; 0x390
 8009018:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 800901c:	00c9      	lsls	r1, r1, #3
 800901e:	4401      	add	r1, r0
 8009020:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 8009024:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8009028:	3301      	adds	r3, #1
 800902a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800902e:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8009032:	2b02      	cmp	r3, #2
 8009034:	f77f af5c 	ble.w	8008ef0 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1bf0>
  }

  qr_cqxNMU1I(Y2, X2state, R);
 8009038:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800903c:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 8009040:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8009044:	4618      	mov	r0, r3
 8009046:	f7f8 fd6b 	bl	8001b20 <qr_cqxNMU1I>
  for (i = 0; i < 3; i++) {
 800904a:	2300      	movs	r3, #0
 800904c:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8009050:	e061      	b.n	8009116 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1e16>
 8009052:	bf00      	nop
 8009054:	f3af 8000 	nop.w
 8009058:	3ff00000 	.word	0x3ff00000
 800905c:	08011260 	.word	0x08011260
 8009060:	700c2c3e 	.word	0x700c2c3e
 8009064:	3fda20bd 	.word	0x3fda20bd
    rtDW.P_f[3 * i] = R[i];
 8009068:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 800906c:	4613      	mov	r3, r2
 800906e:	005b      	lsls	r3, r3, #1
 8009070:	1899      	adds	r1, r3, r2
 8009072:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8009076:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 800907a:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	4413      	add	r3, r2
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	4850      	ldr	r0, [pc, #320]	; (80091c8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ec8>)
 8009088:	00c9      	lsls	r1, r1, #3
 800908a:	4401      	add	r1, r0
 800908c:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.P_f[3 * i + 1] = R[i + 3];
 8009090:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8009094:	1cd8      	adds	r0, r3, #3
 8009096:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 800909a:	4613      	mov	r3, r2
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	4413      	add	r3, r2
 80090a0:	1c59      	adds	r1, r3, #1
 80090a2:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80090a6:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 80090aa:	00c3      	lsls	r3, r0, #3
 80090ac:	4413      	add	r3, r2
 80090ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b2:	4845      	ldr	r0, [pc, #276]	; (80091c8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ec8>)
 80090b4:	00c9      	lsls	r1, r1, #3
 80090b6:	4401      	add	r1, r0
 80090b8:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.P_f[3 * i + 2] = R[i + 6];
 80090bc:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80090c0:	1d98      	adds	r0, r3, #6
 80090c2:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 80090c6:	4613      	mov	r3, r2
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	4413      	add	r3, r2
 80090cc:	1c99      	adds	r1, r3, #2
 80090ce:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80090d2:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 80090d6:	00c3      	lsls	r3, r0, #3
 80090d8:	4413      	add	r3, r2
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	483a      	ldr	r0, [pc, #232]	; (80091c8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ec8>)
 80090e0:	00c9      	lsls	r1, r1, #3
 80090e2:	4401      	add	r1, r0
 80090e4:	e9c1 2300 	strd	r2, r3, [r1]

    /* DataStoreWrite: '<S8>/Data Store WriteX' incorporates:
     *  DataStoreWrite: '<S8>/Data Store WriteP'
     */
    rtDW.x[i] = rtb_xNew[i];
 80090e8:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80090ec:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 80090f0:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80090f4:	00db      	lsls	r3, r3, #3
 80090f6:	4413      	add	r3, r2
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	4832      	ldr	r0, [pc, #200]	; (80091c8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ec8>)
 80090fe:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8009102:	3109      	adds	r1, #9
 8009104:	00c9      	lsls	r1, r1, #3
 8009106:	4401      	add	r1, r0
 8009108:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 800910c:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8009110:	3301      	adds	r3, #1
 8009112:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8009116:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800911a:	2b02      	cmp	r3, #2
 800911c:	dda4      	ble.n	8009068 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1d68>

  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' incorporates:
   *  Gain: '<Root>/Convert to Ah1'
   *  Inport: '<Root>/current'
   */
  rtDW.DiscreteTimeIntegrator_DSTATE += -0.00027777777777777778 * rtU.current *
 800911e:	4b2a      	ldr	r3, [pc, #168]	; (80091c8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ec8>)
 8009120:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8009124:	4b29      	ldr	r3, [pc, #164]	; (80091cc <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ecc>)
 8009126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800912a:	a323      	add	r3, pc, #140	; (adr r3, 80091b8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1eb8>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	f7f7 fa62 	bl	80005f8 <__aeabi_dmul>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4610      	mov	r0, r2
 800913a:	4619      	mov	r1, r3
 800913c:	a320      	add	r3, pc, #128	; (adr r3, 80091c0 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ec0>)
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f7f7 fa59 	bl	80005f8 <__aeabi_dmul>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4620      	mov	r0, r4
 800914c:	4629      	mov	r1, r5
 800914e:	f7f7 f89d 	bl	800028c <__adddf3>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	491c      	ldr	r1, [pc, #112]	; (80091c8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ec8>)
 8009158:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    0.1;
  if (rtDW.DiscreteTimeIntegrator_DSTATE >= 5.0) {
 800915c:	4b1a      	ldr	r3, [pc, #104]	; (80091c8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ec8>)
 800915e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8009162:	f04f 0200 	mov.w	r2, #0
 8009166:	4b1a      	ldr	r3, [pc, #104]	; (80091d0 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ed0>)
 8009168:	f7f7 fccc 	bl	8000b04 <__aeabi_dcmpge>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d006      	beq.n	8009180 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1e80>
    rtDW.DiscreteTimeIntegrator_DSTATE = 5.0;
 8009172:	4915      	ldr	r1, [pc, #84]	; (80091c8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ec8>)
 8009174:	f04f 0200 	mov.w	r2, #0
 8009178:	4b15      	ldr	r3, [pc, #84]	; (80091d0 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ed0>)
 800917a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
  } else if (rtDW.DiscreteTimeIntegrator_DSTATE <= 0.0) {
    rtDW.DiscreteTimeIntegrator_DSTATE = 0.0;
  }

  /* End of Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' */
}
 800917e:	e013      	b.n	80091a8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ea8>
  } else if (rtDW.DiscreteTimeIntegrator_DSTATE <= 0.0) {
 8009180:	4b11      	ldr	r3, [pc, #68]	; (80091c8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ec8>)
 8009182:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8009186:	f04f 0200 	mov.w	r2, #0
 800918a:	f04f 0300 	mov.w	r3, #0
 800918e:	f7f7 fcaf 	bl	8000af0 <__aeabi_dcmple>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d100      	bne.n	800919a <SoC_Estimation_UKF_2RC_for_MCU_step+0x1e9a>
}
 8009198:	e006      	b.n	80091a8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ea8>
    rtDW.DiscreteTimeIntegrator_DSTATE = 0.0;
 800919a:	490b      	ldr	r1, [pc, #44]	; (80091c8 <SoC_Estimation_UKF_2RC_for_MCU_step+0x1ec8>)
 800919c:	f04f 0200 	mov.w	r2, #0
 80091a0:	f04f 0300 	mov.w	r3, #0
 80091a4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 80091a8:	bf00      	nop
 80091aa:	f507 7765 	add.w	r7, r7, #916	; 0x394
 80091ae:	46bd      	mov	sp, r7
 80091b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091b4:	f3af 8000 	nop.w
 80091b8:	789abcdf 	.word	0x789abcdf
 80091bc:	bf323456 	.word	0xbf323456
 80091c0:	9999999a 	.word	0x9999999a
 80091c4:	3fb99999 	.word	0x3fb99999
 80091c8:	20000228 	.word	0x20000228
 80091cc:	20000290 	.word	0x20000290
 80091d0:	40140000 	.word	0x40140000

080091d4 <SoC_Estimation_UKF_2RC_for_MCU_initialize>:

/* Model initialize function */
void SoC_Estimation_UKF_2RC_for_MCU_initialize(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 80091d8:	2008      	movs	r0, #8
 80091da:	f7fa f96d 	bl	80034b8 <rt_InitInfAndNaN>

  /* Start for DataStoreMemory: '<S5>/DataStoreMemory - P' */
  memcpy(&rtDW.P_f[0], &rtCP_DataStoreMemoryP_InitialVa[0], 9U * sizeof(real_T));
 80091de:	2248      	movs	r2, #72	; 0x48
 80091e0:	490f      	ldr	r1, [pc, #60]	; (8009220 <SoC_Estimation_UKF_2RC_for_MCU_initialize+0x4c>)
 80091e2:	4810      	ldr	r0, [pc, #64]	; (8009224 <SoC_Estimation_UKF_2RC_for_MCU_initialize+0x50>)
 80091e4:	f003 fc7e 	bl	800cae4 <memcpy>

  /* Start for DataStoreMemory: '<S5>/DataStoreMemory - x' */
  rtDW.x[0] = 1.0;
 80091e8:	490e      	ldr	r1, [pc, #56]	; (8009224 <SoC_Estimation_UKF_2RC_for_MCU_initialize+0x50>)
 80091ea:	f04f 0200 	mov.w	r2, #0
 80091ee:	4b0e      	ldr	r3, [pc, #56]	; (8009228 <SoC_Estimation_UKF_2RC_for_MCU_initialize+0x54>)
 80091f0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  rtDW.x[1] = 0.0;
 80091f4:	490b      	ldr	r1, [pc, #44]	; (8009224 <SoC_Estimation_UKF_2RC_for_MCU_initialize+0x50>)
 80091f6:	f04f 0200 	mov.w	r2, #0
 80091fa:	f04f 0300 	mov.w	r3, #0
 80091fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  rtDW.x[2] = 0.0;
 8009202:	4908      	ldr	r1, [pc, #32]	; (8009224 <SoC_Estimation_UKF_2RC_for_MCU_initialize+0x50>)
 8009204:	f04f 0200 	mov.w	r2, #0
 8009208:	f04f 0300 	mov.w	r3, #0
 800920c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

  /* InitializeConditions for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' */
  rtDW.DiscreteTimeIntegrator_DSTATE = 5.0;
 8009210:	4904      	ldr	r1, [pc, #16]	; (8009224 <SoC_Estimation_UKF_2RC_for_MCU_initialize+0x50>)
 8009212:	f04f 0200 	mov.w	r2, #0
 8009216:	4b05      	ldr	r3, [pc, #20]	; (800922c <SoC_Estimation_UKF_2RC_for_MCU_initialize+0x58>)
 8009218:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 800921c:	bf00      	nop
 800921e:	bd80      	pop	{r7, pc}
 8009220:	08011428 	.word	0x08011428
 8009224:	20000228 	.word	0x20000228
 8009228:	3ff00000 	.word	0x3ff00000
 800922c:	40140000 	.word	0x40140000

08009230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009232:	b087      	sub	sp, #28
 8009234:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
  beat = HAL_GetTick();
 8009236:	f000 fbf3 	bl	8009a20 <HAL_GetTick>
 800923a:	4603      	mov	r3, r0
 800923c:	4a3e      	ldr	r2, [pc, #248]	; (8009338 <main+0x108>)
 800923e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009240:	f000 fb85 	bl	800994e <HAL_Init>

  /* USER CODE BEGIN Init */
  SoC_Estimation_UKF_2RC_for_MCU_initialize();
 8009244:	f7ff ffc6 	bl	80091d4 <SoC_Estimation_UKF_2RC_for_MCU_initialize>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009248:	f000 f892 	bl	8009370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800924c:	f000 f912 	bl	8009474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8009250:	f000 f8e0 	bl	8009414 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, rx_buffer, 1);
 8009254:	2201      	movs	r2, #1
 8009256:	4939      	ldr	r1, [pc, #228]	; (800933c <main+0x10c>)
 8009258:	4839      	ldr	r0, [pc, #228]	; (8009340 <main+0x110>)
 800925a:	f002 f959 	bl	800b510 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		Heartbeat();
 800925e:	f000 f98b 	bl	8009578 <Heartbeat>
		if (process_data == 1) {
 8009262:	4b38      	ldr	r3, [pc, #224]	; (8009344 <main+0x114>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d1f9      	bne.n	800925e <main+0x2e>
					// UART input data is ready to be processed
					start_time = HAL_GetTick();
 800926a:	f000 fbd9 	bl	8009a20 <HAL_GetTick>
 800926e:	4603      	mov	r3, r0
 8009270:	4a35      	ldr	r2, [pc, #212]	; (8009348 <main+0x118>)
 8009272:	6013      	str	r3, [r2, #0]
					token = strtok(input_data, ";");
 8009274:	4935      	ldr	r1, [pc, #212]	; (800934c <main+0x11c>)
 8009276:	4836      	ldr	r0, [pc, #216]	; (8009350 <main+0x120>)
 8009278:	f004 ff14 	bl	800e0a4 <strtok>
 800927c:	4603      	mov	r3, r0
 800927e:	4a35      	ldr	r2, [pc, #212]	; (8009354 <main+0x124>)
 8009280:	6013      	str	r3, [r2, #0]
					rtU.current = atof(token);
 8009282:	4b34      	ldr	r3, [pc, #208]	; (8009354 <main+0x124>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f003 fbff 	bl	800ca8a <atof>
 800928c:	eeb0 7a40 	vmov.f32	s14, s0
 8009290:	eef0 7a60 	vmov.f32	s15, s1
 8009294:	4b30      	ldr	r3, [pc, #192]	; (8009358 <main+0x128>)
 8009296:	ed83 7b00 	vstr	d7, [r3]
					while (token != NULL) {
 800929a:	e016      	b.n	80092ca <main+0x9a>
						token = strtok(NULL, " ");
 800929c:	492f      	ldr	r1, [pc, #188]	; (800935c <main+0x12c>)
 800929e:	2000      	movs	r0, #0
 80092a0:	f004 ff00 	bl	800e0a4 <strtok>
 80092a4:	4603      	mov	r3, r0
 80092a6:	4a2b      	ldr	r2, [pc, #172]	; (8009354 <main+0x124>)
 80092a8:	6013      	str	r3, [r2, #0]
						if (token != NULL) {
 80092aa:	4b2a      	ldr	r3, [pc, #168]	; (8009354 <main+0x124>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00b      	beq.n	80092ca <main+0x9a>
							rtU.voltage = atof(token);
 80092b2:	4b28      	ldr	r3, [pc, #160]	; (8009354 <main+0x124>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f003 fbe7 	bl	800ca8a <atof>
 80092bc:	eeb0 7a40 	vmov.f32	s14, s0
 80092c0:	eef0 7a60 	vmov.f32	s15, s1
 80092c4:	4b24      	ldr	r3, [pc, #144]	; (8009358 <main+0x128>)
 80092c6:	ed83 7b02 	vstr	d7, [r3, #8]
					while (token != NULL) {
 80092ca:	4b22      	ldr	r3, [pc, #136]	; (8009354 <main+0x124>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1e4      	bne.n	800929c <main+0x6c>
						}
					}
					SoC_Estimation_UKF_2RC_for_MCU_step();
 80092d2:	f7fe f815 	bl	8007300 <SoC_Estimation_UKF_2RC_for_MCU_step>
					elapsed_time = HAL_GetTick() - start_time;
 80092d6:	f000 fba3 	bl	8009a20 <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	4b1a      	ldr	r3, [pc, #104]	; (8009348 <main+0x118>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	4a1f      	ldr	r2, [pc, #124]	; (8009360 <main+0x130>)
 80092e4:	6013      	str	r3, [r2, #0]
					sprintf(output_data, "%ld;%.4f;%.4f;%.4f\r", elapsed_time, rtY.SoCEstimatedUKF, rtY.voltageEstimatedUKF, rtY.SoCMeasuredUKF);
 80092e6:	4b1e      	ldr	r3, [pc, #120]	; (8009360 <main+0x130>)
 80092e8:	681e      	ldr	r6, [r3, #0]
 80092ea:	4b1e      	ldr	r3, [pc, #120]	; (8009364 <main+0x134>)
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	491c      	ldr	r1, [pc, #112]	; (8009364 <main+0x134>)
 80092f2:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80092f6:	4c1b      	ldr	r4, [pc, #108]	; (8009364 <main+0x134>)
 80092f8:	e9d4 4504 	ldrd	r4, r5, [r4, #16]
 80092fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009304:	e9cd 2300 	strd	r2, r3, [sp]
 8009308:	4632      	mov	r2, r6
 800930a:	4917      	ldr	r1, [pc, #92]	; (8009368 <main+0x138>)
 800930c:	4817      	ldr	r0, [pc, #92]	; (800936c <main+0x13c>)
 800930e:	f004 f869 	bl	800d3e4 <siprintf>
					process_data = 0; //The input data has been processed
 8009312:	4b0c      	ldr	r3, [pc, #48]	; (8009344 <main+0x114>)
 8009314:	2200      	movs	r2, #0
 8009316:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, (uint8_t*) output_data, sizeof(output_data));
 8009318:	2232      	movs	r2, #50	; 0x32
 800931a:	4914      	ldr	r1, [pc, #80]	; (800936c <main+0x13c>)
 800931c:	4808      	ldr	r0, [pc, #32]	; (8009340 <main+0x110>)
 800931e:	f002 f889 	bl	800b434 <HAL_UART_Transmit_IT>
					memset(input_data, 0, strlen(input_data)); //clean input data
 8009322:	480b      	ldr	r0, [pc, #44]	; (8009350 <main+0x120>)
 8009324:	f7f6 ff54 	bl	80001d0 <strlen>
 8009328:	4603      	mov	r3, r0
 800932a:	461a      	mov	r2, r3
 800932c:	2100      	movs	r1, #0
 800932e:	4808      	ldr	r0, [pc, #32]	; (8009350 <main+0x120>)
 8009330:	f003 fbe6 	bl	800cb00 <memset>
		Heartbeat();
 8009334:	e793      	b.n	800925e <main+0x2e>
 8009336:	bf00      	nop
 8009338:	200003b8 	.word	0x200003b8
 800933c:	2000033c 	.word	0x2000033c
 8009340:	200002b8 	.word	0x200002b8
 8009344:	200003b4 	.word	0x200003b4
 8009348:	200003ac 	.word	0x200003ac
 800934c:	08011200 	.word	0x08011200
 8009350:	20000340 	.word	0x20000340
 8009354:	200003a8 	.word	0x200003a8
 8009358:	20000290 	.word	0x20000290
 800935c:	08011204 	.word	0x08011204
 8009360:	200003b0 	.word	0x200003b0
 8009364:	200002a0 	.word	0x200002a0
 8009368:	08011208 	.word	0x08011208
 800936c:	20000374 	.word	0x20000374

08009370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b096      	sub	sp, #88	; 0x58
 8009374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009376:	f107 0314 	add.w	r3, r7, #20
 800937a:	2244      	movs	r2, #68	; 0x44
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f003 fbbe 	bl	800cb00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009384:	463b      	mov	r3, r7
 8009386:	2200      	movs	r2, #0
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	605a      	str	r2, [r3, #4]
 800938c:	609a      	str	r2, [r3, #8]
 800938e:	60da      	str	r2, [r3, #12]
 8009390:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8009392:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009396:	f000 fe89 	bl	800a0ac <HAL_PWREx_ControlVoltageScaling>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80093a0:	f000 f904 	bl	80095ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80093a4:	2310      	movs	r3, #16
 80093a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80093a8:	2301      	movs	r3, #1
 80093aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80093b0:	2360      	movs	r3, #96	; 0x60
 80093b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80093b4:	2302      	movs	r3, #2
 80093b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80093b8:	2301      	movs	r3, #1
 80093ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80093bc:	2301      	movs	r3, #1
 80093be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80093c0:	2328      	movs	r3, #40	; 0x28
 80093c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80093c4:	2307      	movs	r3, #7
 80093c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80093c8:	2302      	movs	r3, #2
 80093ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80093cc:	2302      	movs	r3, #2
 80093ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80093d0:	f107 0314 	add.w	r3, r7, #20
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 febf 	bl	800a158 <HAL_RCC_OscConfig>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80093e0:	f000 f8e4 	bl	80095ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80093e4:	230f      	movs	r3, #15
 80093e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80093e8:	2303      	movs	r3, #3
 80093ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80093ec:	2300      	movs	r3, #0
 80093ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80093f0:	2300      	movs	r3, #0
 80093f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80093f4:	2300      	movs	r3, #0
 80093f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80093f8:	463b      	mov	r3, r7
 80093fa:	2104      	movs	r1, #4
 80093fc:	4618      	mov	r0, r3
 80093fe:	f001 fabf 	bl	800a980 <HAL_RCC_ClockConfig>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8009408:	f000 f8d0 	bl	80095ac <Error_Handler>
  }
}
 800940c:	bf00      	nop
 800940e:	3758      	adds	r7, #88	; 0x58
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009418:	4b14      	ldr	r3, [pc, #80]	; (800946c <MX_USART2_UART_Init+0x58>)
 800941a:	4a15      	ldr	r2, [pc, #84]	; (8009470 <MX_USART2_UART_Init+0x5c>)
 800941c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800941e:	4b13      	ldr	r3, [pc, #76]	; (800946c <MX_USART2_UART_Init+0x58>)
 8009420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009426:	4b11      	ldr	r3, [pc, #68]	; (800946c <MX_USART2_UART_Init+0x58>)
 8009428:	2200      	movs	r2, #0
 800942a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800942c:	4b0f      	ldr	r3, [pc, #60]	; (800946c <MX_USART2_UART_Init+0x58>)
 800942e:	2200      	movs	r2, #0
 8009430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009432:	4b0e      	ldr	r3, [pc, #56]	; (800946c <MX_USART2_UART_Init+0x58>)
 8009434:	2200      	movs	r2, #0
 8009436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009438:	4b0c      	ldr	r3, [pc, #48]	; (800946c <MX_USART2_UART_Init+0x58>)
 800943a:	220c      	movs	r2, #12
 800943c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800943e:	4b0b      	ldr	r3, [pc, #44]	; (800946c <MX_USART2_UART_Init+0x58>)
 8009440:	2200      	movs	r2, #0
 8009442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009444:	4b09      	ldr	r3, [pc, #36]	; (800946c <MX_USART2_UART_Init+0x58>)
 8009446:	2200      	movs	r2, #0
 8009448:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800944a:	4b08      	ldr	r3, [pc, #32]	; (800946c <MX_USART2_UART_Init+0x58>)
 800944c:	2200      	movs	r2, #0
 800944e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009450:	4b06      	ldr	r3, [pc, #24]	; (800946c <MX_USART2_UART_Init+0x58>)
 8009452:	2200      	movs	r2, #0
 8009454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009456:	4805      	ldr	r0, [pc, #20]	; (800946c <MX_USART2_UART_Init+0x58>)
 8009458:	f001 ff9e 	bl	800b398 <HAL_UART_Init>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8009462:	f000 f8a3 	bl	80095ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009466:	bf00      	nop
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	200002b8 	.word	0x200002b8
 8009470:	40004400 	.word	0x40004400

08009474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b088      	sub	sp, #32
 8009478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800947a:	f107 030c 	add.w	r3, r7, #12
 800947e:	2200      	movs	r2, #0
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	605a      	str	r2, [r3, #4]
 8009484:	609a      	str	r2, [r3, #8]
 8009486:	60da      	str	r2, [r3, #12]
 8009488:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800948a:	4b1d      	ldr	r3, [pc, #116]	; (8009500 <MX_GPIO_Init+0x8c>)
 800948c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800948e:	4a1c      	ldr	r2, [pc, #112]	; (8009500 <MX_GPIO_Init+0x8c>)
 8009490:	f043 0304 	orr.w	r3, r3, #4
 8009494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009496:	4b1a      	ldr	r3, [pc, #104]	; (8009500 <MX_GPIO_Init+0x8c>)
 8009498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949a:	f003 0304 	and.w	r3, r3, #4
 800949e:	60bb      	str	r3, [r7, #8]
 80094a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80094a2:	4b17      	ldr	r3, [pc, #92]	; (8009500 <MX_GPIO_Init+0x8c>)
 80094a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a6:	4a16      	ldr	r2, [pc, #88]	; (8009500 <MX_GPIO_Init+0x8c>)
 80094a8:	f043 0301 	orr.w	r3, r3, #1
 80094ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80094ae:	4b14      	ldr	r3, [pc, #80]	; (8009500 <MX_GPIO_Init+0x8c>)
 80094b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	607b      	str	r3, [r7, #4]
 80094b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80094ba:	4b11      	ldr	r3, [pc, #68]	; (8009500 <MX_GPIO_Init+0x8c>)
 80094bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094be:	4a10      	ldr	r2, [pc, #64]	; (8009500 <MX_GPIO_Init+0x8c>)
 80094c0:	f043 0302 	orr.w	r3, r3, #2
 80094c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80094c6:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <MX_GPIO_Init+0x8c>)
 80094c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80094d2:	2200      	movs	r2, #0
 80094d4:	2108      	movs	r1, #8
 80094d6:	480b      	ldr	r0, [pc, #44]	; (8009504 <MX_GPIO_Init+0x90>)
 80094d8:	f000 fda8 	bl	800a02c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80094dc:	2308      	movs	r3, #8
 80094de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094e0:	2301      	movs	r3, #1
 80094e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094e8:	2300      	movs	r3, #0
 80094ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80094ec:	f107 030c 	add.w	r3, r7, #12
 80094f0:	4619      	mov	r1, r3
 80094f2:	4804      	ldr	r0, [pc, #16]	; (8009504 <MX_GPIO_Init+0x90>)
 80094f4:	f000 fc30 	bl	8009d58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80094f8:	bf00      	nop
 80094fa:	3720      	adds	r7, #32
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	40021000 	.word	0x40021000
 8009504:	48000400 	.word	0x48000400

08009508 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
	if (rx_buffer[0] != '\r') {
 8009510:	4b0a      	ldr	r3, [pc, #40]	; (800953c <HAL_UART_RxCpltCallback+0x34>)
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b0d      	cmp	r3, #13
 8009516:	d009      	beq.n	800952c <HAL_UART_RxCpltCallback+0x24>
		// Read the byte/char and add it to the data variable if there is no \r
		strcat(input_data, (char*) rx_buffer);
 8009518:	4908      	ldr	r1, [pc, #32]	; (800953c <HAL_UART_RxCpltCallback+0x34>)
 800951a:	4809      	ldr	r0, [pc, #36]	; (8009540 <HAL_UART_RxCpltCallback+0x38>)
 800951c:	f003 ff82 	bl	800d424 <strcat>
		HAL_UART_Receive_IT(&huart2, rx_buffer, 1); //we are still waiting for more data, we will continuo reading
 8009520:	2201      	movs	r2, #1
 8009522:	4906      	ldr	r1, [pc, #24]	; (800953c <HAL_UART_RxCpltCallback+0x34>)
 8009524:	4807      	ldr	r0, [pc, #28]	; (8009544 <HAL_UART_RxCpltCallback+0x3c>)
 8009526:	f001 fff3 	bl	800b510 <HAL_UART_Receive_IT>
	} else {
		//We get the line terminator, then process the data and send
		process_data = 1;
	}
}
 800952a:	e002      	b.n	8009532 <HAL_UART_RxCpltCallback+0x2a>
		process_data = 1;
 800952c:	4b06      	ldr	r3, [pc, #24]	; (8009548 <HAL_UART_RxCpltCallback+0x40>)
 800952e:	2201      	movs	r2, #1
 8009530:	701a      	strb	r2, [r3, #0]
}
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	2000033c 	.word	0x2000033c
 8009540:	20000340 	.word	0x20000340
 8009544:	200002b8 	.word	0x200002b8
 8009548:	200003b4 	.word	0x200003b4

0800954c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
	process_data = 0; // the input data has been processed and send
 8009554:	4b05      	ldr	r3, [pc, #20]	; (800956c <HAL_UART_TxCpltCallback+0x20>)
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, rx_buffer, 1);
 800955a:	2201      	movs	r2, #1
 800955c:	4904      	ldr	r1, [pc, #16]	; (8009570 <HAL_UART_TxCpltCallback+0x24>)
 800955e:	4805      	ldr	r0, [pc, #20]	; (8009574 <HAL_UART_TxCpltCallback+0x28>)
 8009560:	f001 ffd6 	bl	800b510 <HAL_UART_Receive_IT>
}
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	200003b4 	.word	0x200003b4
 8009570:	2000033c 	.word	0x2000033c
 8009574:	200002b8 	.word	0x200002b8

08009578 <Heartbeat>:

void Heartbeat(){
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - beat > 500){
 800957c:	f000 fa50 	bl	8009a20 <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	4b08      	ldr	r3, [pc, #32]	; (80095a4 <Heartbeat+0x2c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800958c:	d908      	bls.n	80095a0 <Heartbeat+0x28>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800958e:	2108      	movs	r1, #8
 8009590:	4805      	ldr	r0, [pc, #20]	; (80095a8 <Heartbeat+0x30>)
 8009592:	f000 fd63 	bl	800a05c <HAL_GPIO_TogglePin>
		beat = HAL_GetTick();
 8009596:	f000 fa43 	bl	8009a20 <HAL_GetTick>
 800959a:	4603      	mov	r3, r0
 800959c:	4a01      	ldr	r2, [pc, #4]	; (80095a4 <Heartbeat+0x2c>)
 800959e:	6013      	str	r3, [r2, #0]
	}
}
 80095a0:	bf00      	nop
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	200003b8 	.word	0x200003b8
 80095a8:	48000400 	.word	0x48000400

080095ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80095b0:	b672      	cpsid	i
}
 80095b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80095b4:	e7fe      	b.n	80095b4 <Error_Handler+0x8>
	...

080095b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095be:	4b0f      	ldr	r3, [pc, #60]	; (80095fc <HAL_MspInit+0x44>)
 80095c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095c2:	4a0e      	ldr	r2, [pc, #56]	; (80095fc <HAL_MspInit+0x44>)
 80095c4:	f043 0301 	orr.w	r3, r3, #1
 80095c8:	6613      	str	r3, [r2, #96]	; 0x60
 80095ca:	4b0c      	ldr	r3, [pc, #48]	; (80095fc <HAL_MspInit+0x44>)
 80095cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	607b      	str	r3, [r7, #4]
 80095d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80095d6:	4b09      	ldr	r3, [pc, #36]	; (80095fc <HAL_MspInit+0x44>)
 80095d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095da:	4a08      	ldr	r2, [pc, #32]	; (80095fc <HAL_MspInit+0x44>)
 80095dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095e0:	6593      	str	r3, [r2, #88]	; 0x58
 80095e2:	4b06      	ldr	r3, [pc, #24]	; (80095fc <HAL_MspInit+0x44>)
 80095e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	40021000 	.word	0x40021000

08009600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b09e      	sub	sp, #120	; 0x78
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009608:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800960c:	2200      	movs	r2, #0
 800960e:	601a      	str	r2, [r3, #0]
 8009610:	605a      	str	r2, [r3, #4]
 8009612:	609a      	str	r2, [r3, #8]
 8009614:	60da      	str	r2, [r3, #12]
 8009616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009618:	f107 0310 	add.w	r3, r7, #16
 800961c:	2254      	movs	r2, #84	; 0x54
 800961e:	2100      	movs	r1, #0
 8009620:	4618      	mov	r0, r3
 8009622:	f003 fa6d 	bl	800cb00 <memset>
  if(huart->Instance==USART2)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a2c      	ldr	r2, [pc, #176]	; (80096dc <HAL_UART_MspInit+0xdc>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d150      	bne.n	80096d2 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009630:	2302      	movs	r3, #2
 8009632:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009634:	2300      	movs	r3, #0
 8009636:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009638:	f107 0310 	add.w	r3, r7, #16
 800963c:	4618      	mov	r0, r3
 800963e:	f001 fbc3 	bl	800adc8 <HAL_RCCEx_PeriphCLKConfig>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009648:	f7ff ffb0 	bl	80095ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800964c:	4b24      	ldr	r3, [pc, #144]	; (80096e0 <HAL_UART_MspInit+0xe0>)
 800964e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009650:	4a23      	ldr	r2, [pc, #140]	; (80096e0 <HAL_UART_MspInit+0xe0>)
 8009652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009656:	6593      	str	r3, [r2, #88]	; 0x58
 8009658:	4b21      	ldr	r3, [pc, #132]	; (80096e0 <HAL_UART_MspInit+0xe0>)
 800965a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800965c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009660:	60fb      	str	r3, [r7, #12]
 8009662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009664:	4b1e      	ldr	r3, [pc, #120]	; (80096e0 <HAL_UART_MspInit+0xe0>)
 8009666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009668:	4a1d      	ldr	r2, [pc, #116]	; (80096e0 <HAL_UART_MspInit+0xe0>)
 800966a:	f043 0301 	orr.w	r3, r3, #1
 800966e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009670:	4b1b      	ldr	r3, [pc, #108]	; (80096e0 <HAL_UART_MspInit+0xe0>)
 8009672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	60bb      	str	r3, [r7, #8]
 800967a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800967c:	2304      	movs	r3, #4
 800967e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009680:	2302      	movs	r3, #2
 8009682:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009684:	2300      	movs	r3, #0
 8009686:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009688:	2303      	movs	r3, #3
 800968a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800968c:	2307      	movs	r3, #7
 800968e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009690:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009694:	4619      	mov	r1, r3
 8009696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800969a:	f000 fb5d 	bl	8009d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800969e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096a4:	2302      	movs	r3, #2
 80096a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096a8:	2300      	movs	r3, #0
 80096aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096ac:	2303      	movs	r3, #3
 80096ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80096b0:	2303      	movs	r3, #3
 80096b2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80096b8:	4619      	mov	r1, r3
 80096ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80096be:	f000 fb4b 	bl	8009d58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80096c2:	2200      	movs	r2, #0
 80096c4:	2100      	movs	r1, #0
 80096c6:	2026      	movs	r0, #38	; 0x26
 80096c8:	f000 fa91 	bl	8009bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80096cc:	2026      	movs	r0, #38	; 0x26
 80096ce:	f000 faaa 	bl	8009c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80096d2:	bf00      	nop
 80096d4:	3778      	adds	r7, #120	; 0x78
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	40004400 	.word	0x40004400
 80096e0:	40021000 	.word	0x40021000

080096e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80096e4:	b480      	push	{r7}
 80096e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80096e8:	e7fe      	b.n	80096e8 <NMI_Handler+0x4>

080096ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80096ea:	b480      	push	{r7}
 80096ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80096ee:	e7fe      	b.n	80096ee <HardFault_Handler+0x4>

080096f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80096f4:	e7fe      	b.n	80096f4 <MemManage_Handler+0x4>

080096f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80096f6:	b480      	push	{r7}
 80096f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80096fa:	e7fe      	b.n	80096fa <BusFault_Handler+0x4>

080096fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80096fc:	b480      	push	{r7}
 80096fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009700:	e7fe      	b.n	8009700 <UsageFault_Handler+0x4>

08009702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009702:	b480      	push	{r7}
 8009704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009706:	bf00      	nop
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009710:	b480      	push	{r7}
 8009712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009714:	bf00      	nop
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800971e:	b480      	push	{r7}
 8009720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009722:	bf00      	nop
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009730:	f000 f962 	bl	80099f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009734:	bf00      	nop
 8009736:	bd80      	pop	{r7, pc}

08009738 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800973c:	4802      	ldr	r0, [pc, #8]	; (8009748 <USART2_IRQHandler+0x10>)
 800973e:	f001 ff3d 	bl	800b5bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009742:	bf00      	nop
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	200002b8 	.word	0x200002b8

0800974c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
  return 1;
 8009750:	2301      	movs	r3, #1
}
 8009752:	4618      	mov	r0, r3
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <_kill>:

int _kill(int pid, int sig)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009766:	f003 f993 	bl	800ca90 <__errno>
 800976a:	4603      	mov	r3, r0
 800976c:	2216      	movs	r2, #22
 800976e:	601a      	str	r2, [r3, #0]
  return -1;
 8009770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <_exit>:

void _exit (int status)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009784:	f04f 31ff 	mov.w	r1, #4294967295
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff ffe7 	bl	800975c <_kill>
  while (1) {}    /* Make sure we hang here */
 800978e:	e7fe      	b.n	800978e <_exit+0x12>

08009790 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800979c:	2300      	movs	r3, #0
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	e00a      	b.n	80097b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80097a2:	f3af 8000 	nop.w
 80097a6:	4601      	mov	r1, r0
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	60ba      	str	r2, [r7, #8]
 80097ae:	b2ca      	uxtb	r2, r1
 80097b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	3301      	adds	r3, #1
 80097b6:	617b      	str	r3, [r7, #20]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	429a      	cmp	r2, r3
 80097be:	dbf0      	blt.n	80097a2 <_read+0x12>
  }

  return len;
 80097c0:	687b      	ldr	r3, [r7, #4]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3718      	adds	r7, #24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b086      	sub	sp, #24
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	60f8      	str	r0, [r7, #12]
 80097d2:	60b9      	str	r1, [r7, #8]
 80097d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097d6:	2300      	movs	r3, #0
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	e009      	b.n	80097f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	60ba      	str	r2, [r7, #8]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	3301      	adds	r3, #1
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	dbf1      	blt.n	80097dc <_write+0x12>
  }
  return len;
 80097f8:	687b      	ldr	r3, [r7, #4]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <_close>:

int _close(int file)
{
 8009802:	b480      	push	{r7}
 8009804:	b083      	sub	sp, #12
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800980a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800980e:	4618      	mov	r0, r3
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800982a:	605a      	str	r2, [r3, #4]
  return 0;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <_isatty>:

int _isatty(int file)
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009842:	2301      	movs	r3, #1
}
 8009844:	4618      	mov	r0, r3
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
	...

0800986c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009874:	4a14      	ldr	r2, [pc, #80]	; (80098c8 <_sbrk+0x5c>)
 8009876:	4b15      	ldr	r3, [pc, #84]	; (80098cc <_sbrk+0x60>)
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009880:	4b13      	ldr	r3, [pc, #76]	; (80098d0 <_sbrk+0x64>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d102      	bne.n	800988e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009888:	4b11      	ldr	r3, [pc, #68]	; (80098d0 <_sbrk+0x64>)
 800988a:	4a12      	ldr	r2, [pc, #72]	; (80098d4 <_sbrk+0x68>)
 800988c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800988e:	4b10      	ldr	r3, [pc, #64]	; (80098d0 <_sbrk+0x64>)
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4413      	add	r3, r2
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	429a      	cmp	r2, r3
 800989a:	d207      	bcs.n	80098ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800989c:	f003 f8f8 	bl	800ca90 <__errno>
 80098a0:	4603      	mov	r3, r0
 80098a2:	220c      	movs	r2, #12
 80098a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80098a6:	f04f 33ff 	mov.w	r3, #4294967295
 80098aa:	e009      	b.n	80098c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80098ac:	4b08      	ldr	r3, [pc, #32]	; (80098d0 <_sbrk+0x64>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80098b2:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <_sbrk+0x64>)
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4413      	add	r3, r2
 80098ba:	4a05      	ldr	r2, [pc, #20]	; (80098d0 <_sbrk+0x64>)
 80098bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80098be:	68fb      	ldr	r3, [r7, #12]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	20010000 	.word	0x20010000
 80098cc:	00000400 	.word	0x00000400
 80098d0:	200003bc 	.word	0x200003bc
 80098d4:	200003d8 	.word	0x200003d8

080098d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80098d8:	b480      	push	{r7}
 80098da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80098dc:	4b06      	ldr	r3, [pc, #24]	; (80098f8 <SystemInit+0x20>)
 80098de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e2:	4a05      	ldr	r2, [pc, #20]	; (80098f8 <SystemInit+0x20>)
 80098e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80098ec:	bf00      	nop
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	e000ed00 	.word	0xe000ed00

080098fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80098fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009934 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009900:	f7ff ffea 	bl	80098d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009904:	480c      	ldr	r0, [pc, #48]	; (8009938 <LoopForever+0x6>)
  ldr r1, =_edata
 8009906:	490d      	ldr	r1, [pc, #52]	; (800993c <LoopForever+0xa>)
  ldr r2, =_sidata
 8009908:	4a0d      	ldr	r2, [pc, #52]	; (8009940 <LoopForever+0xe>)
  movs r3, #0
 800990a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800990c:	e002      	b.n	8009914 <LoopCopyDataInit>

0800990e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800990e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009912:	3304      	adds	r3, #4

08009914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009918:	d3f9      	bcc.n	800990e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800991a:	4a0a      	ldr	r2, [pc, #40]	; (8009944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800991c:	4c0a      	ldr	r4, [pc, #40]	; (8009948 <LoopForever+0x16>)
  movs r3, #0
 800991e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009920:	e001      	b.n	8009926 <LoopFillZerobss>

08009922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009924:	3204      	adds	r2, #4

08009926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009928:	d3fb      	bcc.n	8009922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800992a:	f003 f8b7 	bl	800ca9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800992e:	f7ff fc7f 	bl	8009230 <main>

08009932 <LoopForever>:

LoopForever:
    b LoopForever
 8009932:	e7fe      	b.n	8009932 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009934:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8009938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800993c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8009940:	080119c0 	.word	0x080119c0
  ldr r2, =_sbss
 8009944:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8009948:	200003d4 	.word	0x200003d4

0800994c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800994c:	e7fe      	b.n	800994c <ADC1_IRQHandler>

0800994e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b082      	sub	sp, #8
 8009952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009958:	2003      	movs	r0, #3
 800995a:	f000 f93d 	bl	8009bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800995e:	2000      	movs	r0, #0
 8009960:	f000 f80e 	bl	8009980 <HAL_InitTick>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d002      	beq.n	8009970 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	71fb      	strb	r3, [r7, #7]
 800996e:	e001      	b.n	8009974 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009970:	f7ff fe22 	bl	80095b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009974:	79fb      	ldrb	r3, [r7, #7]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
	...

08009980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800998c:	4b17      	ldr	r3, [pc, #92]	; (80099ec <HAL_InitTick+0x6c>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d023      	beq.n	80099dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009994:	4b16      	ldr	r3, [pc, #88]	; (80099f0 <HAL_InitTick+0x70>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	4b14      	ldr	r3, [pc, #80]	; (80099ec <HAL_InitTick+0x6c>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	4619      	mov	r1, r3
 800999e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80099a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80099a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 f949 	bl	8009c42 <HAL_SYSTICK_Config>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10f      	bne.n	80099d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b0f      	cmp	r3, #15
 80099ba:	d809      	bhi.n	80099d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80099bc:	2200      	movs	r2, #0
 80099be:	6879      	ldr	r1, [r7, #4]
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295
 80099c4:	f000 f913 	bl	8009bee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80099c8:	4a0a      	ldr	r2, [pc, #40]	; (80099f4 <HAL_InitTick+0x74>)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	e007      	b.n	80099e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	73fb      	strb	r3, [r7, #15]
 80099d4:	e004      	b.n	80099e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	73fb      	strb	r3, [r7, #15]
 80099da:	e001      	b.n	80099e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20000008 	.word	0x20000008
 80099f0:	20000000 	.word	0x20000000
 80099f4:	20000004 	.word	0x20000004

080099f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80099f8:	b480      	push	{r7}
 80099fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <HAL_IncTick+0x20>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	461a      	mov	r2, r3
 8009a02:	4b06      	ldr	r3, [pc, #24]	; (8009a1c <HAL_IncTick+0x24>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4413      	add	r3, r2
 8009a08:	4a04      	ldr	r2, [pc, #16]	; (8009a1c <HAL_IncTick+0x24>)
 8009a0a:	6013      	str	r3, [r2, #0]
}
 8009a0c:	bf00      	nop
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20000008 	.word	0x20000008
 8009a1c:	200003c0 	.word	0x200003c0

08009a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009a20:	b480      	push	{r7}
 8009a22:	af00      	add	r7, sp, #0
  return uwTick;
 8009a24:	4b03      	ldr	r3, [pc, #12]	; (8009a34 <HAL_GetTick+0x14>)
 8009a26:	681b      	ldr	r3, [r3, #0]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	200003c0 	.word	0x200003c0

08009a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f003 0307 	and.w	r3, r3, #7
 8009a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a48:	4b0c      	ldr	r3, [pc, #48]	; (8009a7c <__NVIC_SetPriorityGrouping+0x44>)
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009a54:	4013      	ands	r3, r2
 8009a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009a6a:	4a04      	ldr	r2, [pc, #16]	; (8009a7c <__NVIC_SetPriorityGrouping+0x44>)
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	60d3      	str	r3, [r2, #12]
}
 8009a70:	bf00      	nop
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	e000ed00 	.word	0xe000ed00

08009a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009a80:	b480      	push	{r7}
 8009a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a84:	4b04      	ldr	r3, [pc, #16]	; (8009a98 <__NVIC_GetPriorityGrouping+0x18>)
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	0a1b      	lsrs	r3, r3, #8
 8009a8a:	f003 0307 	and.w	r3, r3, #7
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	e000ed00 	.word	0xe000ed00

08009a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	db0b      	blt.n	8009ac6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	f003 021f 	and.w	r2, r3, #31
 8009ab4:	4907      	ldr	r1, [pc, #28]	; (8009ad4 <__NVIC_EnableIRQ+0x38>)
 8009ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aba:	095b      	lsrs	r3, r3, #5
 8009abc:	2001      	movs	r0, #1
 8009abe:	fa00 f202 	lsl.w	r2, r0, r2
 8009ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009ac6:	bf00      	nop
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	e000e100 	.word	0xe000e100

08009ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	6039      	str	r1, [r7, #0]
 8009ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	db0a      	blt.n	8009b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	490c      	ldr	r1, [pc, #48]	; (8009b24 <__NVIC_SetPriority+0x4c>)
 8009af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009af6:	0112      	lsls	r2, r2, #4
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	440b      	add	r3, r1
 8009afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009b00:	e00a      	b.n	8009b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	4908      	ldr	r1, [pc, #32]	; (8009b28 <__NVIC_SetPriority+0x50>)
 8009b08:	79fb      	ldrb	r3, [r7, #7]
 8009b0a:	f003 030f 	and.w	r3, r3, #15
 8009b0e:	3b04      	subs	r3, #4
 8009b10:	0112      	lsls	r2, r2, #4
 8009b12:	b2d2      	uxtb	r2, r2
 8009b14:	440b      	add	r3, r1
 8009b16:	761a      	strb	r2, [r3, #24]
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	e000e100 	.word	0xe000e100
 8009b28:	e000ed00 	.word	0xe000ed00

08009b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b089      	sub	sp, #36	; 0x24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	f1c3 0307 	rsb	r3, r3, #7
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	bf28      	it	cs
 8009b4a:	2304      	movcs	r3, #4
 8009b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	3304      	adds	r3, #4
 8009b52:	2b06      	cmp	r3, #6
 8009b54:	d902      	bls.n	8009b5c <NVIC_EncodePriority+0x30>
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	3b03      	subs	r3, #3
 8009b5a:	e000      	b.n	8009b5e <NVIC_EncodePriority+0x32>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b60:	f04f 32ff 	mov.w	r2, #4294967295
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6a:	43da      	mvns	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	401a      	ands	r2, r3
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009b74:	f04f 31ff 	mov.w	r1, #4294967295
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b7e:	43d9      	mvns	r1, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b84:	4313      	orrs	r3, r2
         );
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3724      	adds	r7, #36	; 0x24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
	...

08009b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ba4:	d301      	bcc.n	8009baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e00f      	b.n	8009bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009baa:	4a0a      	ldr	r2, [pc, #40]	; (8009bd4 <SysTick_Config+0x40>)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009bb2:	210f      	movs	r1, #15
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb8:	f7ff ff8e 	bl	8009ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009bbc:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <SysTick_Config+0x40>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009bc2:	4b04      	ldr	r3, [pc, #16]	; (8009bd4 <SysTick_Config+0x40>)
 8009bc4:	2207      	movs	r2, #7
 8009bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	e000e010 	.word	0xe000e010

08009bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7ff ff29 	bl	8009a38 <__NVIC_SetPriorityGrouping>
}
 8009be6:	bf00      	nop
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b086      	sub	sp, #24
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	60b9      	str	r1, [r7, #8]
 8009bf8:	607a      	str	r2, [r7, #4]
 8009bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009c00:	f7ff ff3e 	bl	8009a80 <__NVIC_GetPriorityGrouping>
 8009c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	68b9      	ldr	r1, [r7, #8]
 8009c0a:	6978      	ldr	r0, [r7, #20]
 8009c0c:	f7ff ff8e 	bl	8009b2c <NVIC_EncodePriority>
 8009c10:	4602      	mov	r2, r0
 8009c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c16:	4611      	mov	r1, r2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff ff5d 	bl	8009ad8 <__NVIC_SetPriority>
}
 8009c1e:	bf00      	nop
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff ff31 	bl	8009a9c <__NVIC_EnableIRQ>
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff ffa2 	bl	8009b94 <SysTick_Config>
 8009c50:	4603      	mov	r3, r0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b085      	sub	sp, #20
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d008      	beq.n	8009c84 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2204      	movs	r2, #4
 8009c76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e022      	b.n	8009cca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f022 020e 	bic.w	r2, r2, #14
 8009c92:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0201 	bic.w	r2, r2, #1
 8009ca2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca8:	f003 021c 	and.w	r2, r3, #28
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8009cb6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d005      	beq.n	8009cfa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2204      	movs	r2, #4
 8009cf2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	73fb      	strb	r3, [r7, #15]
 8009cf8:	e029      	b.n	8009d4e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f022 020e 	bic.w	r2, r2, #14
 8009d08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0201 	bic.w	r2, r2, #1
 8009d18:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d1e:	f003 021c 	and.w	r2, r3, #28
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	2101      	movs	r1, #1
 8009d28:	fa01 f202 	lsl.w	r2, r1, r2
 8009d2c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	4798      	blx	r3
    }
  }
  return status;
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009d62:	2300      	movs	r3, #0
 8009d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d66:	e148      	b.n	8009ffa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	fa01 f303 	lsl.w	r3, r1, r3
 8009d74:	4013      	ands	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 813a 	beq.w	8009ff4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f003 0303 	and.w	r3, r3, #3
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d005      	beq.n	8009d98 <HAL_GPIO_Init+0x40>
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	f003 0303 	and.w	r3, r3, #3
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d130      	bne.n	8009dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	2203      	movs	r2, #3
 8009da4:	fa02 f303 	lsl.w	r3, r2, r3
 8009da8:	43db      	mvns	r3, r3
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	4013      	ands	r3, r2
 8009dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	68da      	ldr	r2, [r3, #12]
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	005b      	lsls	r3, r3, #1
 8009db8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009dce:	2201      	movs	r2, #1
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd6:	43db      	mvns	r3, r3
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	4013      	ands	r3, r2
 8009ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	091b      	lsrs	r3, r3, #4
 8009de4:	f003 0201 	and.w	r2, r3, #1
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	fa02 f303 	lsl.w	r3, r2, r3
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f003 0303 	and.w	r3, r3, #3
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	d017      	beq.n	8009e36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	2203      	movs	r2, #3
 8009e12:	fa02 f303 	lsl.w	r3, r2, r3
 8009e16:	43db      	mvns	r3, r3
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	689a      	ldr	r2, [r3, #8]
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f003 0303 	and.w	r3, r3, #3
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d123      	bne.n	8009e8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	08da      	lsrs	r2, r3, #3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	3208      	adds	r2, #8
 8009e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	220f      	movs	r2, #15
 8009e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e5e:	43db      	mvns	r3, r3
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	4013      	ands	r3, r2
 8009e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	691a      	ldr	r2, [r3, #16]
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	f003 0307 	and.w	r3, r3, #7
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	fa02 f303 	lsl.w	r3, r2, r3
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	08da      	lsrs	r2, r3, #3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	3208      	adds	r2, #8
 8009e84:	6939      	ldr	r1, [r7, #16]
 8009e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	005b      	lsls	r3, r3, #1
 8009e94:	2203      	movs	r2, #3
 8009e96:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9a:	43db      	mvns	r3, r3
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f003 0203 	and.w	r2, r3, #3
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f000 8094 	beq.w	8009ff4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ecc:	4b52      	ldr	r3, [pc, #328]	; (800a018 <HAL_GPIO_Init+0x2c0>)
 8009ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ed0:	4a51      	ldr	r2, [pc, #324]	; (800a018 <HAL_GPIO_Init+0x2c0>)
 8009ed2:	f043 0301 	orr.w	r3, r3, #1
 8009ed6:	6613      	str	r3, [r2, #96]	; 0x60
 8009ed8:	4b4f      	ldr	r3, [pc, #316]	; (800a018 <HAL_GPIO_Init+0x2c0>)
 8009eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	60bb      	str	r3, [r7, #8]
 8009ee2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009ee4:	4a4d      	ldr	r2, [pc, #308]	; (800a01c <HAL_GPIO_Init+0x2c4>)
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	089b      	lsrs	r3, r3, #2
 8009eea:	3302      	adds	r3, #2
 8009eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f003 0303 	and.w	r3, r3, #3
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	220f      	movs	r2, #15
 8009efc:	fa02 f303 	lsl.w	r3, r2, r3
 8009f00:	43db      	mvns	r3, r3
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	4013      	ands	r3, r2
 8009f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009f0e:	d00d      	beq.n	8009f2c <HAL_GPIO_Init+0x1d4>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a43      	ldr	r2, [pc, #268]	; (800a020 <HAL_GPIO_Init+0x2c8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d007      	beq.n	8009f28 <HAL_GPIO_Init+0x1d0>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a42      	ldr	r2, [pc, #264]	; (800a024 <HAL_GPIO_Init+0x2cc>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d101      	bne.n	8009f24 <HAL_GPIO_Init+0x1cc>
 8009f20:	2302      	movs	r3, #2
 8009f22:	e004      	b.n	8009f2e <HAL_GPIO_Init+0x1d6>
 8009f24:	2307      	movs	r3, #7
 8009f26:	e002      	b.n	8009f2e <HAL_GPIO_Init+0x1d6>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e000      	b.n	8009f2e <HAL_GPIO_Init+0x1d6>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	f002 0203 	and.w	r2, r2, #3
 8009f34:	0092      	lsls	r2, r2, #2
 8009f36:	4093      	lsls	r3, r2
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009f3e:	4937      	ldr	r1, [pc, #220]	; (800a01c <HAL_GPIO_Init+0x2c4>)
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	089b      	lsrs	r3, r3, #2
 8009f44:	3302      	adds	r3, #2
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009f4c:	4b36      	ldr	r3, [pc, #216]	; (800a028 <HAL_GPIO_Init+0x2d0>)
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	43db      	mvns	r3, r3
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	4013      	ands	r3, r2
 8009f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d003      	beq.n	8009f70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009f70:	4a2d      	ldr	r2, [pc, #180]	; (800a028 <HAL_GPIO_Init+0x2d0>)
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009f76:	4b2c      	ldr	r3, [pc, #176]	; (800a028 <HAL_GPIO_Init+0x2d0>)
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	43db      	mvns	r3, r3
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	4013      	ands	r3, r2
 8009f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009f9a:	4a23      	ldr	r2, [pc, #140]	; (800a028 <HAL_GPIO_Init+0x2d0>)
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009fa0:	4b21      	ldr	r3, [pc, #132]	; (800a028 <HAL_GPIO_Init+0x2d0>)
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	43db      	mvns	r3, r3
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4013      	ands	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009fc4:	4a18      	ldr	r2, [pc, #96]	; (800a028 <HAL_GPIO_Init+0x2d0>)
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009fca:	4b17      	ldr	r3, [pc, #92]	; (800a028 <HAL_GPIO_Init+0x2d0>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	43db      	mvns	r3, r3
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d003      	beq.n	8009fee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009fee:	4a0e      	ldr	r2, [pc, #56]	; (800a028 <HAL_GPIO_Init+0x2d0>)
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	fa22 f303 	lsr.w	r3, r2, r3
 800a004:	2b00      	cmp	r3, #0
 800a006:	f47f aeaf 	bne.w	8009d68 <HAL_GPIO_Init+0x10>
  }
}
 800a00a:	bf00      	nop
 800a00c:	bf00      	nop
 800a00e:	371c      	adds	r7, #28
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	40021000 	.word	0x40021000
 800a01c:	40010000 	.word	0x40010000
 800a020:	48000400 	.word	0x48000400
 800a024:	48000800 	.word	0x48000800
 800a028:	40010400 	.word	0x40010400

0800a02c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	807b      	strh	r3, [r7, #2]
 800a038:	4613      	mov	r3, r2
 800a03a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a03c:	787b      	ldrb	r3, [r7, #1]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d003      	beq.n	800a04a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a042:	887a      	ldrh	r2, [r7, #2]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a048:	e002      	b.n	800a050 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a04a:	887a      	ldrh	r2, [r7, #2]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	695b      	ldr	r3, [r3, #20]
 800a06c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a06e:	887a      	ldrh	r2, [r7, #2]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4013      	ands	r3, r2
 800a074:	041a      	lsls	r2, r3, #16
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	43d9      	mvns	r1, r3
 800a07a:	887b      	ldrh	r3, [r7, #2]
 800a07c:	400b      	ands	r3, r1
 800a07e:	431a      	orrs	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	619a      	str	r2, [r3, #24]
}
 800a084:	bf00      	nop
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a090:	b480      	push	{r7}
 800a092:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a094:	4b04      	ldr	r3, [pc, #16]	; (800a0a8 <HAL_PWREx_GetVoltageRange+0x18>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	40007000 	.word	0x40007000

0800a0ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0ba:	d130      	bne.n	800a11e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a0bc:	4b23      	ldr	r3, [pc, #140]	; (800a14c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a0c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0c8:	d038      	beq.n	800a13c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a0ca:	4b20      	ldr	r3, [pc, #128]	; (800a14c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a0d2:	4a1e      	ldr	r2, [pc, #120]	; (800a14c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a0da:	4b1d      	ldr	r3, [pc, #116]	; (800a150 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2232      	movs	r2, #50	; 0x32
 800a0e0:	fb02 f303 	mul.w	r3, r2, r3
 800a0e4:	4a1b      	ldr	r2, [pc, #108]	; (800a154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a0e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ea:	0c9b      	lsrs	r3, r3, #18
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0f0:	e002      	b.n	800a0f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0f8:	4b14      	ldr	r3, [pc, #80]	; (800a14c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a104:	d102      	bne.n	800a10c <HAL_PWREx_ControlVoltageScaling+0x60>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1f2      	bne.n	800a0f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a10c:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a10e:	695b      	ldr	r3, [r3, #20]
 800a110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a118:	d110      	bne.n	800a13c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e00f      	b.n	800a13e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a11e:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a12a:	d007      	beq.n	800a13c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a12c:	4b07      	ldr	r3, [pc, #28]	; (800a14c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a134:	4a05      	ldr	r2, [pc, #20]	; (800a14c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a13a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	40007000 	.word	0x40007000
 800a150:	20000000 	.word	0x20000000
 800a154:	431bde83 	.word	0x431bde83

0800a158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d102      	bne.n	800a16c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	f000 bc02 	b.w	800a970 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a16c:	4b96      	ldr	r3, [pc, #600]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	f003 030c 	and.w	r3, r3, #12
 800a174:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a176:	4b94      	ldr	r3, [pc, #592]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f003 0303 	and.w	r3, r3, #3
 800a17e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 0310 	and.w	r3, r3, #16
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 80e4 	beq.w	800a356 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d007      	beq.n	800a1a4 <HAL_RCC_OscConfig+0x4c>
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	2b0c      	cmp	r3, #12
 800a198:	f040 808b 	bne.w	800a2b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	f040 8087 	bne.w	800a2b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a1a4:	4b88      	ldr	r3, [pc, #544]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 0302 	and.w	r3, r3, #2
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <HAL_RCC_OscConfig+0x64>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e3d9      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a1a      	ldr	r2, [r3, #32]
 800a1c0:	4b81      	ldr	r3, [pc, #516]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0308 	and.w	r3, r3, #8
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d004      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x7e>
 800a1cc:	4b7e      	ldr	r3, [pc, #504]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1d4:	e005      	b.n	800a1e2 <HAL_RCC_OscConfig+0x8a>
 800a1d6:	4b7c      	ldr	r3, [pc, #496]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a1d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1dc:	091b      	lsrs	r3, r3, #4
 800a1de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d223      	bcs.n	800a22e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 fd8c 	bl	800ad08 <RCC_SetFlashLatencyFromMSIRange>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e3ba      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a1fa:	4b73      	ldr	r3, [pc, #460]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a72      	ldr	r2, [pc, #456]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a200:	f043 0308 	orr.w	r3, r3, #8
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	4b70      	ldr	r3, [pc, #448]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	496d      	ldr	r1, [pc, #436]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a214:	4313      	orrs	r3, r2
 800a216:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a218:	4b6b      	ldr	r3, [pc, #428]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	021b      	lsls	r3, r3, #8
 800a226:	4968      	ldr	r1, [pc, #416]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	604b      	str	r3, [r1, #4]
 800a22c:	e025      	b.n	800a27a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a22e:	4b66      	ldr	r3, [pc, #408]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a65      	ldr	r2, [pc, #404]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a234:	f043 0308 	orr.w	r3, r3, #8
 800a238:	6013      	str	r3, [r2, #0]
 800a23a:	4b63      	ldr	r3, [pc, #396]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	4960      	ldr	r1, [pc, #384]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a24c:	4b5e      	ldr	r3, [pc, #376]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	021b      	lsls	r3, r3, #8
 800a25a:	495b      	ldr	r1, [pc, #364]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a25c:	4313      	orrs	r3, r2
 800a25e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d109      	bne.n	800a27a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fd4c 	bl	800ad08 <RCC_SetFlashLatencyFromMSIRange>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d001      	beq.n	800a27a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e37a      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a27a:	f000 fc81 	bl	800ab80 <HAL_RCC_GetSysClockFreq>
 800a27e:	4602      	mov	r2, r0
 800a280:	4b51      	ldr	r3, [pc, #324]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	091b      	lsrs	r3, r3, #4
 800a286:	f003 030f 	and.w	r3, r3, #15
 800a28a:	4950      	ldr	r1, [pc, #320]	; (800a3cc <HAL_RCC_OscConfig+0x274>)
 800a28c:	5ccb      	ldrb	r3, [r1, r3]
 800a28e:	f003 031f 	and.w	r3, r3, #31
 800a292:	fa22 f303 	lsr.w	r3, r2, r3
 800a296:	4a4e      	ldr	r2, [pc, #312]	; (800a3d0 <HAL_RCC_OscConfig+0x278>)
 800a298:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a29a:	4b4e      	ldr	r3, [pc, #312]	; (800a3d4 <HAL_RCC_OscConfig+0x27c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7ff fb6e 	bl	8009980 <HAL_InitTick>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d052      	beq.n	800a354 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
 800a2b0:	e35e      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d032      	beq.n	800a320 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a2ba:	4b43      	ldr	r3, [pc, #268]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a42      	ldr	r2, [pc, #264]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a2c0:	f043 0301 	orr.w	r3, r3, #1
 800a2c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a2c6:	f7ff fbab 	bl	8009a20 <HAL_GetTick>
 800a2ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a2cc:	e008      	b.n	800a2e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a2ce:	f7ff fba7 	bl	8009a20 <HAL_GetTick>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d901      	bls.n	800a2e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e347      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a2e0:	4b39      	ldr	r3, [pc, #228]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d0f0      	beq.n	800a2ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a2ec:	4b36      	ldr	r3, [pc, #216]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a35      	ldr	r2, [pc, #212]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a2f2:	f043 0308 	orr.w	r3, r3, #8
 800a2f6:	6013      	str	r3, [r2, #0]
 800a2f8:	4b33      	ldr	r3, [pc, #204]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a1b      	ldr	r3, [r3, #32]
 800a304:	4930      	ldr	r1, [pc, #192]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a306:	4313      	orrs	r3, r2
 800a308:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a30a:	4b2f      	ldr	r3, [pc, #188]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	021b      	lsls	r3, r3, #8
 800a318:	492b      	ldr	r1, [pc, #172]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a31a:	4313      	orrs	r3, r2
 800a31c:	604b      	str	r3, [r1, #4]
 800a31e:	e01a      	b.n	800a356 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a320:	4b29      	ldr	r3, [pc, #164]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a28      	ldr	r2, [pc, #160]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a326:	f023 0301 	bic.w	r3, r3, #1
 800a32a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a32c:	f7ff fb78 	bl	8009a20 <HAL_GetTick>
 800a330:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a332:	e008      	b.n	800a346 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a334:	f7ff fb74 	bl	8009a20 <HAL_GetTick>
 800a338:	4602      	mov	r2, r0
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d901      	bls.n	800a346 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a342:	2303      	movs	r3, #3
 800a344:	e314      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a346:	4b20      	ldr	r3, [pc, #128]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0302 	and.w	r3, r3, #2
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1f0      	bne.n	800a334 <HAL_RCC_OscConfig+0x1dc>
 800a352:	e000      	b.n	800a356 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a354:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 0301 	and.w	r3, r3, #1
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d073      	beq.n	800a44a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	2b08      	cmp	r3, #8
 800a366:	d005      	beq.n	800a374 <HAL_RCC_OscConfig+0x21c>
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	2b0c      	cmp	r3, #12
 800a36c:	d10e      	bne.n	800a38c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2b03      	cmp	r3, #3
 800a372:	d10b      	bne.n	800a38c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a374:	4b14      	ldr	r3, [pc, #80]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d063      	beq.n	800a448 <HAL_RCC_OscConfig+0x2f0>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d15f      	bne.n	800a448 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e2f1      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a394:	d106      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x24c>
 800a396:	4b0c      	ldr	r3, [pc, #48]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a0b      	ldr	r2, [pc, #44]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a39c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3a0:	6013      	str	r3, [r2, #0]
 800a3a2:	e025      	b.n	800a3f0 <HAL_RCC_OscConfig+0x298>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3ac:	d114      	bne.n	800a3d8 <HAL_RCC_OscConfig+0x280>
 800a3ae:	4b06      	ldr	r3, [pc, #24]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a05      	ldr	r2, [pc, #20]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a3b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3b8:	6013      	str	r3, [r2, #0]
 800a3ba:	4b03      	ldr	r3, [pc, #12]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a02      	ldr	r2, [pc, #8]	; (800a3c8 <HAL_RCC_OscConfig+0x270>)
 800a3c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3c4:	6013      	str	r3, [r2, #0]
 800a3c6:	e013      	b.n	800a3f0 <HAL_RCC_OscConfig+0x298>
 800a3c8:	40021000 	.word	0x40021000
 800a3cc:	08011470 	.word	0x08011470
 800a3d0:	20000000 	.word	0x20000000
 800a3d4:	20000004 	.word	0x20000004
 800a3d8:	4ba0      	ldr	r3, [pc, #640]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a9f      	ldr	r2, [pc, #636]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a3de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3e2:	6013      	str	r3, [r2, #0]
 800a3e4:	4b9d      	ldr	r3, [pc, #628]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a9c      	ldr	r2, [pc, #624]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a3ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d013      	beq.n	800a420 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f8:	f7ff fb12 	bl	8009a20 <HAL_GetTick>
 800a3fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a3fe:	e008      	b.n	800a412 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a400:	f7ff fb0e 	bl	8009a20 <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b64      	cmp	r3, #100	; 0x64
 800a40c:	d901      	bls.n	800a412 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e2ae      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a412:	4b92      	ldr	r3, [pc, #584]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d0f0      	beq.n	800a400 <HAL_RCC_OscConfig+0x2a8>
 800a41e:	e014      	b.n	800a44a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a420:	f7ff fafe 	bl	8009a20 <HAL_GetTick>
 800a424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a426:	e008      	b.n	800a43a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a428:	f7ff fafa 	bl	8009a20 <HAL_GetTick>
 800a42c:	4602      	mov	r2, r0
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	2b64      	cmp	r3, #100	; 0x64
 800a434:	d901      	bls.n	800a43a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a436:	2303      	movs	r3, #3
 800a438:	e29a      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a43a:	4b88      	ldr	r3, [pc, #544]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1f0      	bne.n	800a428 <HAL_RCC_OscConfig+0x2d0>
 800a446:	e000      	b.n	800a44a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 0302 	and.w	r3, r3, #2
 800a452:	2b00      	cmp	r3, #0
 800a454:	d060      	beq.n	800a518 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	2b04      	cmp	r3, #4
 800a45a:	d005      	beq.n	800a468 <HAL_RCC_OscConfig+0x310>
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	2b0c      	cmp	r3, #12
 800a460:	d119      	bne.n	800a496 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	2b02      	cmp	r3, #2
 800a466:	d116      	bne.n	800a496 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a468:	4b7c      	ldr	r3, [pc, #496]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a470:	2b00      	cmp	r3, #0
 800a472:	d005      	beq.n	800a480 <HAL_RCC_OscConfig+0x328>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e277      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a480:	4b76      	ldr	r3, [pc, #472]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	061b      	lsls	r3, r3, #24
 800a48e:	4973      	ldr	r1, [pc, #460]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a490:	4313      	orrs	r3, r2
 800a492:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a494:	e040      	b.n	800a518 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d023      	beq.n	800a4e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a49e:	4b6f      	ldr	r3, [pc, #444]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a6e      	ldr	r2, [pc, #440]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a4a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4aa:	f7ff fab9 	bl	8009a20 <HAL_GetTick>
 800a4ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4b0:	e008      	b.n	800a4c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4b2:	f7ff fab5 	bl	8009a20 <HAL_GetTick>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d901      	bls.n	800a4c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e255      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4c4:	4b65      	ldr	r3, [pc, #404]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d0f0      	beq.n	800a4b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4d0:	4b62      	ldr	r3, [pc, #392]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	061b      	lsls	r3, r3, #24
 800a4de:	495f      	ldr	r1, [pc, #380]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	604b      	str	r3, [r1, #4]
 800a4e4:	e018      	b.n	800a518 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4e6:	4b5d      	ldr	r3, [pc, #372]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a5c      	ldr	r2, [pc, #368]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a4ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4f2:	f7ff fa95 	bl	8009a20 <HAL_GetTick>
 800a4f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a4f8:	e008      	b.n	800a50c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4fa:	f7ff fa91 	bl	8009a20 <HAL_GetTick>
 800a4fe:	4602      	mov	r2, r0
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	2b02      	cmp	r3, #2
 800a506:	d901      	bls.n	800a50c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e231      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a50c:	4b53      	ldr	r3, [pc, #332]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1f0      	bne.n	800a4fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 0308 	and.w	r3, r3, #8
 800a520:	2b00      	cmp	r3, #0
 800a522:	d03c      	beq.n	800a59e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d01c      	beq.n	800a566 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a52c:	4b4b      	ldr	r3, [pc, #300]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a52e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a532:	4a4a      	ldr	r2, [pc, #296]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a534:	f043 0301 	orr.w	r3, r3, #1
 800a538:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a53c:	f7ff fa70 	bl	8009a20 <HAL_GetTick>
 800a540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a542:	e008      	b.n	800a556 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a544:	f7ff fa6c 	bl	8009a20 <HAL_GetTick>
 800a548:	4602      	mov	r2, r0
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d901      	bls.n	800a556 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a552:	2303      	movs	r3, #3
 800a554:	e20c      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a556:	4b41      	ldr	r3, [pc, #260]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a55c:	f003 0302 	and.w	r3, r3, #2
 800a560:	2b00      	cmp	r3, #0
 800a562:	d0ef      	beq.n	800a544 <HAL_RCC_OscConfig+0x3ec>
 800a564:	e01b      	b.n	800a59e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a566:	4b3d      	ldr	r3, [pc, #244]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a56c:	4a3b      	ldr	r2, [pc, #236]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a56e:	f023 0301 	bic.w	r3, r3, #1
 800a572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a576:	f7ff fa53 	bl	8009a20 <HAL_GetTick>
 800a57a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a57c:	e008      	b.n	800a590 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a57e:	f7ff fa4f 	bl	8009a20 <HAL_GetTick>
 800a582:	4602      	mov	r2, r0
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d901      	bls.n	800a590 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e1ef      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a590:	4b32      	ldr	r3, [pc, #200]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a596:	f003 0302 	and.w	r3, r3, #2
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1ef      	bne.n	800a57e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 0304 	and.w	r3, r3, #4
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 80a6 	beq.w	800a6f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a5b0:	4b2a      	ldr	r3, [pc, #168]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10d      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5bc:	4b27      	ldr	r3, [pc, #156]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a5be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5c0:	4a26      	ldr	r2, [pc, #152]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a5c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5c6:	6593      	str	r3, [r2, #88]	; 0x58
 800a5c8:	4b24      	ldr	r3, [pc, #144]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a5ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5d0:	60bb      	str	r3, [r7, #8]
 800a5d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5d8:	4b21      	ldr	r3, [pc, #132]	; (800a660 <HAL_RCC_OscConfig+0x508>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d118      	bne.n	800a616 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a5e4:	4b1e      	ldr	r3, [pc, #120]	; (800a660 <HAL_RCC_OscConfig+0x508>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a1d      	ldr	r2, [pc, #116]	; (800a660 <HAL_RCC_OscConfig+0x508>)
 800a5ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a5f0:	f7ff fa16 	bl	8009a20 <HAL_GetTick>
 800a5f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5f6:	e008      	b.n	800a60a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5f8:	f7ff fa12 	bl	8009a20 <HAL_GetTick>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	2b02      	cmp	r3, #2
 800a604:	d901      	bls.n	800a60a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a606:	2303      	movs	r3, #3
 800a608:	e1b2      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a60a:	4b15      	ldr	r3, [pc, #84]	; (800a660 <HAL_RCC_OscConfig+0x508>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a612:	2b00      	cmp	r3, #0
 800a614:	d0f0      	beq.n	800a5f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d108      	bne.n	800a630 <HAL_RCC_OscConfig+0x4d8>
 800a61e:	4b0f      	ldr	r3, [pc, #60]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a624:	4a0d      	ldr	r2, [pc, #52]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a626:	f043 0301 	orr.w	r3, r3, #1
 800a62a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a62e:	e029      	b.n	800a684 <HAL_RCC_OscConfig+0x52c>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	2b05      	cmp	r3, #5
 800a636:	d115      	bne.n	800a664 <HAL_RCC_OscConfig+0x50c>
 800a638:	4b08      	ldr	r3, [pc, #32]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a63a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a63e:	4a07      	ldr	r2, [pc, #28]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a640:	f043 0304 	orr.w	r3, r3, #4
 800a644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a648:	4b04      	ldr	r3, [pc, #16]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a64e:	4a03      	ldr	r2, [pc, #12]	; (800a65c <HAL_RCC_OscConfig+0x504>)
 800a650:	f043 0301 	orr.w	r3, r3, #1
 800a654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a658:	e014      	b.n	800a684 <HAL_RCC_OscConfig+0x52c>
 800a65a:	bf00      	nop
 800a65c:	40021000 	.word	0x40021000
 800a660:	40007000 	.word	0x40007000
 800a664:	4b9a      	ldr	r3, [pc, #616]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a66a:	4a99      	ldr	r2, [pc, #612]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a66c:	f023 0301 	bic.w	r3, r3, #1
 800a670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a674:	4b96      	ldr	r3, [pc, #600]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a67a:	4a95      	ldr	r2, [pc, #596]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a67c:	f023 0304 	bic.w	r3, r3, #4
 800a680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d016      	beq.n	800a6ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a68c:	f7ff f9c8 	bl	8009a20 <HAL_GetTick>
 800a690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a692:	e00a      	b.n	800a6aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a694:	f7ff f9c4 	bl	8009a20 <HAL_GetTick>
 800a698:	4602      	mov	r2, r0
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d901      	bls.n	800a6aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	e162      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6aa:	4b89      	ldr	r3, [pc, #548]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6b0:	f003 0302 	and.w	r3, r3, #2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0ed      	beq.n	800a694 <HAL_RCC_OscConfig+0x53c>
 800a6b8:	e015      	b.n	800a6e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6ba:	f7ff f9b1 	bl	8009a20 <HAL_GetTick>
 800a6be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a6c0:	e00a      	b.n	800a6d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6c2:	f7ff f9ad 	bl	8009a20 <HAL_GetTick>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d901      	bls.n	800a6d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e14b      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a6d8:	4b7d      	ldr	r3, [pc, #500]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6de:	f003 0302 	and.w	r3, r3, #2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1ed      	bne.n	800a6c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a6e6:	7ffb      	ldrb	r3, [r7, #31]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d105      	bne.n	800a6f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6ec:	4b78      	ldr	r3, [pc, #480]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a6ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f0:	4a77      	ldr	r2, [pc, #476]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a6f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 0320 	and.w	r3, r3, #32
 800a700:	2b00      	cmp	r3, #0
 800a702:	d03c      	beq.n	800a77e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d01c      	beq.n	800a746 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a70c:	4b70      	ldr	r3, [pc, #448]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a70e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a712:	4a6f      	ldr	r2, [pc, #444]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a714:	f043 0301 	orr.w	r3, r3, #1
 800a718:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a71c:	f7ff f980 	bl	8009a20 <HAL_GetTick>
 800a720:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a722:	e008      	b.n	800a736 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a724:	f7ff f97c 	bl	8009a20 <HAL_GetTick>
 800a728:	4602      	mov	r2, r0
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d901      	bls.n	800a736 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a732:	2303      	movs	r3, #3
 800a734:	e11c      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a736:	4b66      	ldr	r3, [pc, #408]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a738:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a73c:	f003 0302 	and.w	r3, r3, #2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d0ef      	beq.n	800a724 <HAL_RCC_OscConfig+0x5cc>
 800a744:	e01b      	b.n	800a77e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a746:	4b62      	ldr	r3, [pc, #392]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a74c:	4a60      	ldr	r2, [pc, #384]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a74e:	f023 0301 	bic.w	r3, r3, #1
 800a752:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a756:	f7ff f963 	bl	8009a20 <HAL_GetTick>
 800a75a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a75c:	e008      	b.n	800a770 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a75e:	f7ff f95f 	bl	8009a20 <HAL_GetTick>
 800a762:	4602      	mov	r2, r0
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d901      	bls.n	800a770 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a76c:	2303      	movs	r3, #3
 800a76e:	e0ff      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a770:	4b57      	ldr	r3, [pc, #348]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a776:	f003 0302 	and.w	r3, r3, #2
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1ef      	bne.n	800a75e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 80f3 	beq.w	800a96e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	f040 80c9 	bne.w	800a924 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a792:	4b4f      	ldr	r3, [pc, #316]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	f003 0203 	and.w	r2, r3, #3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d12c      	bne.n	800a800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d123      	bne.n	800a800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d11b      	bne.n	800a800 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d113      	bne.n	800a800 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e2:	085b      	lsrs	r3, r3, #1
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d109      	bne.n	800a800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f6:	085b      	lsrs	r3, r3, #1
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d06b      	beq.n	800a8d8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	2b0c      	cmp	r3, #12
 800a804:	d062      	beq.n	800a8cc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a806:	4b32      	ldr	r3, [pc, #200]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d001      	beq.n	800a816 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	e0ac      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a816:	4b2e      	ldr	r3, [pc, #184]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a2d      	ldr	r2, [pc, #180]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a81c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a820:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a822:	f7ff f8fd 	bl	8009a20 <HAL_GetTick>
 800a826:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a828:	e008      	b.n	800a83c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a82a:	f7ff f8f9 	bl	8009a20 <HAL_GetTick>
 800a82e:	4602      	mov	r2, r0
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	2b02      	cmp	r3, #2
 800a836:	d901      	bls.n	800a83c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800a838:	2303      	movs	r3, #3
 800a83a:	e099      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a83c:	4b24      	ldr	r3, [pc, #144]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1f0      	bne.n	800a82a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a848:	4b21      	ldr	r3, [pc, #132]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a84a:	68da      	ldr	r2, [r3, #12]
 800a84c:	4b21      	ldr	r3, [pc, #132]	; (800a8d4 <HAL_RCC_OscConfig+0x77c>)
 800a84e:	4013      	ands	r3, r2
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a858:	3a01      	subs	r2, #1
 800a85a:	0112      	lsls	r2, r2, #4
 800a85c:	4311      	orrs	r1, r2
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a862:	0212      	lsls	r2, r2, #8
 800a864:	4311      	orrs	r1, r2
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a86a:	0852      	lsrs	r2, r2, #1
 800a86c:	3a01      	subs	r2, #1
 800a86e:	0552      	lsls	r2, r2, #21
 800a870:	4311      	orrs	r1, r2
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a876:	0852      	lsrs	r2, r2, #1
 800a878:	3a01      	subs	r2, #1
 800a87a:	0652      	lsls	r2, r2, #25
 800a87c:	4311      	orrs	r1, r2
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a882:	06d2      	lsls	r2, r2, #27
 800a884:	430a      	orrs	r2, r1
 800a886:	4912      	ldr	r1, [pc, #72]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a888:	4313      	orrs	r3, r2
 800a88a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a88c:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a0f      	ldr	r2, [pc, #60]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a896:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a898:	4b0d      	ldr	r3, [pc, #52]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	4a0c      	ldr	r2, [pc, #48]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a89e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a8a4:	f7ff f8bc 	bl	8009a20 <HAL_GetTick>
 800a8a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8aa:	e008      	b.n	800a8be <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8ac:	f7ff f8b8 	bl	8009a20 <HAL_GetTick>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d901      	bls.n	800a8be <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e058      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8be:	4b04      	ldr	r3, [pc, #16]	; (800a8d0 <HAL_RCC_OscConfig+0x778>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0f0      	beq.n	800a8ac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a8ca:	e050      	b.n	800a96e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e04f      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
 800a8d0:	40021000 	.word	0x40021000
 800a8d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8d8:	4b27      	ldr	r3, [pc, #156]	; (800a978 <HAL_RCC_OscConfig+0x820>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d144      	bne.n	800a96e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a8e4:	4b24      	ldr	r3, [pc, #144]	; (800a978 <HAL_RCC_OscConfig+0x820>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a23      	ldr	r2, [pc, #140]	; (800a978 <HAL_RCC_OscConfig+0x820>)
 800a8ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a8f0:	4b21      	ldr	r3, [pc, #132]	; (800a978 <HAL_RCC_OscConfig+0x820>)
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	4a20      	ldr	r2, [pc, #128]	; (800a978 <HAL_RCC_OscConfig+0x820>)
 800a8f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8fc:	f7ff f890 	bl	8009a20 <HAL_GetTick>
 800a900:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a902:	e008      	b.n	800a916 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a904:	f7ff f88c 	bl	8009a20 <HAL_GetTick>
 800a908:	4602      	mov	r2, r0
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d901      	bls.n	800a916 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800a912:	2303      	movs	r3, #3
 800a914:	e02c      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a916:	4b18      	ldr	r3, [pc, #96]	; (800a978 <HAL_RCC_OscConfig+0x820>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d0f0      	beq.n	800a904 <HAL_RCC_OscConfig+0x7ac>
 800a922:	e024      	b.n	800a96e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	2b0c      	cmp	r3, #12
 800a928:	d01f      	beq.n	800a96a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a92a:	4b13      	ldr	r3, [pc, #76]	; (800a978 <HAL_RCC_OscConfig+0x820>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a12      	ldr	r2, [pc, #72]	; (800a978 <HAL_RCC_OscConfig+0x820>)
 800a930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a936:	f7ff f873 	bl	8009a20 <HAL_GetTick>
 800a93a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a93c:	e008      	b.n	800a950 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a93e:	f7ff f86f 	bl	8009a20 <HAL_GetTick>
 800a942:	4602      	mov	r2, r0
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d901      	bls.n	800a950 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e00f      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a950:	4b09      	ldr	r3, [pc, #36]	; (800a978 <HAL_RCC_OscConfig+0x820>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1f0      	bne.n	800a93e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800a95c:	4b06      	ldr	r3, [pc, #24]	; (800a978 <HAL_RCC_OscConfig+0x820>)
 800a95e:	68da      	ldr	r2, [r3, #12]
 800a960:	4905      	ldr	r1, [pc, #20]	; (800a978 <HAL_RCC_OscConfig+0x820>)
 800a962:	4b06      	ldr	r3, [pc, #24]	; (800a97c <HAL_RCC_OscConfig+0x824>)
 800a964:	4013      	ands	r3, r2
 800a966:	60cb      	str	r3, [r1, #12]
 800a968:	e001      	b.n	800a96e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3720      	adds	r7, #32
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	40021000 	.word	0x40021000
 800a97c:	feeefffc 	.word	0xfeeefffc

0800a980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e0e7      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a994:	4b75      	ldr	r3, [pc, #468]	; (800ab6c <HAL_RCC_ClockConfig+0x1ec>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 0307 	and.w	r3, r3, #7
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d910      	bls.n	800a9c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9a2:	4b72      	ldr	r3, [pc, #456]	; (800ab6c <HAL_RCC_ClockConfig+0x1ec>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f023 0207 	bic.w	r2, r3, #7
 800a9aa:	4970      	ldr	r1, [pc, #448]	; (800ab6c <HAL_RCC_ClockConfig+0x1ec>)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9b2:	4b6e      	ldr	r3, [pc, #440]	; (800ab6c <HAL_RCC_ClockConfig+0x1ec>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f003 0307 	and.w	r3, r3, #7
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d001      	beq.n	800a9c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e0cf      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0302 	and.w	r3, r3, #2
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d010      	beq.n	800a9f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	689a      	ldr	r2, [r3, #8]
 800a9d4:	4b66      	ldr	r3, [pc, #408]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d908      	bls.n	800a9f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9e0:	4b63      	ldr	r3, [pc, #396]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	4960      	ldr	r1, [pc, #384]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0301 	and.w	r3, r3, #1
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d04c      	beq.n	800aa98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d107      	bne.n	800aa16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa06:	4b5a      	ldr	r3, [pc, #360]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d121      	bne.n	800aa56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	e0a6      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d107      	bne.n	800aa2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa1e:	4b54      	ldr	r3, [pc, #336]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d115      	bne.n	800aa56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e09a      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d107      	bne.n	800aa46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aa36:	4b4e      	ldr	r3, [pc, #312]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 0302 	and.w	r3, r3, #2
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d109      	bne.n	800aa56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e08e      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa46:	4b4a      	ldr	r3, [pc, #296]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e086      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa56:	4b46      	ldr	r3, [pc, #280]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f023 0203 	bic.w	r2, r3, #3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	4943      	ldr	r1, [pc, #268]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800aa64:	4313      	orrs	r3, r2
 800aa66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa68:	f7fe ffda 	bl	8009a20 <HAL_GetTick>
 800aa6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa6e:	e00a      	b.n	800aa86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa70:	f7fe ffd6 	bl	8009a20 <HAL_GetTick>
 800aa74:	4602      	mov	r2, r0
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d901      	bls.n	800aa86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800aa82:	2303      	movs	r3, #3
 800aa84:	e06e      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa86:	4b3a      	ldr	r3, [pc, #232]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f003 020c 	and.w	r2, r3, #12
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d1eb      	bne.n	800aa70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0302 	and.w	r3, r3, #2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d010      	beq.n	800aac6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	689a      	ldr	r2, [r3, #8]
 800aaa8:	4b31      	ldr	r3, [pc, #196]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d208      	bcs.n	800aac6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aab4:	4b2e      	ldr	r3, [pc, #184]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	492b      	ldr	r1, [pc, #172]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800aac2:	4313      	orrs	r3, r2
 800aac4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aac6:	4b29      	ldr	r3, [pc, #164]	; (800ab6c <HAL_RCC_ClockConfig+0x1ec>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f003 0307 	and.w	r3, r3, #7
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d210      	bcs.n	800aaf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aad4:	4b25      	ldr	r3, [pc, #148]	; (800ab6c <HAL_RCC_ClockConfig+0x1ec>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f023 0207 	bic.w	r2, r3, #7
 800aadc:	4923      	ldr	r1, [pc, #140]	; (800ab6c <HAL_RCC_ClockConfig+0x1ec>)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aae4:	4b21      	ldr	r3, [pc, #132]	; (800ab6c <HAL_RCC_ClockConfig+0x1ec>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 0307 	and.w	r3, r3, #7
 800aaec:	683a      	ldr	r2, [r7, #0]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d001      	beq.n	800aaf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e036      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 0304 	and.w	r3, r3, #4
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d008      	beq.n	800ab14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab02:	4b1b      	ldr	r3, [pc, #108]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	4918      	ldr	r1, [pc, #96]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 0308 	and.w	r3, r3, #8
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d009      	beq.n	800ab34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ab20:	4b13      	ldr	r3, [pc, #76]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	00db      	lsls	r3, r3, #3
 800ab2e:	4910      	ldr	r1, [pc, #64]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800ab30:	4313      	orrs	r3, r2
 800ab32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ab34:	f000 f824 	bl	800ab80 <HAL_RCC_GetSysClockFreq>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	; (800ab70 <HAL_RCC_ClockConfig+0x1f0>)
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	091b      	lsrs	r3, r3, #4
 800ab40:	f003 030f 	and.w	r3, r3, #15
 800ab44:	490b      	ldr	r1, [pc, #44]	; (800ab74 <HAL_RCC_ClockConfig+0x1f4>)
 800ab46:	5ccb      	ldrb	r3, [r1, r3]
 800ab48:	f003 031f 	and.w	r3, r3, #31
 800ab4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab50:	4a09      	ldr	r2, [pc, #36]	; (800ab78 <HAL_RCC_ClockConfig+0x1f8>)
 800ab52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ab54:	4b09      	ldr	r3, [pc, #36]	; (800ab7c <HAL_RCC_ClockConfig+0x1fc>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fe ff11 	bl	8009980 <HAL_InitTick>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	72fb      	strb	r3, [r7, #11]

  return status;
 800ab62:	7afb      	ldrb	r3, [r7, #11]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	40022000 	.word	0x40022000
 800ab70:	40021000 	.word	0x40021000
 800ab74:	08011470 	.word	0x08011470
 800ab78:	20000000 	.word	0x20000000
 800ab7c:	20000004 	.word	0x20000004

0800ab80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b089      	sub	sp, #36	; 0x24
 800ab84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ab86:	2300      	movs	r3, #0
 800ab88:	61fb      	str	r3, [r7, #28]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab8e:	4b3e      	ldr	r3, [pc, #248]	; (800ac88 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	f003 030c 	and.w	r3, r3, #12
 800ab96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ab98:	4b3b      	ldr	r3, [pc, #236]	; (800ac88 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	f003 0303 	and.w	r3, r3, #3
 800aba0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d005      	beq.n	800abb4 <HAL_RCC_GetSysClockFreq+0x34>
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	2b0c      	cmp	r3, #12
 800abac:	d121      	bne.n	800abf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d11e      	bne.n	800abf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800abb4:	4b34      	ldr	r3, [pc, #208]	; (800ac88 <HAL_RCC_GetSysClockFreq+0x108>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 0308 	and.w	r3, r3, #8
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d107      	bne.n	800abd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800abc0:	4b31      	ldr	r3, [pc, #196]	; (800ac88 <HAL_RCC_GetSysClockFreq+0x108>)
 800abc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abc6:	0a1b      	lsrs	r3, r3, #8
 800abc8:	f003 030f 	and.w	r3, r3, #15
 800abcc:	61fb      	str	r3, [r7, #28]
 800abce:	e005      	b.n	800abdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800abd0:	4b2d      	ldr	r3, [pc, #180]	; (800ac88 <HAL_RCC_GetSysClockFreq+0x108>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	091b      	lsrs	r3, r3, #4
 800abd6:	f003 030f 	and.w	r3, r3, #15
 800abda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800abdc:	4a2b      	ldr	r2, [pc, #172]	; (800ac8c <HAL_RCC_GetSysClockFreq+0x10c>)
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abe4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10d      	bne.n	800ac08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800abf0:	e00a      	b.n	800ac08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	2b04      	cmp	r3, #4
 800abf6:	d102      	bne.n	800abfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800abf8:	4b25      	ldr	r3, [pc, #148]	; (800ac90 <HAL_RCC_GetSysClockFreq+0x110>)
 800abfa:	61bb      	str	r3, [r7, #24]
 800abfc:	e004      	b.n	800ac08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	2b08      	cmp	r3, #8
 800ac02:	d101      	bne.n	800ac08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ac04:	4b23      	ldr	r3, [pc, #140]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x114>)
 800ac06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	2b0c      	cmp	r3, #12
 800ac0c:	d134      	bne.n	800ac78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ac0e:	4b1e      	ldr	r3, [pc, #120]	; (800ac88 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	f003 0303 	and.w	r3, r3, #3
 800ac16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2b02      	cmp	r3, #2
 800ac1c:	d003      	beq.n	800ac26 <HAL_RCC_GetSysClockFreq+0xa6>
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d003      	beq.n	800ac2c <HAL_RCC_GetSysClockFreq+0xac>
 800ac24:	e005      	b.n	800ac32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ac26:	4b1a      	ldr	r3, [pc, #104]	; (800ac90 <HAL_RCC_GetSysClockFreq+0x110>)
 800ac28:	617b      	str	r3, [r7, #20]
      break;
 800ac2a:	e005      	b.n	800ac38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ac2c:	4b19      	ldr	r3, [pc, #100]	; (800ac94 <HAL_RCC_GetSysClockFreq+0x114>)
 800ac2e:	617b      	str	r3, [r7, #20]
      break;
 800ac30:	e002      	b.n	800ac38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	617b      	str	r3, [r7, #20]
      break;
 800ac36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ac38:	4b13      	ldr	r3, [pc, #76]	; (800ac88 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	091b      	lsrs	r3, r3, #4
 800ac3e:	f003 0307 	and.w	r3, r3, #7
 800ac42:	3301      	adds	r3, #1
 800ac44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ac46:	4b10      	ldr	r3, [pc, #64]	; (800ac88 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	0a1b      	lsrs	r3, r3, #8
 800ac4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	fb03 f202 	mul.w	r2, r3, r2
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ac5e:	4b0a      	ldr	r3, [pc, #40]	; (800ac88 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	0e5b      	lsrs	r3, r3, #25
 800ac64:	f003 0303 	and.w	r3, r3, #3
 800ac68:	3301      	adds	r3, #1
 800ac6a:	005b      	lsls	r3, r3, #1
 800ac6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ac78:	69bb      	ldr	r3, [r7, #24]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3724      	adds	r7, #36	; 0x24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	40021000 	.word	0x40021000
 800ac8c:	08011488 	.word	0x08011488
 800ac90:	00f42400 	.word	0x00f42400
 800ac94:	007a1200 	.word	0x007a1200

0800ac98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac9c:	4b03      	ldr	r3, [pc, #12]	; (800acac <HAL_RCC_GetHCLKFreq+0x14>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	20000000 	.word	0x20000000

0800acb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800acb4:	f7ff fff0 	bl	800ac98 <HAL_RCC_GetHCLKFreq>
 800acb8:	4602      	mov	r2, r0
 800acba:	4b06      	ldr	r3, [pc, #24]	; (800acd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	0a1b      	lsrs	r3, r3, #8
 800acc0:	f003 0307 	and.w	r3, r3, #7
 800acc4:	4904      	ldr	r1, [pc, #16]	; (800acd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800acc6:	5ccb      	ldrb	r3, [r1, r3]
 800acc8:	f003 031f 	and.w	r3, r3, #31
 800accc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	40021000 	.word	0x40021000
 800acd8:	08011480 	.word	0x08011480

0800acdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ace0:	f7ff ffda 	bl	800ac98 <HAL_RCC_GetHCLKFreq>
 800ace4:	4602      	mov	r2, r0
 800ace6:	4b06      	ldr	r3, [pc, #24]	; (800ad00 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	0adb      	lsrs	r3, r3, #11
 800acec:	f003 0307 	and.w	r3, r3, #7
 800acf0:	4904      	ldr	r1, [pc, #16]	; (800ad04 <HAL_RCC_GetPCLK2Freq+0x28>)
 800acf2:	5ccb      	ldrb	r3, [r1, r3]
 800acf4:	f003 031f 	and.w	r3, r3, #31
 800acf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	40021000 	.word	0x40021000
 800ad04:	08011480 	.word	0x08011480

0800ad08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ad10:	2300      	movs	r3, #0
 800ad12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ad14:	4b2a      	ldr	r3, [pc, #168]	; (800adc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d003      	beq.n	800ad28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ad20:	f7ff f9b6 	bl	800a090 <HAL_PWREx_GetVoltageRange>
 800ad24:	6178      	str	r0, [r7, #20]
 800ad26:	e014      	b.n	800ad52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ad28:	4b25      	ldr	r3, [pc, #148]	; (800adc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad2c:	4a24      	ldr	r2, [pc, #144]	; (800adc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad32:	6593      	str	r3, [r2, #88]	; 0x58
 800ad34:	4b22      	ldr	r3, [pc, #136]	; (800adc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad3c:	60fb      	str	r3, [r7, #12]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ad40:	f7ff f9a6 	bl	800a090 <HAL_PWREx_GetVoltageRange>
 800ad44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ad46:	4b1e      	ldr	r3, [pc, #120]	; (800adc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad4a:	4a1d      	ldr	r2, [pc, #116]	; (800adc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ad4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad58:	d10b      	bne.n	800ad72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b80      	cmp	r3, #128	; 0x80
 800ad5e:	d919      	bls.n	800ad94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2ba0      	cmp	r3, #160	; 0xa0
 800ad64:	d902      	bls.n	800ad6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ad66:	2302      	movs	r3, #2
 800ad68:	613b      	str	r3, [r7, #16]
 800ad6a:	e013      	b.n	800ad94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	613b      	str	r3, [r7, #16]
 800ad70:	e010      	b.n	800ad94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2b80      	cmp	r3, #128	; 0x80
 800ad76:	d902      	bls.n	800ad7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ad78:	2303      	movs	r3, #3
 800ad7a:	613b      	str	r3, [r7, #16]
 800ad7c:	e00a      	b.n	800ad94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b80      	cmp	r3, #128	; 0x80
 800ad82:	d102      	bne.n	800ad8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ad84:	2302      	movs	r3, #2
 800ad86:	613b      	str	r3, [r7, #16]
 800ad88:	e004      	b.n	800ad94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b70      	cmp	r3, #112	; 0x70
 800ad8e:	d101      	bne.n	800ad94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ad90:	2301      	movs	r3, #1
 800ad92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ad94:	4b0b      	ldr	r3, [pc, #44]	; (800adc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f023 0207 	bic.w	r2, r3, #7
 800ad9c:	4909      	ldr	r1, [pc, #36]	; (800adc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ada4:	4b07      	ldr	r3, [pc, #28]	; (800adc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 0307 	and.w	r3, r3, #7
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d001      	beq.n	800adb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e000      	b.n	800adb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3718      	adds	r7, #24
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	40021000 	.word	0x40021000
 800adc4:	40022000 	.word	0x40022000

0800adc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800add0:	2300      	movs	r3, #0
 800add2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800add4:	2300      	movs	r3, #0
 800add6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d031      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800adec:	d01a      	beq.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800adee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800adf2:	d814      	bhi.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d009      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800adf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adfc:	d10f      	bne.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800adfe:	4b5d      	ldr	r3, [pc, #372]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	4a5c      	ldr	r2, [pc, #368]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ae0a:	e00c      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	2100      	movs	r1, #0
 800ae12:	4618      	mov	r0, r3
 800ae14:	f000 f9ce 	bl	800b1b4 <RCCEx_PLLSAI1_Config>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ae1c:	e003      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	74fb      	strb	r3, [r7, #19]
      break;
 800ae22:	e000      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800ae24:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae26:	7cfb      	ldrb	r3, [r7, #19]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10b      	bne.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae2c:	4b51      	ldr	r3, [pc, #324]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae3a:	494e      	ldr	r1, [pc, #312]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ae42:	e001      	b.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae44:	7cfb      	ldrb	r3, [r7, #19]
 800ae46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 809e 	beq.w	800af92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae56:	2300      	movs	r3, #0
 800ae58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ae5a:	4b46      	ldr	r3, [pc, #280]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d101      	bne.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800ae66:	2301      	movs	r3, #1
 800ae68:	e000      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00d      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae70:	4b40      	ldr	r3, [pc, #256]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae74:	4a3f      	ldr	r2, [pc, #252]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae7a:	6593      	str	r3, [r2, #88]	; 0x58
 800ae7c:	4b3d      	ldr	r3, [pc, #244]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ae7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae84:	60bb      	str	r3, [r7, #8]
 800ae86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae8c:	4b3a      	ldr	r3, [pc, #232]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a39      	ldr	r2, [pc, #228]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ae92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae98:	f7fe fdc2 	bl	8009a20 <HAL_GetTick>
 800ae9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ae9e:	e009      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aea0:	f7fe fdbe 	bl	8009a20 <HAL_GetTick>
 800aea4:	4602      	mov	r2, r0
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d902      	bls.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	74fb      	strb	r3, [r7, #19]
        break;
 800aeb2:	e005      	b.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800aeb4:	4b30      	ldr	r3, [pc, #192]	; (800af78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d0ef      	beq.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800aec0:	7cfb      	ldrb	r3, [r7, #19]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d15a      	bne.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aec6:	4b2b      	ldr	r3, [pc, #172]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aed0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d01e      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d019      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aee2:	4b24      	ldr	r3, [pc, #144]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aeee:	4b21      	ldr	r3, [pc, #132]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef4:	4a1f      	ldr	r2, [pc, #124]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aefa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aefe:	4b1d      	ldr	r3, [pc, #116]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af04:	4a1b      	ldr	r2, [pc, #108]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800af0e:	4a19      	ldr	r2, [pc, #100]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d016      	beq.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af20:	f7fe fd7e 	bl	8009a20 <HAL_GetTick>
 800af24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af26:	e00b      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af28:	f7fe fd7a 	bl	8009a20 <HAL_GetTick>
 800af2c:	4602      	mov	r2, r0
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	1ad3      	subs	r3, r2, r3
 800af32:	f241 3288 	movw	r2, #5000	; 0x1388
 800af36:	4293      	cmp	r3, r2
 800af38:	d902      	bls.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	74fb      	strb	r3, [r7, #19]
            break;
 800af3e:	e006      	b.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af40:	4b0c      	ldr	r3, [pc, #48]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af46:	f003 0302 	and.w	r3, r3, #2
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0ec      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800af4e:	7cfb      	ldrb	r3, [r7, #19]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10b      	bne.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af54:	4b07      	ldr	r3, [pc, #28]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af62:	4904      	ldr	r1, [pc, #16]	; (800af74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af64:	4313      	orrs	r3, r2
 800af66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800af6a:	e009      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af6c:	7cfb      	ldrb	r3, [r7, #19]
 800af6e:	74bb      	strb	r3, [r7, #18]
 800af70:	e006      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800af72:	bf00      	nop
 800af74:	40021000 	.word	0x40021000
 800af78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af7c:	7cfb      	ldrb	r3, [r7, #19]
 800af7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af80:	7c7b      	ldrb	r3, [r7, #17]
 800af82:	2b01      	cmp	r3, #1
 800af84:	d105      	bne.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af86:	4b8a      	ldr	r3, [pc, #552]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800af88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af8a:	4a89      	ldr	r2, [pc, #548]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800af8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 0301 	and.w	r3, r3, #1
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00a      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af9e:	4b84      	ldr	r3, [pc, #528]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800afa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afa4:	f023 0203 	bic.w	r2, r3, #3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	4980      	ldr	r1, [pc, #512]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800afae:	4313      	orrs	r3, r2
 800afb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 0302 	and.w	r3, r3, #2
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00a      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800afc0:	4b7b      	ldr	r3, [pc, #492]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800afc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc6:	f023 020c 	bic.w	r2, r3, #12
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	4978      	ldr	r1, [pc, #480]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800afd0:	4313      	orrs	r3, r2
 800afd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0320 	and.w	r3, r3, #32
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00a      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800afe2:	4b73      	ldr	r3, [pc, #460]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800afe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff0:	496f      	ldr	r1, [pc, #444]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aff2:	4313      	orrs	r3, r2
 800aff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00a      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b004:	4b6a      	ldr	r3, [pc, #424]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b00a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b012:	4967      	ldr	r1, [pc, #412]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b014:	4313      	orrs	r3, r2
 800b016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00a      	beq.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b026:	4b62      	ldr	r3, [pc, #392]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b02c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b034:	495e      	ldr	r1, [pc, #376]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b036:	4313      	orrs	r3, r2
 800b038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00a      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b048:	4b59      	ldr	r3, [pc, #356]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b04e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b056:	4956      	ldr	r1, [pc, #344]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b058:	4313      	orrs	r3, r2
 800b05a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00a      	beq.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b06a:	4b51      	ldr	r3, [pc, #324]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b078:	494d      	ldr	r1, [pc, #308]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b07a:	4313      	orrs	r3, r2
 800b07c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d028      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b08c:	4b48      	ldr	r3, [pc, #288]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b092:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09a:	4945      	ldr	r1, [pc, #276]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b09c:	4313      	orrs	r3, r2
 800b09e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0aa:	d106      	bne.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b0ac:	4b40      	ldr	r3, [pc, #256]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	4a3f      	ldr	r2, [pc, #252]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b0b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0b6:	60d3      	str	r3, [r2, #12]
 800b0b8:	e011      	b.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0c2:	d10c      	bne.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	2101      	movs	r1, #1
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 f872 	bl	800b1b4 <RCCEx_PLLSAI1_Config>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b0d4:	7cfb      	ldrb	r3, [r7, #19]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800b0da:	7cfb      	ldrb	r3, [r7, #19]
 800b0dc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d028      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b0ea:	4b31      	ldr	r3, [pc, #196]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f8:	492d      	ldr	r1, [pc, #180]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b108:	d106      	bne.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b10a:	4b29      	ldr	r3, [pc, #164]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	4a28      	ldr	r2, [pc, #160]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b114:	60d3      	str	r3, [r2, #12]
 800b116:	e011      	b.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b11c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b120:	d10c      	bne.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	3304      	adds	r3, #4
 800b126:	2101      	movs	r1, #1
 800b128:	4618      	mov	r0, r3
 800b12a:	f000 f843 	bl	800b1b4 <RCCEx_PLLSAI1_Config>
 800b12e:	4603      	mov	r3, r0
 800b130:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b132:	7cfb      	ldrb	r3, [r7, #19]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800b138:	7cfb      	ldrb	r3, [r7, #19]
 800b13a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d01c      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b148:	4b19      	ldr	r3, [pc, #100]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b14e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b156:	4916      	ldr	r1, [pc, #88]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b158:	4313      	orrs	r3, r2
 800b15a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b166:	d10c      	bne.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3304      	adds	r3, #4
 800b16c:	2102      	movs	r1, #2
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 f820 	bl	800b1b4 <RCCEx_PLLSAI1_Config>
 800b174:	4603      	mov	r3, r0
 800b176:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b178:	7cfb      	ldrb	r3, [r7, #19]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d001      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800b17e:	7cfb      	ldrb	r3, [r7, #19]
 800b180:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00a      	beq.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b18e:	4b08      	ldr	r3, [pc, #32]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b194:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b19c:	4904      	ldr	r1, [pc, #16]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b1a4:	7cbb      	ldrb	r3, [r7, #18]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	40021000 	.word	0x40021000

0800b1b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b1c2:	4b74      	ldr	r3, [pc, #464]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	f003 0303 	and.w	r3, r3, #3
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d018      	beq.n	800b200 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b1ce:	4b71      	ldr	r3, [pc, #452]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	f003 0203 	and.w	r2, r3, #3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d10d      	bne.n	800b1fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
       ||
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d009      	beq.n	800b1fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b1e6:	4b6b      	ldr	r3, [pc, #428]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	091b      	lsrs	r3, r3, #4
 800b1ec:	f003 0307 	and.w	r3, r3, #7
 800b1f0:	1c5a      	adds	r2, r3, #1
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
       ||
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d047      	beq.n	800b28a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	73fb      	strb	r3, [r7, #15]
 800b1fe:	e044      	b.n	800b28a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b03      	cmp	r3, #3
 800b206:	d018      	beq.n	800b23a <RCCEx_PLLSAI1_Config+0x86>
 800b208:	2b03      	cmp	r3, #3
 800b20a:	d825      	bhi.n	800b258 <RCCEx_PLLSAI1_Config+0xa4>
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d002      	beq.n	800b216 <RCCEx_PLLSAI1_Config+0x62>
 800b210:	2b02      	cmp	r3, #2
 800b212:	d009      	beq.n	800b228 <RCCEx_PLLSAI1_Config+0x74>
 800b214:	e020      	b.n	800b258 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b216:	4b5f      	ldr	r3, [pc, #380]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0302 	and.w	r3, r3, #2
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d11d      	bne.n	800b25e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b226:	e01a      	b.n	800b25e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b228:	4b5a      	ldr	r3, [pc, #360]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b230:	2b00      	cmp	r3, #0
 800b232:	d116      	bne.n	800b262 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b238:	e013      	b.n	800b262 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b23a:	4b56      	ldr	r3, [pc, #344]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10f      	bne.n	800b266 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b246:	4b53      	ldr	r3, [pc, #332]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d109      	bne.n	800b266 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b256:	e006      	b.n	800b266 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	73fb      	strb	r3, [r7, #15]
      break;
 800b25c:	e004      	b.n	800b268 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b25e:	bf00      	nop
 800b260:	e002      	b.n	800b268 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b262:	bf00      	nop
 800b264:	e000      	b.n	800b268 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b266:	bf00      	nop
    }

    if(status == HAL_OK)
 800b268:	7bfb      	ldrb	r3, [r7, #15]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10d      	bne.n	800b28a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b26e:	4b49      	ldr	r3, [pc, #292]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6819      	ldr	r1, [r3, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	3b01      	subs	r3, #1
 800b280:	011b      	lsls	r3, r3, #4
 800b282:	430b      	orrs	r3, r1
 800b284:	4943      	ldr	r1, [pc, #268]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b286:	4313      	orrs	r3, r2
 800b288:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d17c      	bne.n	800b38a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b290:	4b40      	ldr	r3, [pc, #256]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a3f      	ldr	r2, [pc, #252]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b296:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b29a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b29c:	f7fe fbc0 	bl	8009a20 <HAL_GetTick>
 800b2a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b2a2:	e009      	b.n	800b2b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b2a4:	f7fe fbbc 	bl	8009a20 <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d902      	bls.n	800b2b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	73fb      	strb	r3, [r7, #15]
        break;
 800b2b6:	e005      	b.n	800b2c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b2b8:	4b36      	ldr	r3, [pc, #216]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1ef      	bne.n	800b2a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d15f      	bne.n	800b38a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d110      	bne.n	800b2f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b2d0:	4b30      	ldr	r3, [pc, #192]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800b2d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	6892      	ldr	r2, [r2, #8]
 800b2e0:	0211      	lsls	r1, r2, #8
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	68d2      	ldr	r2, [r2, #12]
 800b2e6:	06d2      	lsls	r2, r2, #27
 800b2e8:	430a      	orrs	r2, r1
 800b2ea:	492a      	ldr	r1, [pc, #168]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	610b      	str	r3, [r1, #16]
 800b2f0:	e027      	b.n	800b342 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d112      	bne.n	800b31e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b2f8:	4b26      	ldr	r3, [pc, #152]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b300:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	6892      	ldr	r2, [r2, #8]
 800b308:	0211      	lsls	r1, r2, #8
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	6912      	ldr	r2, [r2, #16]
 800b30e:	0852      	lsrs	r2, r2, #1
 800b310:	3a01      	subs	r2, #1
 800b312:	0552      	lsls	r2, r2, #21
 800b314:	430a      	orrs	r2, r1
 800b316:	491f      	ldr	r1, [pc, #124]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b318:	4313      	orrs	r3, r2
 800b31a:	610b      	str	r3, [r1, #16]
 800b31c:	e011      	b.n	800b342 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b31e:	4b1d      	ldr	r3, [pc, #116]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b326:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	6892      	ldr	r2, [r2, #8]
 800b32e:	0211      	lsls	r1, r2, #8
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	6952      	ldr	r2, [r2, #20]
 800b334:	0852      	lsrs	r2, r2, #1
 800b336:	3a01      	subs	r2, #1
 800b338:	0652      	lsls	r2, r2, #25
 800b33a:	430a      	orrs	r2, r1
 800b33c:	4915      	ldr	r1, [pc, #84]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b33e:	4313      	orrs	r3, r2
 800b340:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b342:	4b14      	ldr	r3, [pc, #80]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a13      	ldr	r2, [pc, #76]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b34c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b34e:	f7fe fb67 	bl	8009a20 <HAL_GetTick>
 800b352:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b354:	e009      	b.n	800b36a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b356:	f7fe fb63 	bl	8009a20 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	2b02      	cmp	r3, #2
 800b362:	d902      	bls.n	800b36a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b364:	2303      	movs	r3, #3
 800b366:	73fb      	strb	r3, [r7, #15]
          break;
 800b368:	e005      	b.n	800b376 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b36a:	4b0a      	ldr	r3, [pc, #40]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b372:	2b00      	cmp	r3, #0
 800b374:	d0ef      	beq.n	800b356 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b376:	7bfb      	ldrb	r3, [r7, #15]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d106      	bne.n	800b38a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b37c:	4b05      	ldr	r3, [pc, #20]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b37e:	691a      	ldr	r2, [r3, #16]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	4903      	ldr	r1, [pc, #12]	; (800b394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b386:	4313      	orrs	r3, r2
 800b388:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	40021000 	.word	0x40021000

0800b398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e040      	b.n	800b42c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d106      	bne.n	800b3c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f7fe f920 	bl	8009600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2224      	movs	r2, #36	; 0x24
 800b3c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f022 0201 	bic.w	r2, r2, #1
 800b3d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fbe8 	bl	800bbac <UART_SetConfig>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d101      	bne.n	800b3e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e022      	b.n	800b42c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d002      	beq.n	800b3f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fe08 	bl	800c004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685a      	ldr	r2, [r3, #4]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	689a      	ldr	r2, [r3, #8]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f042 0201 	orr.w	r2, r2, #1
 800b422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fe8f 	bl	800c148 <UART_CheckIdleState>
 800b42a:	4603      	mov	r3, r0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b434:	b480      	push	{r7}
 800b436:	b08b      	sub	sp, #44	; 0x2c
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	4613      	mov	r3, r2
 800b440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b446:	2b20      	cmp	r3, #32
 800b448:	d156      	bne.n	800b4f8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <HAL_UART_Transmit_IT+0x22>
 800b450:	88fb      	ldrh	r3, [r7, #6]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	e04f      	b.n	800b4fa <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b460:	2b01      	cmp	r3, #1
 800b462:	d101      	bne.n	800b468 <HAL_UART_Transmit_IT+0x34>
 800b464:	2302      	movs	r3, #2
 800b466:	e048      	b.n	800b4fa <HAL_UART_Transmit_IT+0xc6>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	88fa      	ldrh	r2, [r7, #6]
 800b47a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	88fa      	ldrh	r2, [r7, #6]
 800b482:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2200      	movs	r2, #0
 800b48a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2221      	movs	r2, #33	; 0x21
 800b498:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4a2:	d107      	bne.n	800b4b4 <HAL_UART_Transmit_IT+0x80>
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d103      	bne.n	800b4b4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4a16      	ldr	r2, [pc, #88]	; (800b508 <HAL_UART_Transmit_IT+0xd4>)
 800b4b0:	669a      	str	r2, [r3, #104]	; 0x68
 800b4b2:	e002      	b.n	800b4ba <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	4a15      	ldr	r2, [pc, #84]	; (800b50c <HAL_UART_Transmit_IT+0xd8>)
 800b4b8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	e853 3f00 	ldrex	r3, [r3]
 800b4ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	623b      	str	r3, [r7, #32]
 800b4e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e4:	69f9      	ldr	r1, [r7, #28]
 800b4e6:	6a3a      	ldr	r2, [r7, #32]
 800b4e8:	e841 2300 	strex	r3, r2, [r1]
 800b4ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1e6      	bne.n	800b4c2 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	e000      	b.n	800b4fa <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800b4f8:	2302      	movs	r3, #2
  }
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	372c      	adds	r7, #44	; 0x2c
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	0800c6a3 	.word	0x0800c6a3
 800b50c:	0800c5eb 	.word	0x0800c5eb

0800b510 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b08a      	sub	sp, #40	; 0x28
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	4613      	mov	r3, r2
 800b51c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b522:	2b20      	cmp	r3, #32
 800b524:	d142      	bne.n	800b5ac <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d002      	beq.n	800b532 <HAL_UART_Receive_IT+0x22>
 800b52c:	88fb      	ldrh	r3, [r7, #6]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e03b      	b.n	800b5ae <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d101      	bne.n	800b544 <HAL_UART_Receive_IT+0x34>
 800b540:	2302      	movs	r3, #2
 800b542:	e034      	b.n	800b5ae <HAL_UART_Receive_IT+0x9e>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a18      	ldr	r2, [pc, #96]	; (800b5b8 <HAL_UART_Receive_IT+0xa8>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d01f      	beq.n	800b59c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d018      	beq.n	800b59c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	e853 3f00 	ldrex	r3, [r3]
 800b576:	613b      	str	r3, [r7, #16]
   return(result);
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b57e:	627b      	str	r3, [r7, #36]	; 0x24
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	461a      	mov	r2, r3
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	623b      	str	r3, [r7, #32]
 800b58a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58c:	69f9      	ldr	r1, [r7, #28]
 800b58e:	6a3a      	ldr	r2, [r7, #32]
 800b590:	e841 2300 	strex	r3, r2, [r1]
 800b594:	61bb      	str	r3, [r7, #24]
   return(result);
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1e6      	bne.n	800b56a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b59c:	88fb      	ldrh	r3, [r7, #6]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f000 fede 	bl	800c364 <UART_Start_Receive_IT>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	e000      	b.n	800b5ae <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b5ac:	2302      	movs	r3, #2
  }
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3728      	adds	r7, #40	; 0x28
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	40008000 	.word	0x40008000

0800b5bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b0ba      	sub	sp, #232	; 0xe8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	69db      	ldr	r3, [r3, #28]
 800b5ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b5e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b5e6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b5f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d115      	bne.n	800b624 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5fc:	f003 0320 	and.w	r3, r3, #32
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00f      	beq.n	800b624 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b608:	f003 0320 	and.w	r3, r3, #32
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d009      	beq.n	800b624 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 82a6 	beq.w	800bb66 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	4798      	blx	r3
      }
      return;
 800b622:	e2a0      	b.n	800bb66 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f000 8117 	beq.w	800b85c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b62e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	d106      	bne.n	800b648 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b63a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b63e:	4b85      	ldr	r3, [pc, #532]	; (800b854 <HAL_UART_IRQHandler+0x298>)
 800b640:	4013      	ands	r3, r2
 800b642:	2b00      	cmp	r3, #0
 800b644:	f000 810a 	beq.w	800b85c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	2b00      	cmp	r3, #0
 800b652:	d011      	beq.n	800b678 <HAL_UART_IRQHandler+0xbc>
 800b654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00b      	beq.n	800b678 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2201      	movs	r2, #1
 800b666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b66e:	f043 0201 	orr.w	r2, r3, #1
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b67c:	f003 0302 	and.w	r3, r3, #2
 800b680:	2b00      	cmp	r3, #0
 800b682:	d011      	beq.n	800b6a8 <HAL_UART_IRQHandler+0xec>
 800b684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00b      	beq.n	800b6a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2202      	movs	r2, #2
 800b696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b69e:	f043 0204 	orr.w	r2, r3, #4
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ac:	f003 0304 	and.w	r3, r3, #4
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d011      	beq.n	800b6d8 <HAL_UART_IRQHandler+0x11c>
 800b6b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00b      	beq.n	800b6d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2204      	movs	r2, #4
 800b6c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6ce:	f043 0202 	orr.w	r2, r3, #2
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6dc:	f003 0308 	and.w	r3, r3, #8
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d017      	beq.n	800b714 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e8:	f003 0320 	and.w	r3, r3, #32
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d105      	bne.n	800b6fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b6f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00b      	beq.n	800b714 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2208      	movs	r2, #8
 800b702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b70a:	f043 0208 	orr.w	r2, r3, #8
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d012      	beq.n	800b746 <HAL_UART_IRQHandler+0x18a>
 800b720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00c      	beq.n	800b746 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b73c:	f043 0220 	orr.w	r2, r3, #32
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	f000 820c 	beq.w	800bb6a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b756:	f003 0320 	and.w	r3, r3, #32
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00d      	beq.n	800b77a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b75e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b762:	f003 0320 	and.w	r3, r3, #32
 800b766:	2b00      	cmp	r3, #0
 800b768:	d007      	beq.n	800b77a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d003      	beq.n	800b77a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b780:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b78e:	2b40      	cmp	r3, #64	; 0x40
 800b790:	d005      	beq.n	800b79e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b796:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d04f      	beq.n	800b83e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 feaa 	bl	800c4f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ae:	2b40      	cmp	r3, #64	; 0x40
 800b7b0:	d141      	bne.n	800b836 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	3308      	adds	r3, #8
 800b7b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7c0:	e853 3f00 	ldrex	r3, [r3]
 800b7c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b7c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b7cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3308      	adds	r3, #8
 800b7da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b7de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b7e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b7ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7ee:	e841 2300 	strex	r3, r2, [r1]
 800b7f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b7f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1d9      	bne.n	800b7b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b802:	2b00      	cmp	r3, #0
 800b804:	d013      	beq.n	800b82e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b80a:	4a13      	ldr	r2, [pc, #76]	; (800b858 <HAL_UART_IRQHandler+0x29c>)
 800b80c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b812:	4618      	mov	r0, r3
 800b814:	f7fe fa5f 	bl	8009cd6 <HAL_DMA_Abort_IT>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d017      	beq.n	800b84e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b828:	4610      	mov	r0, r2
 800b82a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b82c:	e00f      	b.n	800b84e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f9a6 	bl	800bb80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b834:	e00b      	b.n	800b84e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f9a2 	bl	800bb80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b83c:	e007      	b.n	800b84e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f99e 	bl	800bb80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b84c:	e18d      	b.n	800bb6a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b84e:	bf00      	nop
    return;
 800b850:	e18b      	b.n	800bb6a <HAL_UART_IRQHandler+0x5ae>
 800b852:	bf00      	nop
 800b854:	04000120 	.word	0x04000120
 800b858:	0800c5bf 	.word	0x0800c5bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b860:	2b01      	cmp	r3, #1
 800b862:	f040 8146 	bne.w	800baf2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b86a:	f003 0310 	and.w	r3, r3, #16
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f000 813f 	beq.w	800baf2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b878:	f003 0310 	and.w	r3, r3, #16
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 8138 	beq.w	800baf2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2210      	movs	r2, #16
 800b888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b894:	2b40      	cmp	r3, #64	; 0x40
 800b896:	f040 80b4 	bne.w	800ba02 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b8a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f000 815f 	beq.w	800bb6e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b8b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	f080 8157 	bcs.w	800bb6e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b8c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 0320 	and.w	r3, r3, #32
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f040 8085 	bne.w	800b9e6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8e8:	e853 3f00 	ldrex	r3, [r3]
 800b8ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b8f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	461a      	mov	r2, r3
 800b902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b906:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b90a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b916:	e841 2300 	strex	r3, r2, [r1]
 800b91a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b91e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1da      	bne.n	800b8dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	3308      	adds	r3, #8
 800b92c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b930:	e853 3f00 	ldrex	r3, [r3]
 800b934:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b938:	f023 0301 	bic.w	r3, r3, #1
 800b93c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	3308      	adds	r3, #8
 800b946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b94a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b94e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b950:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b956:	e841 2300 	strex	r3, r2, [r1]
 800b95a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b95c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1e1      	bne.n	800b926 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3308      	adds	r3, #8
 800b968:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b96c:	e853 3f00 	ldrex	r3, [r3]
 800b970:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3308      	adds	r3, #8
 800b982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b986:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b988:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b98c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b98e:	e841 2300 	strex	r3, r2, [r1]
 800b992:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1e3      	bne.n	800b962 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2220      	movs	r2, #32
 800b99e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ae:	e853 3f00 	ldrex	r3, [r3]
 800b9b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b9b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9b6:	f023 0310 	bic.w	r3, r3, #16
 800b9ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b9ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9d0:	e841 2300 	strex	r3, r2, [r1]
 800b9d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b9d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1e4      	bne.n	800b9a6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7fe f93a 	bl	8009c5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f8ca 	bl	800bb94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba00:	e0b5      	b.n	800bb6e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 80a7 	beq.w	800bb72 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800ba24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f000 80a2 	beq.w	800bb72 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba36:	e853 3f00 	ldrex	r3, [r3]
 800ba3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba50:	647b      	str	r3, [r7, #68]	; 0x44
 800ba52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba58:	e841 2300 	strex	r3, r2, [r1]
 800ba5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e4      	bne.n	800ba2e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3308      	adds	r3, #8
 800ba6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	e853 3f00 	ldrex	r3, [r3]
 800ba72:	623b      	str	r3, [r7, #32]
   return(result);
 800ba74:	6a3b      	ldr	r3, [r7, #32]
 800ba76:	f023 0301 	bic.w	r3, r3, #1
 800ba7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3308      	adds	r3, #8
 800ba84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba88:	633a      	str	r2, [r7, #48]	; 0x30
 800ba8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba90:	e841 2300 	strex	r3, r2, [r1]
 800ba94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1e3      	bne.n	800ba64 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2220      	movs	r2, #32
 800baa0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	e853 3f00 	ldrex	r3, [r3]
 800baba:	60fb      	str	r3, [r7, #12]
   return(result);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f023 0310 	bic.w	r3, r3, #16
 800bac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	461a      	mov	r2, r3
 800bacc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bad0:	61fb      	str	r3, [r7, #28]
 800bad2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad4:	69b9      	ldr	r1, [r7, #24]
 800bad6:	69fa      	ldr	r2, [r7, #28]
 800bad8:	e841 2300 	strex	r3, r2, [r1]
 800badc:	617b      	str	r3, [r7, #20]
   return(result);
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1e4      	bne.n	800baae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bae8:	4619      	mov	r1, r3
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 f852 	bl	800bb94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800baf0:	e03f      	b.n	800bb72 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800baf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00e      	beq.n	800bb1c <HAL_UART_IRQHandler+0x560>
 800bafe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d008      	beq.n	800bb1c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bb12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 ffae 	bl	800ca76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb1a:	e02d      	b.n	800bb78 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bb1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00e      	beq.n	800bb46 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bb28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d008      	beq.n	800bb46 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d01c      	beq.n	800bb76 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	4798      	blx	r3
    }
    return;
 800bb44:	e017      	b.n	800bb76 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bb46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d012      	beq.n	800bb78 <HAL_UART_IRQHandler+0x5bc>
 800bb52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00c      	beq.n	800bb78 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fdff 	bl	800c762 <UART_EndTransmit_IT>
    return;
 800bb64:	e008      	b.n	800bb78 <HAL_UART_IRQHandler+0x5bc>
      return;
 800bb66:	bf00      	nop
 800bb68:	e006      	b.n	800bb78 <HAL_UART_IRQHandler+0x5bc>
    return;
 800bb6a:	bf00      	nop
 800bb6c:	e004      	b.n	800bb78 <HAL_UART_IRQHandler+0x5bc>
      return;
 800bb6e:	bf00      	nop
 800bb70:	e002      	b.n	800bb78 <HAL_UART_IRQHandler+0x5bc>
      return;
 800bb72:	bf00      	nop
 800bb74:	e000      	b.n	800bb78 <HAL_UART_IRQHandler+0x5bc>
    return;
 800bb76:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800bb78:	37e8      	adds	r7, #232	; 0xe8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop

0800bb80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbb0:	b08a      	sub	sp, #40	; 0x28
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	689a      	ldr	r2, [r3, #8]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	431a      	orrs	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	431a      	orrs	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	69db      	ldr	r3, [r3, #28]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	4bb4      	ldr	r3, [pc, #720]	; (800beac <UART_SetConfig+0x300>)
 800bbdc:	4013      	ands	r3, r2
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	6812      	ldr	r2, [r2, #0]
 800bbe2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbe4:	430b      	orrs	r3, r1
 800bbe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	68da      	ldr	r2, [r3, #12]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	699b      	ldr	r3, [r3, #24]
 800bc02:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4aa9      	ldr	r2, [pc, #676]	; (800beb0 <UART_SetConfig+0x304>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d004      	beq.n	800bc18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6a1b      	ldr	r3, [r3, #32]
 800bc12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc14:	4313      	orrs	r3, r2
 800bc16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc28:	430a      	orrs	r2, r1
 800bc2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4aa0      	ldr	r2, [pc, #640]	; (800beb4 <UART_SetConfig+0x308>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d126      	bne.n	800bc84 <UART_SetConfig+0xd8>
 800bc36:	4ba0      	ldr	r3, [pc, #640]	; (800beb8 <UART_SetConfig+0x30c>)
 800bc38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc3c:	f003 0303 	and.w	r3, r3, #3
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	d81b      	bhi.n	800bc7c <UART_SetConfig+0xd0>
 800bc44:	a201      	add	r2, pc, #4	; (adr r2, 800bc4c <UART_SetConfig+0xa0>)
 800bc46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc4a:	bf00      	nop
 800bc4c:	0800bc5d 	.word	0x0800bc5d
 800bc50:	0800bc6d 	.word	0x0800bc6d
 800bc54:	0800bc65 	.word	0x0800bc65
 800bc58:	0800bc75 	.word	0x0800bc75
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc62:	e080      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bc64:	2302      	movs	r3, #2
 800bc66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc6a:	e07c      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bc6c:	2304      	movs	r3, #4
 800bc6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc72:	e078      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bc74:	2308      	movs	r3, #8
 800bc76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc7a:	e074      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bc7c:	2310      	movs	r3, #16
 800bc7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc82:	e070      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a8c      	ldr	r2, [pc, #560]	; (800bebc <UART_SetConfig+0x310>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d138      	bne.n	800bd00 <UART_SetConfig+0x154>
 800bc8e:	4b8a      	ldr	r3, [pc, #552]	; (800beb8 <UART_SetConfig+0x30c>)
 800bc90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc94:	f003 030c 	and.w	r3, r3, #12
 800bc98:	2b0c      	cmp	r3, #12
 800bc9a:	d82d      	bhi.n	800bcf8 <UART_SetConfig+0x14c>
 800bc9c:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <UART_SetConfig+0xf8>)
 800bc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca2:	bf00      	nop
 800bca4:	0800bcd9 	.word	0x0800bcd9
 800bca8:	0800bcf9 	.word	0x0800bcf9
 800bcac:	0800bcf9 	.word	0x0800bcf9
 800bcb0:	0800bcf9 	.word	0x0800bcf9
 800bcb4:	0800bce9 	.word	0x0800bce9
 800bcb8:	0800bcf9 	.word	0x0800bcf9
 800bcbc:	0800bcf9 	.word	0x0800bcf9
 800bcc0:	0800bcf9 	.word	0x0800bcf9
 800bcc4:	0800bce1 	.word	0x0800bce1
 800bcc8:	0800bcf9 	.word	0x0800bcf9
 800bccc:	0800bcf9 	.word	0x0800bcf9
 800bcd0:	0800bcf9 	.word	0x0800bcf9
 800bcd4:	0800bcf1 	.word	0x0800bcf1
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcde:	e042      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bce0:	2302      	movs	r3, #2
 800bce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bce6:	e03e      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bce8:	2304      	movs	r3, #4
 800bcea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcee:	e03a      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bcf0:	2308      	movs	r3, #8
 800bcf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcf6:	e036      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bcf8:	2310      	movs	r3, #16
 800bcfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcfe:	e032      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a6a      	ldr	r2, [pc, #424]	; (800beb0 <UART_SetConfig+0x304>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d12a      	bne.n	800bd60 <UART_SetConfig+0x1b4>
 800bd0a:	4b6b      	ldr	r3, [pc, #428]	; (800beb8 <UART_SetConfig+0x30c>)
 800bd0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bd14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd18:	d01a      	beq.n	800bd50 <UART_SetConfig+0x1a4>
 800bd1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd1e:	d81b      	bhi.n	800bd58 <UART_SetConfig+0x1ac>
 800bd20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd24:	d00c      	beq.n	800bd40 <UART_SetConfig+0x194>
 800bd26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd2a:	d815      	bhi.n	800bd58 <UART_SetConfig+0x1ac>
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d003      	beq.n	800bd38 <UART_SetConfig+0x18c>
 800bd30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd34:	d008      	beq.n	800bd48 <UART_SetConfig+0x19c>
 800bd36:	e00f      	b.n	800bd58 <UART_SetConfig+0x1ac>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd3e:	e012      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bd40:	2302      	movs	r3, #2
 800bd42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd46:	e00e      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bd48:	2304      	movs	r3, #4
 800bd4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd4e:	e00a      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bd50:	2308      	movs	r3, #8
 800bd52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd56:	e006      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bd58:	2310      	movs	r3, #16
 800bd5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd5e:	e002      	b.n	800bd66 <UART_SetConfig+0x1ba>
 800bd60:	2310      	movs	r3, #16
 800bd62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a51      	ldr	r2, [pc, #324]	; (800beb0 <UART_SetConfig+0x304>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d17a      	bne.n	800be66 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd74:	2b08      	cmp	r3, #8
 800bd76:	d824      	bhi.n	800bdc2 <UART_SetConfig+0x216>
 800bd78:	a201      	add	r2, pc, #4	; (adr r2, 800bd80 <UART_SetConfig+0x1d4>)
 800bd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7e:	bf00      	nop
 800bd80:	0800bda5 	.word	0x0800bda5
 800bd84:	0800bdc3 	.word	0x0800bdc3
 800bd88:	0800bdad 	.word	0x0800bdad
 800bd8c:	0800bdc3 	.word	0x0800bdc3
 800bd90:	0800bdb3 	.word	0x0800bdb3
 800bd94:	0800bdc3 	.word	0x0800bdc3
 800bd98:	0800bdc3 	.word	0x0800bdc3
 800bd9c:	0800bdc3 	.word	0x0800bdc3
 800bda0:	0800bdbb 	.word	0x0800bdbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bda4:	f7fe ff84 	bl	800acb0 <HAL_RCC_GetPCLK1Freq>
 800bda8:	61f8      	str	r0, [r7, #28]
        break;
 800bdaa:	e010      	b.n	800bdce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bdac:	4b44      	ldr	r3, [pc, #272]	; (800bec0 <UART_SetConfig+0x314>)
 800bdae:	61fb      	str	r3, [r7, #28]
        break;
 800bdb0:	e00d      	b.n	800bdce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdb2:	f7fe fee5 	bl	800ab80 <HAL_RCC_GetSysClockFreq>
 800bdb6:	61f8      	str	r0, [r7, #28]
        break;
 800bdb8:	e009      	b.n	800bdce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdbe:	61fb      	str	r3, [r7, #28]
        break;
 800bdc0:	e005      	b.n	800bdce <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bdcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 8107 	beq.w	800bfe4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	685a      	ldr	r2, [r3, #4]
 800bdda:	4613      	mov	r3, r2
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	4413      	add	r3, r2
 800bde0:	69fa      	ldr	r2, [r7, #28]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d305      	bcc.n	800bdf2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bdec:	69fa      	ldr	r2, [r7, #28]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d903      	bls.n	800bdfa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bdf8:	e0f4      	b.n	800bfe4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	461c      	mov	r4, r3
 800be00:	4615      	mov	r5, r2
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	f04f 0300 	mov.w	r3, #0
 800be0a:	022b      	lsls	r3, r5, #8
 800be0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800be10:	0222      	lsls	r2, r4, #8
 800be12:	68f9      	ldr	r1, [r7, #12]
 800be14:	6849      	ldr	r1, [r1, #4]
 800be16:	0849      	lsrs	r1, r1, #1
 800be18:	2000      	movs	r0, #0
 800be1a:	4688      	mov	r8, r1
 800be1c:	4681      	mov	r9, r0
 800be1e:	eb12 0a08 	adds.w	sl, r2, r8
 800be22:	eb43 0b09 	adc.w	fp, r3, r9
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	603b      	str	r3, [r7, #0]
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be34:	4650      	mov	r0, sl
 800be36:	4659      	mov	r1, fp
 800be38:	f7f4 ff26 	bl	8000c88 <__aeabi_uldivmod>
 800be3c:	4602      	mov	r2, r0
 800be3e:	460b      	mov	r3, r1
 800be40:	4613      	mov	r3, r2
 800be42:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be4a:	d308      	bcc.n	800be5e <UART_SetConfig+0x2b2>
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be52:	d204      	bcs.n	800be5e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	69ba      	ldr	r2, [r7, #24]
 800be5a:	60da      	str	r2, [r3, #12]
 800be5c:	e0c2      	b.n	800bfe4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800be64:	e0be      	b.n	800bfe4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	69db      	ldr	r3, [r3, #28]
 800be6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be6e:	d16a      	bne.n	800bf46 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800be70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be74:	2b08      	cmp	r3, #8
 800be76:	d834      	bhi.n	800bee2 <UART_SetConfig+0x336>
 800be78:	a201      	add	r2, pc, #4	; (adr r2, 800be80 <UART_SetConfig+0x2d4>)
 800be7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7e:	bf00      	nop
 800be80:	0800bea5 	.word	0x0800bea5
 800be84:	0800bec5 	.word	0x0800bec5
 800be88:	0800becd 	.word	0x0800becd
 800be8c:	0800bee3 	.word	0x0800bee3
 800be90:	0800bed3 	.word	0x0800bed3
 800be94:	0800bee3 	.word	0x0800bee3
 800be98:	0800bee3 	.word	0x0800bee3
 800be9c:	0800bee3 	.word	0x0800bee3
 800bea0:	0800bedb 	.word	0x0800bedb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bea4:	f7fe ff04 	bl	800acb0 <HAL_RCC_GetPCLK1Freq>
 800bea8:	61f8      	str	r0, [r7, #28]
        break;
 800beaa:	e020      	b.n	800beee <UART_SetConfig+0x342>
 800beac:	efff69f3 	.word	0xefff69f3
 800beb0:	40008000 	.word	0x40008000
 800beb4:	40013800 	.word	0x40013800
 800beb8:	40021000 	.word	0x40021000
 800bebc:	40004400 	.word	0x40004400
 800bec0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bec4:	f7fe ff0a 	bl	800acdc <HAL_RCC_GetPCLK2Freq>
 800bec8:	61f8      	str	r0, [r7, #28]
        break;
 800beca:	e010      	b.n	800beee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800becc:	4b4c      	ldr	r3, [pc, #304]	; (800c000 <UART_SetConfig+0x454>)
 800bece:	61fb      	str	r3, [r7, #28]
        break;
 800bed0:	e00d      	b.n	800beee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bed2:	f7fe fe55 	bl	800ab80 <HAL_RCC_GetSysClockFreq>
 800bed6:	61f8      	str	r0, [r7, #28]
        break;
 800bed8:	e009      	b.n	800beee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800beda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bede:	61fb      	str	r3, [r7, #28]
        break;
 800bee0:	e005      	b.n	800beee <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800bee2:	2300      	movs	r3, #0
 800bee4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800beec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d077      	beq.n	800bfe4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	005a      	lsls	r2, r3, #1
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	085b      	lsrs	r3, r3, #1
 800befe:	441a      	add	r2, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	2b0f      	cmp	r3, #15
 800bf0e:	d916      	bls.n	800bf3e <UART_SetConfig+0x392>
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf16:	d212      	bcs.n	800bf3e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	f023 030f 	bic.w	r3, r3, #15
 800bf20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	085b      	lsrs	r3, r3, #1
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	f003 0307 	and.w	r3, r3, #7
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	8afb      	ldrh	r3, [r7, #22]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	8afa      	ldrh	r2, [r7, #22]
 800bf3a:	60da      	str	r2, [r3, #12]
 800bf3c:	e052      	b.n	800bfe4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bf44:	e04e      	b.n	800bfe4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf4a:	2b08      	cmp	r3, #8
 800bf4c:	d827      	bhi.n	800bf9e <UART_SetConfig+0x3f2>
 800bf4e:	a201      	add	r2, pc, #4	; (adr r2, 800bf54 <UART_SetConfig+0x3a8>)
 800bf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf54:	0800bf79 	.word	0x0800bf79
 800bf58:	0800bf81 	.word	0x0800bf81
 800bf5c:	0800bf89 	.word	0x0800bf89
 800bf60:	0800bf9f 	.word	0x0800bf9f
 800bf64:	0800bf8f 	.word	0x0800bf8f
 800bf68:	0800bf9f 	.word	0x0800bf9f
 800bf6c:	0800bf9f 	.word	0x0800bf9f
 800bf70:	0800bf9f 	.word	0x0800bf9f
 800bf74:	0800bf97 	.word	0x0800bf97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf78:	f7fe fe9a 	bl	800acb0 <HAL_RCC_GetPCLK1Freq>
 800bf7c:	61f8      	str	r0, [r7, #28]
        break;
 800bf7e:	e014      	b.n	800bfaa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf80:	f7fe feac 	bl	800acdc <HAL_RCC_GetPCLK2Freq>
 800bf84:	61f8      	str	r0, [r7, #28]
        break;
 800bf86:	e010      	b.n	800bfaa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf88:	4b1d      	ldr	r3, [pc, #116]	; (800c000 <UART_SetConfig+0x454>)
 800bf8a:	61fb      	str	r3, [r7, #28]
        break;
 800bf8c:	e00d      	b.n	800bfaa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf8e:	f7fe fdf7 	bl	800ab80 <HAL_RCC_GetSysClockFreq>
 800bf92:	61f8      	str	r0, [r7, #28]
        break;
 800bf94:	e009      	b.n	800bfaa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf9a:	61fb      	str	r3, [r7, #28]
        break;
 800bf9c:	e005      	b.n	800bfaa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bfa8:	bf00      	nop
    }

    if (pclk != 0U)
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d019      	beq.n	800bfe4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	085a      	lsrs	r2, r3, #1
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	441a      	add	r2, r3
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	2b0f      	cmp	r3, #15
 800bfc8:	d909      	bls.n	800bfde <UART_SetConfig+0x432>
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfd0:	d205      	bcs.n	800bfde <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	60da      	str	r2, [r3, #12]
 800bfdc:	e002      	b.n	800bfe4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bff0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3728      	adds	r7, #40	; 0x28
 800bff8:	46bd      	mov	sp, r7
 800bffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bffe:	bf00      	nop
 800c000:	00f42400 	.word	0x00f42400

0800c004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c010:	f003 0301 	and.w	r3, r3, #1
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00a      	beq.n	800c02e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	430a      	orrs	r2, r1
 800c02c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c032:	f003 0302 	and.w	r3, r3, #2
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00a      	beq.n	800c050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	430a      	orrs	r2, r1
 800c04e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c054:	f003 0304 	and.w	r3, r3, #4
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00a      	beq.n	800c072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	430a      	orrs	r2, r1
 800c070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c076:	f003 0308 	and.w	r3, r3, #8
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00a      	beq.n	800c094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	430a      	orrs	r2, r1
 800c092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c098:	f003 0310 	and.w	r3, r3, #16
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00a      	beq.n	800c0b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ba:	f003 0320 	and.w	r3, r3, #32
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00a      	beq.n	800c0d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	430a      	orrs	r2, r1
 800c0d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d01a      	beq.n	800c11a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c102:	d10a      	bne.n	800c11a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	430a      	orrs	r2, r1
 800c118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00a      	beq.n	800c13c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	430a      	orrs	r2, r1
 800c13a:	605a      	str	r2, [r3, #4]
  }
}
 800c13c:	bf00      	nop
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af02      	add	r7, sp, #8
 800c14e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c158:	f7fd fc62 	bl	8009a20 <HAL_GetTick>
 800c15c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 0308 	and.w	r3, r3, #8
 800c168:	2b08      	cmp	r3, #8
 800c16a:	d10e      	bne.n	800c18a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c16c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2200      	movs	r2, #0
 800c176:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f82d 	bl	800c1da <UART_WaitOnFlagUntilTimeout>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c186:	2303      	movs	r3, #3
 800c188:	e023      	b.n	800c1d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f003 0304 	and.w	r3, r3, #4
 800c194:	2b04      	cmp	r3, #4
 800c196:	d10e      	bne.n	800c1b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c19c:	9300      	str	r3, [sp, #0]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f817 	bl	800c1da <UART_WaitOnFlagUntilTimeout>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d001      	beq.n	800c1b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e00d      	b.n	800c1d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2220      	movs	r2, #32
 800c1ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2220      	movs	r2, #32
 800c1c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b09c      	sub	sp, #112	; 0x70
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	60f8      	str	r0, [r7, #12]
 800c1e2:	60b9      	str	r1, [r7, #8]
 800c1e4:	603b      	str	r3, [r7, #0]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1ea:	e0a5      	b.n	800c338 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f2:	f000 80a1 	beq.w	800c338 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1f6:	f7fd fc13 	bl	8009a20 <HAL_GetTick>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c202:	429a      	cmp	r2, r3
 800c204:	d302      	bcc.n	800c20c <UART_WaitOnFlagUntilTimeout+0x32>
 800c206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d13e      	bne.n	800c28a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c214:	e853 3f00 	ldrex	r3, [r3]
 800c218:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c21a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c21c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c220:	667b      	str	r3, [r7, #100]	; 0x64
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	461a      	mov	r2, r3
 800c228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c22a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c22c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c230:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c232:	e841 2300 	strex	r3, r2, [r1]
 800c236:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1e6      	bne.n	800c20c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	3308      	adds	r3, #8
 800c244:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c248:	e853 3f00 	ldrex	r3, [r3]
 800c24c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c250:	f023 0301 	bic.w	r3, r3, #1
 800c254:	663b      	str	r3, [r7, #96]	; 0x60
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3308      	adds	r3, #8
 800c25c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c25e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c260:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c262:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c266:	e841 2300 	strex	r3, r2, [r1]
 800c26a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c26c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1e5      	bne.n	800c23e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2220      	movs	r2, #32
 800c276:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2220      	movs	r2, #32
 800c27c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2200      	movs	r2, #0
 800c282:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c286:	2303      	movs	r3, #3
 800c288:	e067      	b.n	800c35a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f003 0304 	and.w	r3, r3, #4
 800c294:	2b00      	cmp	r3, #0
 800c296:	d04f      	beq.n	800c338 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	69db      	ldr	r3, [r3, #28]
 800c29e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2a6:	d147      	bne.n	800c338 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2b0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ba:	e853 3f00 	ldrex	r3, [r3]
 800c2be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c2c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c2d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2d8:	e841 2300 	strex	r3, r2, [r1]
 800c2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1e6      	bne.n	800c2b2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3308      	adds	r3, #8
 800c2ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	e853 3f00 	ldrex	r3, [r3]
 800c2f2:	613b      	str	r3, [r7, #16]
   return(result);
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	f023 0301 	bic.w	r3, r3, #1
 800c2fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3308      	adds	r3, #8
 800c302:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c304:	623a      	str	r2, [r7, #32]
 800c306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c308:	69f9      	ldr	r1, [r7, #28]
 800c30a:	6a3a      	ldr	r2, [r7, #32]
 800c30c:	e841 2300 	strex	r3, r2, [r1]
 800c310:	61bb      	str	r3, [r7, #24]
   return(result);
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1e5      	bne.n	800c2e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2220      	movs	r2, #32
 800c31c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2220      	movs	r2, #32
 800c322:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2220      	movs	r2, #32
 800c328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c334:	2303      	movs	r3, #3
 800c336:	e010      	b.n	800c35a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	69da      	ldr	r2, [r3, #28]
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	4013      	ands	r3, r2
 800c342:	68ba      	ldr	r2, [r7, #8]
 800c344:	429a      	cmp	r2, r3
 800c346:	bf0c      	ite	eq
 800c348:	2301      	moveq	r3, #1
 800c34a:	2300      	movne	r3, #0
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	461a      	mov	r2, r3
 800c350:	79fb      	ldrb	r3, [r7, #7]
 800c352:	429a      	cmp	r2, r3
 800c354:	f43f af4a 	beq.w	800c1ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3770      	adds	r7, #112	; 0x70
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
	...

0800c364 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c364:	b480      	push	{r7}
 800c366:	b097      	sub	sp, #92	; 0x5c
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	4613      	mov	r3, r2
 800c370:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	88fa      	ldrh	r2, [r7, #6]
 800c37c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	88fa      	ldrh	r2, [r7, #6]
 800c384:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c396:	d10e      	bne.n	800c3b6 <UART_Start_Receive_IT+0x52>
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d105      	bne.n	800c3ac <UART_Start_Receive_IT+0x48>
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c3a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3aa:	e02d      	b.n	800c408 <UART_Start_Receive_IT+0xa4>
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	22ff      	movs	r2, #255	; 0xff
 800c3b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3b4:	e028      	b.n	800c408 <UART_Start_Receive_IT+0xa4>
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10d      	bne.n	800c3da <UART_Start_Receive_IT+0x76>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d104      	bne.n	800c3d0 <UART_Start_Receive_IT+0x6c>
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	22ff      	movs	r2, #255	; 0xff
 800c3ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3ce:	e01b      	b.n	800c408 <UART_Start_Receive_IT+0xa4>
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	227f      	movs	r2, #127	; 0x7f
 800c3d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3d8:	e016      	b.n	800c408 <UART_Start_Receive_IT+0xa4>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3e2:	d10d      	bne.n	800c400 <UART_Start_Receive_IT+0x9c>
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d104      	bne.n	800c3f6 <UART_Start_Receive_IT+0x92>
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	227f      	movs	r2, #127	; 0x7f
 800c3f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3f4:	e008      	b.n	800c408 <UART_Start_Receive_IT+0xa4>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	223f      	movs	r2, #63	; 0x3f
 800c3fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c3fe:	e003      	b.n	800c408 <UART_Start_Receive_IT+0xa4>
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2200      	movs	r2, #0
 800c404:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2222      	movs	r2, #34	; 0x22
 800c414:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	3308      	adds	r3, #8
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c420:	e853 3f00 	ldrex	r3, [r3]
 800c424:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c428:	f043 0301 	orr.w	r3, r3, #1
 800c42c:	657b      	str	r3, [r7, #84]	; 0x54
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3308      	adds	r3, #8
 800c434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c436:	64ba      	str	r2, [r7, #72]	; 0x48
 800c438:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c43c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c43e:	e841 2300 	strex	r3, r2, [r1]
 800c442:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1e5      	bne.n	800c416 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	689b      	ldr	r3, [r3, #8]
 800c44e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c452:	d107      	bne.n	800c464 <UART_Start_Receive_IT+0x100>
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d103      	bne.n	800c464 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	4a24      	ldr	r2, [pc, #144]	; (800c4f0 <UART_Start_Receive_IT+0x18c>)
 800c460:	665a      	str	r2, [r3, #100]	; 0x64
 800c462:	e002      	b.n	800c46a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	4a23      	ldr	r2, [pc, #140]	; (800c4f4 <UART_Start_Receive_IT+0x190>)
 800c468:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d019      	beq.n	800c4ae <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c482:	e853 3f00 	ldrex	r3, [r3]
 800c486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c48e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	461a      	mov	r2, r3
 800c496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c498:	637b      	str	r3, [r7, #52]	; 0x34
 800c49a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c49c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c49e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4a0:	e841 2300 	strex	r3, r2, [r1]
 800c4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1e6      	bne.n	800c47a <UART_Start_Receive_IT+0x116>
 800c4ac:	e018      	b.n	800c4e0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	e853 3f00 	ldrex	r3, [r3]
 800c4ba:	613b      	str	r3, [r7, #16]
   return(result);
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	f043 0320 	orr.w	r3, r3, #32
 800c4c2:	653b      	str	r3, [r7, #80]	; 0x50
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4cc:	623b      	str	r3, [r7, #32]
 800c4ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d0:	69f9      	ldr	r1, [r7, #28]
 800c4d2:	6a3a      	ldr	r2, [r7, #32]
 800c4d4:	e841 2300 	strex	r3, r2, [r1]
 800c4d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d1e6      	bne.n	800c4ae <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	375c      	adds	r7, #92	; 0x5c
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	0800c917 	.word	0x0800c917
 800c4f4:	0800c7b7 	.word	0x0800c7b7

0800c4f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b095      	sub	sp, #84	; 0x54
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c508:	e853 3f00 	ldrex	r3, [r3]
 800c50c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c510:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c514:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	461a      	mov	r2, r3
 800c51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c51e:	643b      	str	r3, [r7, #64]	; 0x40
 800c520:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c522:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c524:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c526:	e841 2300 	strex	r3, r2, [r1]
 800c52a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e6      	bne.n	800c500 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3308      	adds	r3, #8
 800c538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	e853 3f00 	ldrex	r3, [r3]
 800c540:	61fb      	str	r3, [r7, #28]
   return(result);
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	f023 0301 	bic.w	r3, r3, #1
 800c548:	64bb      	str	r3, [r7, #72]	; 0x48
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	3308      	adds	r3, #8
 800c550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c552:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c554:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c55a:	e841 2300 	strex	r3, r2, [r1]
 800c55e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1e5      	bne.n	800c532 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d118      	bne.n	800c5a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	e853 3f00 	ldrex	r3, [r3]
 800c57a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	f023 0310 	bic.w	r3, r3, #16
 800c582:	647b      	str	r3, [r7, #68]	; 0x44
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	461a      	mov	r2, r3
 800c58a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c58c:	61bb      	str	r3, [r7, #24]
 800c58e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c590:	6979      	ldr	r1, [r7, #20]
 800c592:	69ba      	ldr	r2, [r7, #24]
 800c594:	e841 2300 	strex	r3, r2, [r1]
 800c598:	613b      	str	r3, [r7, #16]
   return(result);
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1e6      	bne.n	800c56e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2220      	movs	r2, #32
 800c5a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c5b2:	bf00      	nop
 800c5b4:	3754      	adds	r7, #84	; 0x54
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr

0800c5be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f7ff facf 	bl	800bb80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5e2:	bf00      	nop
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b08f      	sub	sp, #60	; 0x3c
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5f6:	2b21      	cmp	r3, #33	; 0x21
 800c5f8:	d14d      	bne.n	800c696 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c600:	b29b      	uxth	r3, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	d132      	bne.n	800c66c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60c:	6a3b      	ldr	r3, [r7, #32]
 800c60e:	e853 3f00 	ldrex	r3, [r3]
 800c612:	61fb      	str	r3, [r7, #28]
   return(result);
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c61a:	637b      	str	r3, [r7, #52]	; 0x34
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	461a      	mov	r2, r3
 800c622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c624:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c626:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c62a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c62c:	e841 2300 	strex	r3, r2, [r1]
 800c630:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c634:	2b00      	cmp	r3, #0
 800c636:	d1e6      	bne.n	800c606 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	e853 3f00 	ldrex	r3, [r3]
 800c644:	60bb      	str	r3, [r7, #8]
   return(result);
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c64c:	633b      	str	r3, [r7, #48]	; 0x30
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	461a      	mov	r2, r3
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	61bb      	str	r3, [r7, #24]
 800c658:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65a:	6979      	ldr	r1, [r7, #20]
 800c65c:	69ba      	ldr	r2, [r7, #24]
 800c65e:	e841 2300 	strex	r3, r2, [r1]
 800c662:	613b      	str	r3, [r7, #16]
   return(result);
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1e6      	bne.n	800c638 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c66a:	e014      	b.n	800c696 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c670:	781a      	ldrb	r2, [r3, #0]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	b292      	uxth	r2, r2
 800c678:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c67e:	1c5a      	adds	r2, r3, #1
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	3b01      	subs	r3, #1
 800c68e:	b29a      	uxth	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c696:	bf00      	nop
 800c698:	373c      	adds	r7, #60	; 0x3c
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr

0800c6a2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c6a2:	b480      	push	{r7}
 800c6a4:	b091      	sub	sp, #68	; 0x44
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6ae:	2b21      	cmp	r3, #33	; 0x21
 800c6b0:	d151      	bne.n	800c756 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d132      	bne.n	800c724 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c6:	e853 3f00 	ldrex	r3, [r3]
 800c6ca:	623b      	str	r3, [r7, #32]
   return(result);
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
 800c6ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6dc:	633b      	str	r3, [r7, #48]	; 0x30
 800c6de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6e4:	e841 2300 	strex	r3, r2, [r1]
 800c6e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d1e6      	bne.n	800c6be <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	e853 3f00 	ldrex	r3, [r3]
 800c6fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c704:	637b      	str	r3, [r7, #52]	; 0x34
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	461a      	mov	r2, r3
 800c70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70e:	61fb      	str	r3, [r7, #28]
 800c710:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c712:	69b9      	ldr	r1, [r7, #24]
 800c714:	69fa      	ldr	r2, [r7, #28]
 800c716:	e841 2300 	strex	r3, r2, [r1]
 800c71a:	617b      	str	r3, [r7, #20]
   return(result);
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1e6      	bne.n	800c6f0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c722:	e018      	b.n	800c756 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c728:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c72c:	881a      	ldrh	r2, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c736:	b292      	uxth	r2, r2
 800c738:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c73e:	1c9a      	adds	r2, r3, #2
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	3b01      	subs	r3, #1
 800c74e:	b29a      	uxth	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c756:	bf00      	nop
 800c758:	3744      	adds	r7, #68	; 0x44
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr

0800c762 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b088      	sub	sp, #32
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	e853 3f00 	ldrex	r3, [r3]
 800c776:	60bb      	str	r3, [r7, #8]
   return(result);
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c77e:	61fb      	str	r3, [r7, #28]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	461a      	mov	r2, r3
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	61bb      	str	r3, [r7, #24]
 800c78a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78c:	6979      	ldr	r1, [r7, #20]
 800c78e:	69ba      	ldr	r2, [r7, #24]
 800c790:	e841 2300 	strex	r3, r2, [r1]
 800c794:	613b      	str	r3, [r7, #16]
   return(result);
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1e6      	bne.n	800c76a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2220      	movs	r2, #32
 800c7a0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7fc fecf 	bl	800954c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7ae:	bf00      	nop
 800c7b0:	3720      	adds	r7, #32
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b096      	sub	sp, #88	; 0x58
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7cc:	2b22      	cmp	r3, #34	; 0x22
 800c7ce:	f040 8094 	bne.w	800c8fa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c7d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c7dc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c7e0:	b2d9      	uxtb	r1, r3
 800c7e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ec:	400a      	ands	r2, r1
 800c7ee:	b2d2      	uxtb	r2, r2
 800c7f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c802:	b29b      	uxth	r3, r3
 800c804:	3b01      	subs	r3, #1
 800c806:	b29a      	uxth	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c814:	b29b      	uxth	r3, r3
 800c816:	2b00      	cmp	r3, #0
 800c818:	d179      	bne.n	800c90e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c822:	e853 3f00 	ldrex	r3, [r3]
 800c826:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c82e:	653b      	str	r3, [r7, #80]	; 0x50
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	461a      	mov	r2, r3
 800c836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c838:	647b      	str	r3, [r7, #68]	; 0x44
 800c83a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c83e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c840:	e841 2300 	strex	r3, r2, [r1]
 800c844:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1e6      	bne.n	800c81a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	3308      	adds	r3, #8
 800c852:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	e853 3f00 	ldrex	r3, [r3]
 800c85a:	623b      	str	r3, [r7, #32]
   return(result);
 800c85c:	6a3b      	ldr	r3, [r7, #32]
 800c85e:	f023 0301 	bic.w	r3, r3, #1
 800c862:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	3308      	adds	r3, #8
 800c86a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c86c:	633a      	str	r2, [r7, #48]	; 0x30
 800c86e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c874:	e841 2300 	strex	r3, r2, [r1]
 800c878:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1e5      	bne.n	800c84c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2220      	movs	r2, #32
 800c884:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c890:	2b01      	cmp	r3, #1
 800c892:	d12e      	bne.n	800c8f2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	e853 3f00 	ldrex	r3, [r3]
 800c8a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 0310 	bic.w	r3, r3, #16
 800c8ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8b8:	61fb      	str	r3, [r7, #28]
 800c8ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8bc:	69b9      	ldr	r1, [r7, #24]
 800c8be:	69fa      	ldr	r2, [r7, #28]
 800c8c0:	e841 2300 	strex	r3, r2, [r1]
 800c8c4:	617b      	str	r3, [r7, #20]
   return(result);
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1e6      	bne.n	800c89a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	69db      	ldr	r3, [r3, #28]
 800c8d2:	f003 0310 	and.w	r3, r3, #16
 800c8d6:	2b10      	cmp	r3, #16
 800c8d8:	d103      	bne.n	800c8e2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2210      	movs	r2, #16
 800c8e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7ff f952 	bl	800bb94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c8f0:	e00d      	b.n	800c90e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7fc fe08 	bl	8009508 <HAL_UART_RxCpltCallback>
}
 800c8f8:	e009      	b.n	800c90e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	8b1b      	ldrh	r3, [r3, #24]
 800c900:	b29a      	uxth	r2, r3
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f042 0208 	orr.w	r2, r2, #8
 800c90a:	b292      	uxth	r2, r2
 800c90c:	831a      	strh	r2, [r3, #24]
}
 800c90e:	bf00      	nop
 800c910:	3758      	adds	r7, #88	; 0x58
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b096      	sub	sp, #88	; 0x58
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c924:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c92c:	2b22      	cmp	r3, #34	; 0x22
 800c92e:	f040 8094 	bne.w	800ca5a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c938:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c940:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c942:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c946:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c94a:	4013      	ands	r3, r2
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c950:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c956:	1c9a      	adds	r2, r3, #2
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c962:	b29b      	uxth	r3, r3
 800c964:	3b01      	subs	r3, #1
 800c966:	b29a      	uxth	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c974:	b29b      	uxth	r3, r3
 800c976:	2b00      	cmp	r3, #0
 800c978:	d179      	bne.n	800ca6e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c982:	e853 3f00 	ldrex	r3, [r3]
 800c986:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c98e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	461a      	mov	r2, r3
 800c996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c998:	643b      	str	r3, [r7, #64]	; 0x40
 800c99a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c99e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9a0:	e841 2300 	strex	r3, r2, [r1]
 800c9a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d1e6      	bne.n	800c97a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	3308      	adds	r3, #8
 800c9b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b4:	6a3b      	ldr	r3, [r7, #32]
 800c9b6:	e853 3f00 	ldrex	r3, [r3]
 800c9ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	f023 0301 	bic.w	r3, r3, #1
 800c9c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	3308      	adds	r3, #8
 800c9ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c9ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9d4:	e841 2300 	strex	r3, r2, [r1]
 800c9d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d1e5      	bne.n	800c9ac <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2220      	movs	r2, #32
 800c9e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d12e      	bne.n	800ca52 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	e853 3f00 	ldrex	r3, [r3]
 800ca06:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	f023 0310 	bic.w	r3, r3, #16
 800ca0e:	647b      	str	r3, [r7, #68]	; 0x44
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	461a      	mov	r2, r3
 800ca16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca18:	61bb      	str	r3, [r7, #24]
 800ca1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1c:	6979      	ldr	r1, [r7, #20]
 800ca1e:	69ba      	ldr	r2, [r7, #24]
 800ca20:	e841 2300 	strex	r3, r2, [r1]
 800ca24:	613b      	str	r3, [r7, #16]
   return(result);
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1e6      	bne.n	800c9fa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	69db      	ldr	r3, [r3, #28]
 800ca32:	f003 0310 	and.w	r3, r3, #16
 800ca36:	2b10      	cmp	r3, #16
 800ca38:	d103      	bne.n	800ca42 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2210      	movs	r2, #16
 800ca40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ca48:	4619      	mov	r1, r3
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7ff f8a2 	bl	800bb94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca50:	e00d      	b.n	800ca6e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7fc fd58 	bl	8009508 <HAL_UART_RxCpltCallback>
}
 800ca58:	e009      	b.n	800ca6e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	8b1b      	ldrh	r3, [r3, #24]
 800ca60:	b29a      	uxth	r2, r3
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f042 0208 	orr.w	r2, r2, #8
 800ca6a:	b292      	uxth	r2, r2
 800ca6c:	831a      	strh	r2, [r3, #24]
}
 800ca6e:	bf00      	nop
 800ca70:	3758      	adds	r7, #88	; 0x58
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca76:	b480      	push	{r7}
 800ca78:	b083      	sub	sp, #12
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca7e:	bf00      	nop
 800ca80:	370c      	adds	r7, #12
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr

0800ca8a <atof>:
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	f001 bafe 	b.w	800e08c <strtod>

0800ca90 <__errno>:
 800ca90:	4b01      	ldr	r3, [pc, #4]	; (800ca98 <__errno+0x8>)
 800ca92:	6818      	ldr	r0, [r3, #0]
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	2000000c 	.word	0x2000000c

0800ca9c <__libc_init_array>:
 800ca9c:	b570      	push	{r4, r5, r6, lr}
 800ca9e:	4d0d      	ldr	r5, [pc, #52]	; (800cad4 <__libc_init_array+0x38>)
 800caa0:	4c0d      	ldr	r4, [pc, #52]	; (800cad8 <__libc_init_array+0x3c>)
 800caa2:	1b64      	subs	r4, r4, r5
 800caa4:	10a4      	asrs	r4, r4, #2
 800caa6:	2600      	movs	r6, #0
 800caa8:	42a6      	cmp	r6, r4
 800caaa:	d109      	bne.n	800cac0 <__libc_init_array+0x24>
 800caac:	4d0b      	ldr	r5, [pc, #44]	; (800cadc <__libc_init_array+0x40>)
 800caae:	4c0c      	ldr	r4, [pc, #48]	; (800cae0 <__libc_init_array+0x44>)
 800cab0:	f004 fb9a 	bl	80111e8 <_init>
 800cab4:	1b64      	subs	r4, r4, r5
 800cab6:	10a4      	asrs	r4, r4, #2
 800cab8:	2600      	movs	r6, #0
 800caba:	42a6      	cmp	r6, r4
 800cabc:	d105      	bne.n	800caca <__libc_init_array+0x2e>
 800cabe:	bd70      	pop	{r4, r5, r6, pc}
 800cac0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cac4:	4798      	blx	r3
 800cac6:	3601      	adds	r6, #1
 800cac8:	e7ee      	b.n	800caa8 <__libc_init_array+0xc>
 800caca:	f855 3b04 	ldr.w	r3, [r5], #4
 800cace:	4798      	blx	r3
 800cad0:	3601      	adds	r6, #1
 800cad2:	e7f2      	b.n	800caba <__libc_init_array+0x1e>
 800cad4:	080119b8 	.word	0x080119b8
 800cad8:	080119b8 	.word	0x080119b8
 800cadc:	080119b8 	.word	0x080119b8
 800cae0:	080119bc 	.word	0x080119bc

0800cae4 <memcpy>:
 800cae4:	440a      	add	r2, r1
 800cae6:	4291      	cmp	r1, r2
 800cae8:	f100 33ff 	add.w	r3, r0, #4294967295
 800caec:	d100      	bne.n	800caf0 <memcpy+0xc>
 800caee:	4770      	bx	lr
 800caf0:	b510      	push	{r4, lr}
 800caf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cafa:	4291      	cmp	r1, r2
 800cafc:	d1f9      	bne.n	800caf2 <memcpy+0xe>
 800cafe:	bd10      	pop	{r4, pc}

0800cb00 <memset>:
 800cb00:	4402      	add	r2, r0
 800cb02:	4603      	mov	r3, r0
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d100      	bne.n	800cb0a <memset+0xa>
 800cb08:	4770      	bx	lr
 800cb0a:	f803 1b01 	strb.w	r1, [r3], #1
 800cb0e:	e7f9      	b.n	800cb04 <memset+0x4>

0800cb10 <__cvt>:
 800cb10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb14:	ec55 4b10 	vmov	r4, r5, d0
 800cb18:	2d00      	cmp	r5, #0
 800cb1a:	460e      	mov	r6, r1
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	462b      	mov	r3, r5
 800cb20:	bfbb      	ittet	lt
 800cb22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cb26:	461d      	movlt	r5, r3
 800cb28:	2300      	movge	r3, #0
 800cb2a:	232d      	movlt	r3, #45	; 0x2d
 800cb2c:	700b      	strb	r3, [r1, #0]
 800cb2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cb34:	4691      	mov	r9, r2
 800cb36:	f023 0820 	bic.w	r8, r3, #32
 800cb3a:	bfbc      	itt	lt
 800cb3c:	4622      	movlt	r2, r4
 800cb3e:	4614      	movlt	r4, r2
 800cb40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb44:	d005      	beq.n	800cb52 <__cvt+0x42>
 800cb46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cb4a:	d100      	bne.n	800cb4e <__cvt+0x3e>
 800cb4c:	3601      	adds	r6, #1
 800cb4e:	2102      	movs	r1, #2
 800cb50:	e000      	b.n	800cb54 <__cvt+0x44>
 800cb52:	2103      	movs	r1, #3
 800cb54:	ab03      	add	r3, sp, #12
 800cb56:	9301      	str	r3, [sp, #4]
 800cb58:	ab02      	add	r3, sp, #8
 800cb5a:	9300      	str	r3, [sp, #0]
 800cb5c:	ec45 4b10 	vmov	d0, r4, r5
 800cb60:	4653      	mov	r3, sl
 800cb62:	4632      	mov	r2, r6
 800cb64:	f001 fba4 	bl	800e2b0 <_dtoa_r>
 800cb68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cb6c:	4607      	mov	r7, r0
 800cb6e:	d102      	bne.n	800cb76 <__cvt+0x66>
 800cb70:	f019 0f01 	tst.w	r9, #1
 800cb74:	d022      	beq.n	800cbbc <__cvt+0xac>
 800cb76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb7a:	eb07 0906 	add.w	r9, r7, r6
 800cb7e:	d110      	bne.n	800cba2 <__cvt+0x92>
 800cb80:	783b      	ldrb	r3, [r7, #0]
 800cb82:	2b30      	cmp	r3, #48	; 0x30
 800cb84:	d10a      	bne.n	800cb9c <__cvt+0x8c>
 800cb86:	2200      	movs	r2, #0
 800cb88:	2300      	movs	r3, #0
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	f7f3 ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb92:	b918      	cbnz	r0, 800cb9c <__cvt+0x8c>
 800cb94:	f1c6 0601 	rsb	r6, r6, #1
 800cb98:	f8ca 6000 	str.w	r6, [sl]
 800cb9c:	f8da 3000 	ldr.w	r3, [sl]
 800cba0:	4499      	add	r9, r3
 800cba2:	2200      	movs	r2, #0
 800cba4:	2300      	movs	r3, #0
 800cba6:	4620      	mov	r0, r4
 800cba8:	4629      	mov	r1, r5
 800cbaa:	f7f3 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbae:	b108      	cbz	r0, 800cbb4 <__cvt+0xa4>
 800cbb0:	f8cd 900c 	str.w	r9, [sp, #12]
 800cbb4:	2230      	movs	r2, #48	; 0x30
 800cbb6:	9b03      	ldr	r3, [sp, #12]
 800cbb8:	454b      	cmp	r3, r9
 800cbba:	d307      	bcc.n	800cbcc <__cvt+0xbc>
 800cbbc:	9b03      	ldr	r3, [sp, #12]
 800cbbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbc0:	1bdb      	subs	r3, r3, r7
 800cbc2:	4638      	mov	r0, r7
 800cbc4:	6013      	str	r3, [r2, #0]
 800cbc6:	b004      	add	sp, #16
 800cbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbcc:	1c59      	adds	r1, r3, #1
 800cbce:	9103      	str	r1, [sp, #12]
 800cbd0:	701a      	strb	r2, [r3, #0]
 800cbd2:	e7f0      	b.n	800cbb6 <__cvt+0xa6>

0800cbd4 <__exponent>:
 800cbd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2900      	cmp	r1, #0
 800cbda:	bfb8      	it	lt
 800cbdc:	4249      	neglt	r1, r1
 800cbde:	f803 2b02 	strb.w	r2, [r3], #2
 800cbe2:	bfb4      	ite	lt
 800cbe4:	222d      	movlt	r2, #45	; 0x2d
 800cbe6:	222b      	movge	r2, #43	; 0x2b
 800cbe8:	2909      	cmp	r1, #9
 800cbea:	7042      	strb	r2, [r0, #1]
 800cbec:	dd2a      	ble.n	800cc44 <__exponent+0x70>
 800cbee:	f10d 0407 	add.w	r4, sp, #7
 800cbf2:	46a4      	mov	ip, r4
 800cbf4:	270a      	movs	r7, #10
 800cbf6:	46a6      	mov	lr, r4
 800cbf8:	460a      	mov	r2, r1
 800cbfa:	fb91 f6f7 	sdiv	r6, r1, r7
 800cbfe:	fb07 1516 	mls	r5, r7, r6, r1
 800cc02:	3530      	adds	r5, #48	; 0x30
 800cc04:	2a63      	cmp	r2, #99	; 0x63
 800cc06:	f104 34ff 	add.w	r4, r4, #4294967295
 800cc0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cc0e:	4631      	mov	r1, r6
 800cc10:	dcf1      	bgt.n	800cbf6 <__exponent+0x22>
 800cc12:	3130      	adds	r1, #48	; 0x30
 800cc14:	f1ae 0502 	sub.w	r5, lr, #2
 800cc18:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cc1c:	1c44      	adds	r4, r0, #1
 800cc1e:	4629      	mov	r1, r5
 800cc20:	4561      	cmp	r1, ip
 800cc22:	d30a      	bcc.n	800cc3a <__exponent+0x66>
 800cc24:	f10d 0209 	add.w	r2, sp, #9
 800cc28:	eba2 020e 	sub.w	r2, r2, lr
 800cc2c:	4565      	cmp	r5, ip
 800cc2e:	bf88      	it	hi
 800cc30:	2200      	movhi	r2, #0
 800cc32:	4413      	add	r3, r2
 800cc34:	1a18      	subs	r0, r3, r0
 800cc36:	b003      	add	sp, #12
 800cc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cc42:	e7ed      	b.n	800cc20 <__exponent+0x4c>
 800cc44:	2330      	movs	r3, #48	; 0x30
 800cc46:	3130      	adds	r1, #48	; 0x30
 800cc48:	7083      	strb	r3, [r0, #2]
 800cc4a:	70c1      	strb	r1, [r0, #3]
 800cc4c:	1d03      	adds	r3, r0, #4
 800cc4e:	e7f1      	b.n	800cc34 <__exponent+0x60>

0800cc50 <_printf_float>:
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	ed2d 8b02 	vpush	{d8}
 800cc58:	b08d      	sub	sp, #52	; 0x34
 800cc5a:	460c      	mov	r4, r1
 800cc5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cc60:	4616      	mov	r6, r2
 800cc62:	461f      	mov	r7, r3
 800cc64:	4605      	mov	r5, r0
 800cc66:	f002 fc93 	bl	800f590 <_localeconv_r>
 800cc6a:	f8d0 a000 	ldr.w	sl, [r0]
 800cc6e:	4650      	mov	r0, sl
 800cc70:	f7f3 faae 	bl	80001d0 <strlen>
 800cc74:	2300      	movs	r3, #0
 800cc76:	930a      	str	r3, [sp, #40]	; 0x28
 800cc78:	6823      	ldr	r3, [r4, #0]
 800cc7a:	9305      	str	r3, [sp, #20]
 800cc7c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc80:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cc84:	3307      	adds	r3, #7
 800cc86:	f023 0307 	bic.w	r3, r3, #7
 800cc8a:	f103 0208 	add.w	r2, r3, #8
 800cc8e:	f8c8 2000 	str.w	r2, [r8]
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cc9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cc9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cca2:	9307      	str	r3, [sp, #28]
 800cca4:	f8cd 8018 	str.w	r8, [sp, #24]
 800cca8:	ee08 0a10 	vmov	s16, r0
 800ccac:	4b9f      	ldr	r3, [pc, #636]	; (800cf2c <_printf_float+0x2dc>)
 800ccae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccb2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb6:	f7f3 ff39 	bl	8000b2c <__aeabi_dcmpun>
 800ccba:	bb88      	cbnz	r0, 800cd20 <_printf_float+0xd0>
 800ccbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccc0:	4b9a      	ldr	r3, [pc, #616]	; (800cf2c <_printf_float+0x2dc>)
 800ccc2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc6:	f7f3 ff13 	bl	8000af0 <__aeabi_dcmple>
 800ccca:	bb48      	cbnz	r0, 800cd20 <_printf_float+0xd0>
 800cccc:	2200      	movs	r2, #0
 800ccce:	2300      	movs	r3, #0
 800ccd0:	4640      	mov	r0, r8
 800ccd2:	4649      	mov	r1, r9
 800ccd4:	f7f3 ff02 	bl	8000adc <__aeabi_dcmplt>
 800ccd8:	b110      	cbz	r0, 800cce0 <_printf_float+0x90>
 800ccda:	232d      	movs	r3, #45	; 0x2d
 800ccdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cce0:	4b93      	ldr	r3, [pc, #588]	; (800cf30 <_printf_float+0x2e0>)
 800cce2:	4894      	ldr	r0, [pc, #592]	; (800cf34 <_printf_float+0x2e4>)
 800cce4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cce8:	bf94      	ite	ls
 800ccea:	4698      	movls	r8, r3
 800ccec:	4680      	movhi	r8, r0
 800ccee:	2303      	movs	r3, #3
 800ccf0:	6123      	str	r3, [r4, #16]
 800ccf2:	9b05      	ldr	r3, [sp, #20]
 800ccf4:	f023 0204 	bic.w	r2, r3, #4
 800ccf8:	6022      	str	r2, [r4, #0]
 800ccfa:	f04f 0900 	mov.w	r9, #0
 800ccfe:	9700      	str	r7, [sp, #0]
 800cd00:	4633      	mov	r3, r6
 800cd02:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd04:	4621      	mov	r1, r4
 800cd06:	4628      	mov	r0, r5
 800cd08:	f000 f9d8 	bl	800d0bc <_printf_common>
 800cd0c:	3001      	adds	r0, #1
 800cd0e:	f040 8090 	bne.w	800ce32 <_printf_float+0x1e2>
 800cd12:	f04f 30ff 	mov.w	r0, #4294967295
 800cd16:	b00d      	add	sp, #52	; 0x34
 800cd18:	ecbd 8b02 	vpop	{d8}
 800cd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd20:	4642      	mov	r2, r8
 800cd22:	464b      	mov	r3, r9
 800cd24:	4640      	mov	r0, r8
 800cd26:	4649      	mov	r1, r9
 800cd28:	f7f3 ff00 	bl	8000b2c <__aeabi_dcmpun>
 800cd2c:	b140      	cbz	r0, 800cd40 <_printf_float+0xf0>
 800cd2e:	464b      	mov	r3, r9
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	bfbc      	itt	lt
 800cd34:	232d      	movlt	r3, #45	; 0x2d
 800cd36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cd3a:	487f      	ldr	r0, [pc, #508]	; (800cf38 <_printf_float+0x2e8>)
 800cd3c:	4b7f      	ldr	r3, [pc, #508]	; (800cf3c <_printf_float+0x2ec>)
 800cd3e:	e7d1      	b.n	800cce4 <_printf_float+0x94>
 800cd40:	6863      	ldr	r3, [r4, #4]
 800cd42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cd46:	9206      	str	r2, [sp, #24]
 800cd48:	1c5a      	adds	r2, r3, #1
 800cd4a:	d13f      	bne.n	800cdcc <_printf_float+0x17c>
 800cd4c:	2306      	movs	r3, #6
 800cd4e:	6063      	str	r3, [r4, #4]
 800cd50:	9b05      	ldr	r3, [sp, #20]
 800cd52:	6861      	ldr	r1, [r4, #4]
 800cd54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cd58:	2300      	movs	r3, #0
 800cd5a:	9303      	str	r3, [sp, #12]
 800cd5c:	ab0a      	add	r3, sp, #40	; 0x28
 800cd5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cd62:	ab09      	add	r3, sp, #36	; 0x24
 800cd64:	ec49 8b10 	vmov	d0, r8, r9
 800cd68:	9300      	str	r3, [sp, #0]
 800cd6a:	6022      	str	r2, [r4, #0]
 800cd6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cd70:	4628      	mov	r0, r5
 800cd72:	f7ff fecd 	bl	800cb10 <__cvt>
 800cd76:	9b06      	ldr	r3, [sp, #24]
 800cd78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd7a:	2b47      	cmp	r3, #71	; 0x47
 800cd7c:	4680      	mov	r8, r0
 800cd7e:	d108      	bne.n	800cd92 <_printf_float+0x142>
 800cd80:	1cc8      	adds	r0, r1, #3
 800cd82:	db02      	blt.n	800cd8a <_printf_float+0x13a>
 800cd84:	6863      	ldr	r3, [r4, #4]
 800cd86:	4299      	cmp	r1, r3
 800cd88:	dd41      	ble.n	800ce0e <_printf_float+0x1be>
 800cd8a:	f1ab 0b02 	sub.w	fp, fp, #2
 800cd8e:	fa5f fb8b 	uxtb.w	fp, fp
 800cd92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd96:	d820      	bhi.n	800cdda <_printf_float+0x18a>
 800cd98:	3901      	subs	r1, #1
 800cd9a:	465a      	mov	r2, fp
 800cd9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cda0:	9109      	str	r1, [sp, #36]	; 0x24
 800cda2:	f7ff ff17 	bl	800cbd4 <__exponent>
 800cda6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cda8:	1813      	adds	r3, r2, r0
 800cdaa:	2a01      	cmp	r2, #1
 800cdac:	4681      	mov	r9, r0
 800cdae:	6123      	str	r3, [r4, #16]
 800cdb0:	dc02      	bgt.n	800cdb8 <_printf_float+0x168>
 800cdb2:	6822      	ldr	r2, [r4, #0]
 800cdb4:	07d2      	lsls	r2, r2, #31
 800cdb6:	d501      	bpl.n	800cdbc <_printf_float+0x16c>
 800cdb8:	3301      	adds	r3, #1
 800cdba:	6123      	str	r3, [r4, #16]
 800cdbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d09c      	beq.n	800ccfe <_printf_float+0xae>
 800cdc4:	232d      	movs	r3, #45	; 0x2d
 800cdc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdca:	e798      	b.n	800ccfe <_printf_float+0xae>
 800cdcc:	9a06      	ldr	r2, [sp, #24]
 800cdce:	2a47      	cmp	r2, #71	; 0x47
 800cdd0:	d1be      	bne.n	800cd50 <_printf_float+0x100>
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1bc      	bne.n	800cd50 <_printf_float+0x100>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e7b9      	b.n	800cd4e <_printf_float+0xfe>
 800cdda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cdde:	d118      	bne.n	800ce12 <_printf_float+0x1c2>
 800cde0:	2900      	cmp	r1, #0
 800cde2:	6863      	ldr	r3, [r4, #4]
 800cde4:	dd0b      	ble.n	800cdfe <_printf_float+0x1ae>
 800cde6:	6121      	str	r1, [r4, #16]
 800cde8:	b913      	cbnz	r3, 800cdf0 <_printf_float+0x1a0>
 800cdea:	6822      	ldr	r2, [r4, #0]
 800cdec:	07d0      	lsls	r0, r2, #31
 800cdee:	d502      	bpl.n	800cdf6 <_printf_float+0x1a6>
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	440b      	add	r3, r1
 800cdf4:	6123      	str	r3, [r4, #16]
 800cdf6:	65a1      	str	r1, [r4, #88]	; 0x58
 800cdf8:	f04f 0900 	mov.w	r9, #0
 800cdfc:	e7de      	b.n	800cdbc <_printf_float+0x16c>
 800cdfe:	b913      	cbnz	r3, 800ce06 <_printf_float+0x1b6>
 800ce00:	6822      	ldr	r2, [r4, #0]
 800ce02:	07d2      	lsls	r2, r2, #31
 800ce04:	d501      	bpl.n	800ce0a <_printf_float+0x1ba>
 800ce06:	3302      	adds	r3, #2
 800ce08:	e7f4      	b.n	800cdf4 <_printf_float+0x1a4>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e7f2      	b.n	800cdf4 <_printf_float+0x1a4>
 800ce0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ce12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce14:	4299      	cmp	r1, r3
 800ce16:	db05      	blt.n	800ce24 <_printf_float+0x1d4>
 800ce18:	6823      	ldr	r3, [r4, #0]
 800ce1a:	6121      	str	r1, [r4, #16]
 800ce1c:	07d8      	lsls	r0, r3, #31
 800ce1e:	d5ea      	bpl.n	800cdf6 <_printf_float+0x1a6>
 800ce20:	1c4b      	adds	r3, r1, #1
 800ce22:	e7e7      	b.n	800cdf4 <_printf_float+0x1a4>
 800ce24:	2900      	cmp	r1, #0
 800ce26:	bfd4      	ite	le
 800ce28:	f1c1 0202 	rsble	r2, r1, #2
 800ce2c:	2201      	movgt	r2, #1
 800ce2e:	4413      	add	r3, r2
 800ce30:	e7e0      	b.n	800cdf4 <_printf_float+0x1a4>
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	055a      	lsls	r2, r3, #21
 800ce36:	d407      	bmi.n	800ce48 <_printf_float+0x1f8>
 800ce38:	6923      	ldr	r3, [r4, #16]
 800ce3a:	4642      	mov	r2, r8
 800ce3c:	4631      	mov	r1, r6
 800ce3e:	4628      	mov	r0, r5
 800ce40:	47b8      	blx	r7
 800ce42:	3001      	adds	r0, #1
 800ce44:	d12c      	bne.n	800cea0 <_printf_float+0x250>
 800ce46:	e764      	b.n	800cd12 <_printf_float+0xc2>
 800ce48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce4c:	f240 80e0 	bls.w	800d010 <_printf_float+0x3c0>
 800ce50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce54:	2200      	movs	r2, #0
 800ce56:	2300      	movs	r3, #0
 800ce58:	f7f3 fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	d034      	beq.n	800ceca <_printf_float+0x27a>
 800ce60:	4a37      	ldr	r2, [pc, #220]	; (800cf40 <_printf_float+0x2f0>)
 800ce62:	2301      	movs	r3, #1
 800ce64:	4631      	mov	r1, r6
 800ce66:	4628      	mov	r0, r5
 800ce68:	47b8      	blx	r7
 800ce6a:	3001      	adds	r0, #1
 800ce6c:	f43f af51 	beq.w	800cd12 <_printf_float+0xc2>
 800ce70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce74:	429a      	cmp	r2, r3
 800ce76:	db02      	blt.n	800ce7e <_printf_float+0x22e>
 800ce78:	6823      	ldr	r3, [r4, #0]
 800ce7a:	07d8      	lsls	r0, r3, #31
 800ce7c:	d510      	bpl.n	800cea0 <_printf_float+0x250>
 800ce7e:	ee18 3a10 	vmov	r3, s16
 800ce82:	4652      	mov	r2, sl
 800ce84:	4631      	mov	r1, r6
 800ce86:	4628      	mov	r0, r5
 800ce88:	47b8      	blx	r7
 800ce8a:	3001      	adds	r0, #1
 800ce8c:	f43f af41 	beq.w	800cd12 <_printf_float+0xc2>
 800ce90:	f04f 0800 	mov.w	r8, #0
 800ce94:	f104 091a 	add.w	r9, r4, #26
 800ce98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce9a:	3b01      	subs	r3, #1
 800ce9c:	4543      	cmp	r3, r8
 800ce9e:	dc09      	bgt.n	800ceb4 <_printf_float+0x264>
 800cea0:	6823      	ldr	r3, [r4, #0]
 800cea2:	079b      	lsls	r3, r3, #30
 800cea4:	f100 8105 	bmi.w	800d0b2 <_printf_float+0x462>
 800cea8:	68e0      	ldr	r0, [r4, #12]
 800ceaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceac:	4298      	cmp	r0, r3
 800ceae:	bfb8      	it	lt
 800ceb0:	4618      	movlt	r0, r3
 800ceb2:	e730      	b.n	800cd16 <_printf_float+0xc6>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	464a      	mov	r2, r9
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4628      	mov	r0, r5
 800cebc:	47b8      	blx	r7
 800cebe:	3001      	adds	r0, #1
 800cec0:	f43f af27 	beq.w	800cd12 <_printf_float+0xc2>
 800cec4:	f108 0801 	add.w	r8, r8, #1
 800cec8:	e7e6      	b.n	800ce98 <_printf_float+0x248>
 800ceca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cecc:	2b00      	cmp	r3, #0
 800cece:	dc39      	bgt.n	800cf44 <_printf_float+0x2f4>
 800ced0:	4a1b      	ldr	r2, [pc, #108]	; (800cf40 <_printf_float+0x2f0>)
 800ced2:	2301      	movs	r3, #1
 800ced4:	4631      	mov	r1, r6
 800ced6:	4628      	mov	r0, r5
 800ced8:	47b8      	blx	r7
 800ceda:	3001      	adds	r0, #1
 800cedc:	f43f af19 	beq.w	800cd12 <_printf_float+0xc2>
 800cee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cee4:	4313      	orrs	r3, r2
 800cee6:	d102      	bne.n	800ceee <_printf_float+0x29e>
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	07d9      	lsls	r1, r3, #31
 800ceec:	d5d8      	bpl.n	800cea0 <_printf_float+0x250>
 800ceee:	ee18 3a10 	vmov	r3, s16
 800cef2:	4652      	mov	r2, sl
 800cef4:	4631      	mov	r1, r6
 800cef6:	4628      	mov	r0, r5
 800cef8:	47b8      	blx	r7
 800cefa:	3001      	adds	r0, #1
 800cefc:	f43f af09 	beq.w	800cd12 <_printf_float+0xc2>
 800cf00:	f04f 0900 	mov.w	r9, #0
 800cf04:	f104 0a1a 	add.w	sl, r4, #26
 800cf08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf0a:	425b      	negs	r3, r3
 800cf0c:	454b      	cmp	r3, r9
 800cf0e:	dc01      	bgt.n	800cf14 <_printf_float+0x2c4>
 800cf10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf12:	e792      	b.n	800ce3a <_printf_float+0x1ea>
 800cf14:	2301      	movs	r3, #1
 800cf16:	4652      	mov	r2, sl
 800cf18:	4631      	mov	r1, r6
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	47b8      	blx	r7
 800cf1e:	3001      	adds	r0, #1
 800cf20:	f43f aef7 	beq.w	800cd12 <_printf_float+0xc2>
 800cf24:	f109 0901 	add.w	r9, r9, #1
 800cf28:	e7ee      	b.n	800cf08 <_printf_float+0x2b8>
 800cf2a:	bf00      	nop
 800cf2c:	7fefffff 	.word	0x7fefffff
 800cf30:	080114bc 	.word	0x080114bc
 800cf34:	080114c0 	.word	0x080114c0
 800cf38:	080114c8 	.word	0x080114c8
 800cf3c:	080114c4 	.word	0x080114c4
 800cf40:	080114cc 	.word	0x080114cc
 800cf44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	bfa8      	it	ge
 800cf4c:	461a      	movge	r2, r3
 800cf4e:	2a00      	cmp	r2, #0
 800cf50:	4691      	mov	r9, r2
 800cf52:	dc37      	bgt.n	800cfc4 <_printf_float+0x374>
 800cf54:	f04f 0b00 	mov.w	fp, #0
 800cf58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf5c:	f104 021a 	add.w	r2, r4, #26
 800cf60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf62:	9305      	str	r3, [sp, #20]
 800cf64:	eba3 0309 	sub.w	r3, r3, r9
 800cf68:	455b      	cmp	r3, fp
 800cf6a:	dc33      	bgt.n	800cfd4 <_printf_float+0x384>
 800cf6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf70:	429a      	cmp	r2, r3
 800cf72:	db3b      	blt.n	800cfec <_printf_float+0x39c>
 800cf74:	6823      	ldr	r3, [r4, #0]
 800cf76:	07da      	lsls	r2, r3, #31
 800cf78:	d438      	bmi.n	800cfec <_printf_float+0x39c>
 800cf7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf7c:	9a05      	ldr	r2, [sp, #20]
 800cf7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf80:	1a9a      	subs	r2, r3, r2
 800cf82:	eba3 0901 	sub.w	r9, r3, r1
 800cf86:	4591      	cmp	r9, r2
 800cf88:	bfa8      	it	ge
 800cf8a:	4691      	movge	r9, r2
 800cf8c:	f1b9 0f00 	cmp.w	r9, #0
 800cf90:	dc35      	bgt.n	800cffe <_printf_float+0x3ae>
 800cf92:	f04f 0800 	mov.w	r8, #0
 800cf96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf9a:	f104 0a1a 	add.w	sl, r4, #26
 800cf9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfa2:	1a9b      	subs	r3, r3, r2
 800cfa4:	eba3 0309 	sub.w	r3, r3, r9
 800cfa8:	4543      	cmp	r3, r8
 800cfaa:	f77f af79 	ble.w	800cea0 <_printf_float+0x250>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	4652      	mov	r2, sl
 800cfb2:	4631      	mov	r1, r6
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	47b8      	blx	r7
 800cfb8:	3001      	adds	r0, #1
 800cfba:	f43f aeaa 	beq.w	800cd12 <_printf_float+0xc2>
 800cfbe:	f108 0801 	add.w	r8, r8, #1
 800cfc2:	e7ec      	b.n	800cf9e <_printf_float+0x34e>
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	4642      	mov	r2, r8
 800cfca:	4628      	mov	r0, r5
 800cfcc:	47b8      	blx	r7
 800cfce:	3001      	adds	r0, #1
 800cfd0:	d1c0      	bne.n	800cf54 <_printf_float+0x304>
 800cfd2:	e69e      	b.n	800cd12 <_printf_float+0xc2>
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	4631      	mov	r1, r6
 800cfd8:	4628      	mov	r0, r5
 800cfda:	9205      	str	r2, [sp, #20]
 800cfdc:	47b8      	blx	r7
 800cfde:	3001      	adds	r0, #1
 800cfe0:	f43f ae97 	beq.w	800cd12 <_printf_float+0xc2>
 800cfe4:	9a05      	ldr	r2, [sp, #20]
 800cfe6:	f10b 0b01 	add.w	fp, fp, #1
 800cfea:	e7b9      	b.n	800cf60 <_printf_float+0x310>
 800cfec:	ee18 3a10 	vmov	r3, s16
 800cff0:	4652      	mov	r2, sl
 800cff2:	4631      	mov	r1, r6
 800cff4:	4628      	mov	r0, r5
 800cff6:	47b8      	blx	r7
 800cff8:	3001      	adds	r0, #1
 800cffa:	d1be      	bne.n	800cf7a <_printf_float+0x32a>
 800cffc:	e689      	b.n	800cd12 <_printf_float+0xc2>
 800cffe:	9a05      	ldr	r2, [sp, #20]
 800d000:	464b      	mov	r3, r9
 800d002:	4442      	add	r2, r8
 800d004:	4631      	mov	r1, r6
 800d006:	4628      	mov	r0, r5
 800d008:	47b8      	blx	r7
 800d00a:	3001      	adds	r0, #1
 800d00c:	d1c1      	bne.n	800cf92 <_printf_float+0x342>
 800d00e:	e680      	b.n	800cd12 <_printf_float+0xc2>
 800d010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d012:	2a01      	cmp	r2, #1
 800d014:	dc01      	bgt.n	800d01a <_printf_float+0x3ca>
 800d016:	07db      	lsls	r3, r3, #31
 800d018:	d538      	bpl.n	800d08c <_printf_float+0x43c>
 800d01a:	2301      	movs	r3, #1
 800d01c:	4642      	mov	r2, r8
 800d01e:	4631      	mov	r1, r6
 800d020:	4628      	mov	r0, r5
 800d022:	47b8      	blx	r7
 800d024:	3001      	adds	r0, #1
 800d026:	f43f ae74 	beq.w	800cd12 <_printf_float+0xc2>
 800d02a:	ee18 3a10 	vmov	r3, s16
 800d02e:	4652      	mov	r2, sl
 800d030:	4631      	mov	r1, r6
 800d032:	4628      	mov	r0, r5
 800d034:	47b8      	blx	r7
 800d036:	3001      	adds	r0, #1
 800d038:	f43f ae6b 	beq.w	800cd12 <_printf_float+0xc2>
 800d03c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d040:	2200      	movs	r2, #0
 800d042:	2300      	movs	r3, #0
 800d044:	f7f3 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 800d048:	b9d8      	cbnz	r0, 800d082 <_printf_float+0x432>
 800d04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d04c:	f108 0201 	add.w	r2, r8, #1
 800d050:	3b01      	subs	r3, #1
 800d052:	4631      	mov	r1, r6
 800d054:	4628      	mov	r0, r5
 800d056:	47b8      	blx	r7
 800d058:	3001      	adds	r0, #1
 800d05a:	d10e      	bne.n	800d07a <_printf_float+0x42a>
 800d05c:	e659      	b.n	800cd12 <_printf_float+0xc2>
 800d05e:	2301      	movs	r3, #1
 800d060:	4652      	mov	r2, sl
 800d062:	4631      	mov	r1, r6
 800d064:	4628      	mov	r0, r5
 800d066:	47b8      	blx	r7
 800d068:	3001      	adds	r0, #1
 800d06a:	f43f ae52 	beq.w	800cd12 <_printf_float+0xc2>
 800d06e:	f108 0801 	add.w	r8, r8, #1
 800d072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d074:	3b01      	subs	r3, #1
 800d076:	4543      	cmp	r3, r8
 800d078:	dcf1      	bgt.n	800d05e <_printf_float+0x40e>
 800d07a:	464b      	mov	r3, r9
 800d07c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d080:	e6dc      	b.n	800ce3c <_printf_float+0x1ec>
 800d082:	f04f 0800 	mov.w	r8, #0
 800d086:	f104 0a1a 	add.w	sl, r4, #26
 800d08a:	e7f2      	b.n	800d072 <_printf_float+0x422>
 800d08c:	2301      	movs	r3, #1
 800d08e:	4642      	mov	r2, r8
 800d090:	e7df      	b.n	800d052 <_printf_float+0x402>
 800d092:	2301      	movs	r3, #1
 800d094:	464a      	mov	r2, r9
 800d096:	4631      	mov	r1, r6
 800d098:	4628      	mov	r0, r5
 800d09a:	47b8      	blx	r7
 800d09c:	3001      	adds	r0, #1
 800d09e:	f43f ae38 	beq.w	800cd12 <_printf_float+0xc2>
 800d0a2:	f108 0801 	add.w	r8, r8, #1
 800d0a6:	68e3      	ldr	r3, [r4, #12]
 800d0a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d0aa:	1a5b      	subs	r3, r3, r1
 800d0ac:	4543      	cmp	r3, r8
 800d0ae:	dcf0      	bgt.n	800d092 <_printf_float+0x442>
 800d0b0:	e6fa      	b.n	800cea8 <_printf_float+0x258>
 800d0b2:	f04f 0800 	mov.w	r8, #0
 800d0b6:	f104 0919 	add.w	r9, r4, #25
 800d0ba:	e7f4      	b.n	800d0a6 <_printf_float+0x456>

0800d0bc <_printf_common>:
 800d0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c0:	4616      	mov	r6, r2
 800d0c2:	4699      	mov	r9, r3
 800d0c4:	688a      	ldr	r2, [r1, #8]
 800d0c6:	690b      	ldr	r3, [r1, #16]
 800d0c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	bfb8      	it	lt
 800d0d0:	4613      	movlt	r3, r2
 800d0d2:	6033      	str	r3, [r6, #0]
 800d0d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0d8:	4607      	mov	r7, r0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	b10a      	cbz	r2, 800d0e2 <_printf_common+0x26>
 800d0de:	3301      	adds	r3, #1
 800d0e0:	6033      	str	r3, [r6, #0]
 800d0e2:	6823      	ldr	r3, [r4, #0]
 800d0e4:	0699      	lsls	r1, r3, #26
 800d0e6:	bf42      	ittt	mi
 800d0e8:	6833      	ldrmi	r3, [r6, #0]
 800d0ea:	3302      	addmi	r3, #2
 800d0ec:	6033      	strmi	r3, [r6, #0]
 800d0ee:	6825      	ldr	r5, [r4, #0]
 800d0f0:	f015 0506 	ands.w	r5, r5, #6
 800d0f4:	d106      	bne.n	800d104 <_printf_common+0x48>
 800d0f6:	f104 0a19 	add.w	sl, r4, #25
 800d0fa:	68e3      	ldr	r3, [r4, #12]
 800d0fc:	6832      	ldr	r2, [r6, #0]
 800d0fe:	1a9b      	subs	r3, r3, r2
 800d100:	42ab      	cmp	r3, r5
 800d102:	dc26      	bgt.n	800d152 <_printf_common+0x96>
 800d104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d108:	1e13      	subs	r3, r2, #0
 800d10a:	6822      	ldr	r2, [r4, #0]
 800d10c:	bf18      	it	ne
 800d10e:	2301      	movne	r3, #1
 800d110:	0692      	lsls	r2, r2, #26
 800d112:	d42b      	bmi.n	800d16c <_printf_common+0xb0>
 800d114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d118:	4649      	mov	r1, r9
 800d11a:	4638      	mov	r0, r7
 800d11c:	47c0      	blx	r8
 800d11e:	3001      	adds	r0, #1
 800d120:	d01e      	beq.n	800d160 <_printf_common+0xa4>
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	68e5      	ldr	r5, [r4, #12]
 800d126:	6832      	ldr	r2, [r6, #0]
 800d128:	f003 0306 	and.w	r3, r3, #6
 800d12c:	2b04      	cmp	r3, #4
 800d12e:	bf08      	it	eq
 800d130:	1aad      	subeq	r5, r5, r2
 800d132:	68a3      	ldr	r3, [r4, #8]
 800d134:	6922      	ldr	r2, [r4, #16]
 800d136:	bf0c      	ite	eq
 800d138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d13c:	2500      	movne	r5, #0
 800d13e:	4293      	cmp	r3, r2
 800d140:	bfc4      	itt	gt
 800d142:	1a9b      	subgt	r3, r3, r2
 800d144:	18ed      	addgt	r5, r5, r3
 800d146:	2600      	movs	r6, #0
 800d148:	341a      	adds	r4, #26
 800d14a:	42b5      	cmp	r5, r6
 800d14c:	d11a      	bne.n	800d184 <_printf_common+0xc8>
 800d14e:	2000      	movs	r0, #0
 800d150:	e008      	b.n	800d164 <_printf_common+0xa8>
 800d152:	2301      	movs	r3, #1
 800d154:	4652      	mov	r2, sl
 800d156:	4649      	mov	r1, r9
 800d158:	4638      	mov	r0, r7
 800d15a:	47c0      	blx	r8
 800d15c:	3001      	adds	r0, #1
 800d15e:	d103      	bne.n	800d168 <_printf_common+0xac>
 800d160:	f04f 30ff 	mov.w	r0, #4294967295
 800d164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d168:	3501      	adds	r5, #1
 800d16a:	e7c6      	b.n	800d0fa <_printf_common+0x3e>
 800d16c:	18e1      	adds	r1, r4, r3
 800d16e:	1c5a      	adds	r2, r3, #1
 800d170:	2030      	movs	r0, #48	; 0x30
 800d172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d176:	4422      	add	r2, r4
 800d178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d17c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d180:	3302      	adds	r3, #2
 800d182:	e7c7      	b.n	800d114 <_printf_common+0x58>
 800d184:	2301      	movs	r3, #1
 800d186:	4622      	mov	r2, r4
 800d188:	4649      	mov	r1, r9
 800d18a:	4638      	mov	r0, r7
 800d18c:	47c0      	blx	r8
 800d18e:	3001      	adds	r0, #1
 800d190:	d0e6      	beq.n	800d160 <_printf_common+0xa4>
 800d192:	3601      	adds	r6, #1
 800d194:	e7d9      	b.n	800d14a <_printf_common+0x8e>
	...

0800d198 <_printf_i>:
 800d198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d19c:	7e0f      	ldrb	r7, [r1, #24]
 800d19e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d1a0:	2f78      	cmp	r7, #120	; 0x78
 800d1a2:	4691      	mov	r9, r2
 800d1a4:	4680      	mov	r8, r0
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	469a      	mov	sl, r3
 800d1aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d1ae:	d807      	bhi.n	800d1c0 <_printf_i+0x28>
 800d1b0:	2f62      	cmp	r7, #98	; 0x62
 800d1b2:	d80a      	bhi.n	800d1ca <_printf_i+0x32>
 800d1b4:	2f00      	cmp	r7, #0
 800d1b6:	f000 80d8 	beq.w	800d36a <_printf_i+0x1d2>
 800d1ba:	2f58      	cmp	r7, #88	; 0x58
 800d1bc:	f000 80a3 	beq.w	800d306 <_printf_i+0x16e>
 800d1c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1c8:	e03a      	b.n	800d240 <_printf_i+0xa8>
 800d1ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1ce:	2b15      	cmp	r3, #21
 800d1d0:	d8f6      	bhi.n	800d1c0 <_printf_i+0x28>
 800d1d2:	a101      	add	r1, pc, #4	; (adr r1, 800d1d8 <_printf_i+0x40>)
 800d1d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1d8:	0800d231 	.word	0x0800d231
 800d1dc:	0800d245 	.word	0x0800d245
 800d1e0:	0800d1c1 	.word	0x0800d1c1
 800d1e4:	0800d1c1 	.word	0x0800d1c1
 800d1e8:	0800d1c1 	.word	0x0800d1c1
 800d1ec:	0800d1c1 	.word	0x0800d1c1
 800d1f0:	0800d245 	.word	0x0800d245
 800d1f4:	0800d1c1 	.word	0x0800d1c1
 800d1f8:	0800d1c1 	.word	0x0800d1c1
 800d1fc:	0800d1c1 	.word	0x0800d1c1
 800d200:	0800d1c1 	.word	0x0800d1c1
 800d204:	0800d351 	.word	0x0800d351
 800d208:	0800d275 	.word	0x0800d275
 800d20c:	0800d333 	.word	0x0800d333
 800d210:	0800d1c1 	.word	0x0800d1c1
 800d214:	0800d1c1 	.word	0x0800d1c1
 800d218:	0800d373 	.word	0x0800d373
 800d21c:	0800d1c1 	.word	0x0800d1c1
 800d220:	0800d275 	.word	0x0800d275
 800d224:	0800d1c1 	.word	0x0800d1c1
 800d228:	0800d1c1 	.word	0x0800d1c1
 800d22c:	0800d33b 	.word	0x0800d33b
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	1d1a      	adds	r2, r3, #4
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	602a      	str	r2, [r5, #0]
 800d238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d23c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d240:	2301      	movs	r3, #1
 800d242:	e0a3      	b.n	800d38c <_printf_i+0x1f4>
 800d244:	6820      	ldr	r0, [r4, #0]
 800d246:	6829      	ldr	r1, [r5, #0]
 800d248:	0606      	lsls	r6, r0, #24
 800d24a:	f101 0304 	add.w	r3, r1, #4
 800d24e:	d50a      	bpl.n	800d266 <_printf_i+0xce>
 800d250:	680e      	ldr	r6, [r1, #0]
 800d252:	602b      	str	r3, [r5, #0]
 800d254:	2e00      	cmp	r6, #0
 800d256:	da03      	bge.n	800d260 <_printf_i+0xc8>
 800d258:	232d      	movs	r3, #45	; 0x2d
 800d25a:	4276      	negs	r6, r6
 800d25c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d260:	485e      	ldr	r0, [pc, #376]	; (800d3dc <_printf_i+0x244>)
 800d262:	230a      	movs	r3, #10
 800d264:	e019      	b.n	800d29a <_printf_i+0x102>
 800d266:	680e      	ldr	r6, [r1, #0]
 800d268:	602b      	str	r3, [r5, #0]
 800d26a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d26e:	bf18      	it	ne
 800d270:	b236      	sxthne	r6, r6
 800d272:	e7ef      	b.n	800d254 <_printf_i+0xbc>
 800d274:	682b      	ldr	r3, [r5, #0]
 800d276:	6820      	ldr	r0, [r4, #0]
 800d278:	1d19      	adds	r1, r3, #4
 800d27a:	6029      	str	r1, [r5, #0]
 800d27c:	0601      	lsls	r1, r0, #24
 800d27e:	d501      	bpl.n	800d284 <_printf_i+0xec>
 800d280:	681e      	ldr	r6, [r3, #0]
 800d282:	e002      	b.n	800d28a <_printf_i+0xf2>
 800d284:	0646      	lsls	r6, r0, #25
 800d286:	d5fb      	bpl.n	800d280 <_printf_i+0xe8>
 800d288:	881e      	ldrh	r6, [r3, #0]
 800d28a:	4854      	ldr	r0, [pc, #336]	; (800d3dc <_printf_i+0x244>)
 800d28c:	2f6f      	cmp	r7, #111	; 0x6f
 800d28e:	bf0c      	ite	eq
 800d290:	2308      	moveq	r3, #8
 800d292:	230a      	movne	r3, #10
 800d294:	2100      	movs	r1, #0
 800d296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d29a:	6865      	ldr	r5, [r4, #4]
 800d29c:	60a5      	str	r5, [r4, #8]
 800d29e:	2d00      	cmp	r5, #0
 800d2a0:	bfa2      	ittt	ge
 800d2a2:	6821      	ldrge	r1, [r4, #0]
 800d2a4:	f021 0104 	bicge.w	r1, r1, #4
 800d2a8:	6021      	strge	r1, [r4, #0]
 800d2aa:	b90e      	cbnz	r6, 800d2b0 <_printf_i+0x118>
 800d2ac:	2d00      	cmp	r5, #0
 800d2ae:	d04d      	beq.n	800d34c <_printf_i+0x1b4>
 800d2b0:	4615      	mov	r5, r2
 800d2b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d2b6:	fb03 6711 	mls	r7, r3, r1, r6
 800d2ba:	5dc7      	ldrb	r7, [r0, r7]
 800d2bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2c0:	4637      	mov	r7, r6
 800d2c2:	42bb      	cmp	r3, r7
 800d2c4:	460e      	mov	r6, r1
 800d2c6:	d9f4      	bls.n	800d2b2 <_printf_i+0x11a>
 800d2c8:	2b08      	cmp	r3, #8
 800d2ca:	d10b      	bne.n	800d2e4 <_printf_i+0x14c>
 800d2cc:	6823      	ldr	r3, [r4, #0]
 800d2ce:	07de      	lsls	r6, r3, #31
 800d2d0:	d508      	bpl.n	800d2e4 <_printf_i+0x14c>
 800d2d2:	6923      	ldr	r3, [r4, #16]
 800d2d4:	6861      	ldr	r1, [r4, #4]
 800d2d6:	4299      	cmp	r1, r3
 800d2d8:	bfde      	ittt	le
 800d2da:	2330      	movle	r3, #48	; 0x30
 800d2dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d2e4:	1b52      	subs	r2, r2, r5
 800d2e6:	6122      	str	r2, [r4, #16]
 800d2e8:	f8cd a000 	str.w	sl, [sp]
 800d2ec:	464b      	mov	r3, r9
 800d2ee:	aa03      	add	r2, sp, #12
 800d2f0:	4621      	mov	r1, r4
 800d2f2:	4640      	mov	r0, r8
 800d2f4:	f7ff fee2 	bl	800d0bc <_printf_common>
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	d14c      	bne.n	800d396 <_printf_i+0x1fe>
 800d2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d300:	b004      	add	sp, #16
 800d302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d306:	4835      	ldr	r0, [pc, #212]	; (800d3dc <_printf_i+0x244>)
 800d308:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d30c:	6829      	ldr	r1, [r5, #0]
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	f851 6b04 	ldr.w	r6, [r1], #4
 800d314:	6029      	str	r1, [r5, #0]
 800d316:	061d      	lsls	r5, r3, #24
 800d318:	d514      	bpl.n	800d344 <_printf_i+0x1ac>
 800d31a:	07df      	lsls	r7, r3, #31
 800d31c:	bf44      	itt	mi
 800d31e:	f043 0320 	orrmi.w	r3, r3, #32
 800d322:	6023      	strmi	r3, [r4, #0]
 800d324:	b91e      	cbnz	r6, 800d32e <_printf_i+0x196>
 800d326:	6823      	ldr	r3, [r4, #0]
 800d328:	f023 0320 	bic.w	r3, r3, #32
 800d32c:	6023      	str	r3, [r4, #0]
 800d32e:	2310      	movs	r3, #16
 800d330:	e7b0      	b.n	800d294 <_printf_i+0xfc>
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	f043 0320 	orr.w	r3, r3, #32
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	2378      	movs	r3, #120	; 0x78
 800d33c:	4828      	ldr	r0, [pc, #160]	; (800d3e0 <_printf_i+0x248>)
 800d33e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d342:	e7e3      	b.n	800d30c <_printf_i+0x174>
 800d344:	0659      	lsls	r1, r3, #25
 800d346:	bf48      	it	mi
 800d348:	b2b6      	uxthmi	r6, r6
 800d34a:	e7e6      	b.n	800d31a <_printf_i+0x182>
 800d34c:	4615      	mov	r5, r2
 800d34e:	e7bb      	b.n	800d2c8 <_printf_i+0x130>
 800d350:	682b      	ldr	r3, [r5, #0]
 800d352:	6826      	ldr	r6, [r4, #0]
 800d354:	6961      	ldr	r1, [r4, #20]
 800d356:	1d18      	adds	r0, r3, #4
 800d358:	6028      	str	r0, [r5, #0]
 800d35a:	0635      	lsls	r5, r6, #24
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	d501      	bpl.n	800d364 <_printf_i+0x1cc>
 800d360:	6019      	str	r1, [r3, #0]
 800d362:	e002      	b.n	800d36a <_printf_i+0x1d2>
 800d364:	0670      	lsls	r0, r6, #25
 800d366:	d5fb      	bpl.n	800d360 <_printf_i+0x1c8>
 800d368:	8019      	strh	r1, [r3, #0]
 800d36a:	2300      	movs	r3, #0
 800d36c:	6123      	str	r3, [r4, #16]
 800d36e:	4615      	mov	r5, r2
 800d370:	e7ba      	b.n	800d2e8 <_printf_i+0x150>
 800d372:	682b      	ldr	r3, [r5, #0]
 800d374:	1d1a      	adds	r2, r3, #4
 800d376:	602a      	str	r2, [r5, #0]
 800d378:	681d      	ldr	r5, [r3, #0]
 800d37a:	6862      	ldr	r2, [r4, #4]
 800d37c:	2100      	movs	r1, #0
 800d37e:	4628      	mov	r0, r5
 800d380:	f7f2 ff2e 	bl	80001e0 <memchr>
 800d384:	b108      	cbz	r0, 800d38a <_printf_i+0x1f2>
 800d386:	1b40      	subs	r0, r0, r5
 800d388:	6060      	str	r0, [r4, #4]
 800d38a:	6863      	ldr	r3, [r4, #4]
 800d38c:	6123      	str	r3, [r4, #16]
 800d38e:	2300      	movs	r3, #0
 800d390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d394:	e7a8      	b.n	800d2e8 <_printf_i+0x150>
 800d396:	6923      	ldr	r3, [r4, #16]
 800d398:	462a      	mov	r2, r5
 800d39a:	4649      	mov	r1, r9
 800d39c:	4640      	mov	r0, r8
 800d39e:	47d0      	blx	sl
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	d0ab      	beq.n	800d2fc <_printf_i+0x164>
 800d3a4:	6823      	ldr	r3, [r4, #0]
 800d3a6:	079b      	lsls	r3, r3, #30
 800d3a8:	d413      	bmi.n	800d3d2 <_printf_i+0x23a>
 800d3aa:	68e0      	ldr	r0, [r4, #12]
 800d3ac:	9b03      	ldr	r3, [sp, #12]
 800d3ae:	4298      	cmp	r0, r3
 800d3b0:	bfb8      	it	lt
 800d3b2:	4618      	movlt	r0, r3
 800d3b4:	e7a4      	b.n	800d300 <_printf_i+0x168>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	4632      	mov	r2, r6
 800d3ba:	4649      	mov	r1, r9
 800d3bc:	4640      	mov	r0, r8
 800d3be:	47d0      	blx	sl
 800d3c0:	3001      	adds	r0, #1
 800d3c2:	d09b      	beq.n	800d2fc <_printf_i+0x164>
 800d3c4:	3501      	adds	r5, #1
 800d3c6:	68e3      	ldr	r3, [r4, #12]
 800d3c8:	9903      	ldr	r1, [sp, #12]
 800d3ca:	1a5b      	subs	r3, r3, r1
 800d3cc:	42ab      	cmp	r3, r5
 800d3ce:	dcf2      	bgt.n	800d3b6 <_printf_i+0x21e>
 800d3d0:	e7eb      	b.n	800d3aa <_printf_i+0x212>
 800d3d2:	2500      	movs	r5, #0
 800d3d4:	f104 0619 	add.w	r6, r4, #25
 800d3d8:	e7f5      	b.n	800d3c6 <_printf_i+0x22e>
 800d3da:	bf00      	nop
 800d3dc:	080114ce 	.word	0x080114ce
 800d3e0:	080114df 	.word	0x080114df

0800d3e4 <siprintf>:
 800d3e4:	b40e      	push	{r1, r2, r3}
 800d3e6:	b500      	push	{lr}
 800d3e8:	b09c      	sub	sp, #112	; 0x70
 800d3ea:	ab1d      	add	r3, sp, #116	; 0x74
 800d3ec:	9002      	str	r0, [sp, #8]
 800d3ee:	9006      	str	r0, [sp, #24]
 800d3f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d3f4:	4809      	ldr	r0, [pc, #36]	; (800d41c <siprintf+0x38>)
 800d3f6:	9107      	str	r1, [sp, #28]
 800d3f8:	9104      	str	r1, [sp, #16]
 800d3fa:	4909      	ldr	r1, [pc, #36]	; (800d420 <siprintf+0x3c>)
 800d3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d400:	9105      	str	r1, [sp, #20]
 800d402:	6800      	ldr	r0, [r0, #0]
 800d404:	9301      	str	r3, [sp, #4]
 800d406:	a902      	add	r1, sp, #8
 800d408:	f002 fef4 	bl	80101f4 <_svfiprintf_r>
 800d40c:	9b02      	ldr	r3, [sp, #8]
 800d40e:	2200      	movs	r2, #0
 800d410:	701a      	strb	r2, [r3, #0]
 800d412:	b01c      	add	sp, #112	; 0x70
 800d414:	f85d eb04 	ldr.w	lr, [sp], #4
 800d418:	b003      	add	sp, #12
 800d41a:	4770      	bx	lr
 800d41c:	2000000c 	.word	0x2000000c
 800d420:	ffff0208 	.word	0xffff0208

0800d424 <strcat>:
 800d424:	b510      	push	{r4, lr}
 800d426:	4602      	mov	r2, r0
 800d428:	7814      	ldrb	r4, [r2, #0]
 800d42a:	4613      	mov	r3, r2
 800d42c:	3201      	adds	r2, #1
 800d42e:	2c00      	cmp	r4, #0
 800d430:	d1fa      	bne.n	800d428 <strcat+0x4>
 800d432:	3b01      	subs	r3, #1
 800d434:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d438:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d43c:	2a00      	cmp	r2, #0
 800d43e:	d1f9      	bne.n	800d434 <strcat+0x10>
 800d440:	bd10      	pop	{r4, pc}

0800d442 <sulp>:
 800d442:	b570      	push	{r4, r5, r6, lr}
 800d444:	4604      	mov	r4, r0
 800d446:	460d      	mov	r5, r1
 800d448:	ec45 4b10 	vmov	d0, r4, r5
 800d44c:	4616      	mov	r6, r2
 800d44e:	f002 fc2f 	bl	800fcb0 <__ulp>
 800d452:	ec51 0b10 	vmov	r0, r1, d0
 800d456:	b17e      	cbz	r6, 800d478 <sulp+0x36>
 800d458:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d45c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d460:	2b00      	cmp	r3, #0
 800d462:	dd09      	ble.n	800d478 <sulp+0x36>
 800d464:	051b      	lsls	r3, r3, #20
 800d466:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d46a:	2400      	movs	r4, #0
 800d46c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d470:	4622      	mov	r2, r4
 800d472:	462b      	mov	r3, r5
 800d474:	f7f3 f8c0 	bl	80005f8 <__aeabi_dmul>
 800d478:	bd70      	pop	{r4, r5, r6, pc}
 800d47a:	0000      	movs	r0, r0
 800d47c:	0000      	movs	r0, r0
	...

0800d480 <_strtod_l>:
 800d480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d484:	ed2d 8b02 	vpush	{d8}
 800d488:	b09d      	sub	sp, #116	; 0x74
 800d48a:	461f      	mov	r7, r3
 800d48c:	2300      	movs	r3, #0
 800d48e:	9318      	str	r3, [sp, #96]	; 0x60
 800d490:	4ba2      	ldr	r3, [pc, #648]	; (800d71c <_strtod_l+0x29c>)
 800d492:	9213      	str	r2, [sp, #76]	; 0x4c
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	9305      	str	r3, [sp, #20]
 800d498:	4604      	mov	r4, r0
 800d49a:	4618      	mov	r0, r3
 800d49c:	4688      	mov	r8, r1
 800d49e:	f7f2 fe97 	bl	80001d0 <strlen>
 800d4a2:	f04f 0a00 	mov.w	sl, #0
 800d4a6:	4605      	mov	r5, r0
 800d4a8:	f04f 0b00 	mov.w	fp, #0
 800d4ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d4b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4b2:	781a      	ldrb	r2, [r3, #0]
 800d4b4:	2a2b      	cmp	r2, #43	; 0x2b
 800d4b6:	d04e      	beq.n	800d556 <_strtod_l+0xd6>
 800d4b8:	d83b      	bhi.n	800d532 <_strtod_l+0xb2>
 800d4ba:	2a0d      	cmp	r2, #13
 800d4bc:	d834      	bhi.n	800d528 <_strtod_l+0xa8>
 800d4be:	2a08      	cmp	r2, #8
 800d4c0:	d834      	bhi.n	800d52c <_strtod_l+0xac>
 800d4c2:	2a00      	cmp	r2, #0
 800d4c4:	d03e      	beq.n	800d544 <_strtod_l+0xc4>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	930a      	str	r3, [sp, #40]	; 0x28
 800d4ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d4cc:	7833      	ldrb	r3, [r6, #0]
 800d4ce:	2b30      	cmp	r3, #48	; 0x30
 800d4d0:	f040 80b0 	bne.w	800d634 <_strtod_l+0x1b4>
 800d4d4:	7873      	ldrb	r3, [r6, #1]
 800d4d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d4da:	2b58      	cmp	r3, #88	; 0x58
 800d4dc:	d168      	bne.n	800d5b0 <_strtod_l+0x130>
 800d4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4e0:	9301      	str	r3, [sp, #4]
 800d4e2:	ab18      	add	r3, sp, #96	; 0x60
 800d4e4:	9702      	str	r7, [sp, #8]
 800d4e6:	9300      	str	r3, [sp, #0]
 800d4e8:	4a8d      	ldr	r2, [pc, #564]	; (800d720 <_strtod_l+0x2a0>)
 800d4ea:	ab19      	add	r3, sp, #100	; 0x64
 800d4ec:	a917      	add	r1, sp, #92	; 0x5c
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f001 fd46 	bl	800ef80 <__gethex>
 800d4f4:	f010 0707 	ands.w	r7, r0, #7
 800d4f8:	4605      	mov	r5, r0
 800d4fa:	d005      	beq.n	800d508 <_strtod_l+0x88>
 800d4fc:	2f06      	cmp	r7, #6
 800d4fe:	d12c      	bne.n	800d55a <_strtod_l+0xda>
 800d500:	3601      	adds	r6, #1
 800d502:	2300      	movs	r3, #0
 800d504:	9617      	str	r6, [sp, #92]	; 0x5c
 800d506:	930a      	str	r3, [sp, #40]	; 0x28
 800d508:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f040 8590 	bne.w	800e030 <_strtod_l+0xbb0>
 800d510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d512:	b1eb      	cbz	r3, 800d550 <_strtod_l+0xd0>
 800d514:	4652      	mov	r2, sl
 800d516:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d51a:	ec43 2b10 	vmov	d0, r2, r3
 800d51e:	b01d      	add	sp, #116	; 0x74
 800d520:	ecbd 8b02 	vpop	{d8}
 800d524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d528:	2a20      	cmp	r2, #32
 800d52a:	d1cc      	bne.n	800d4c6 <_strtod_l+0x46>
 800d52c:	3301      	adds	r3, #1
 800d52e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d530:	e7be      	b.n	800d4b0 <_strtod_l+0x30>
 800d532:	2a2d      	cmp	r2, #45	; 0x2d
 800d534:	d1c7      	bne.n	800d4c6 <_strtod_l+0x46>
 800d536:	2201      	movs	r2, #1
 800d538:	920a      	str	r2, [sp, #40]	; 0x28
 800d53a:	1c5a      	adds	r2, r3, #1
 800d53c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d53e:	785b      	ldrb	r3, [r3, #1]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d1c2      	bne.n	800d4ca <_strtod_l+0x4a>
 800d544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d546:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f040 856e 	bne.w	800e02c <_strtod_l+0xbac>
 800d550:	4652      	mov	r2, sl
 800d552:	465b      	mov	r3, fp
 800d554:	e7e1      	b.n	800d51a <_strtod_l+0x9a>
 800d556:	2200      	movs	r2, #0
 800d558:	e7ee      	b.n	800d538 <_strtod_l+0xb8>
 800d55a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d55c:	b13a      	cbz	r2, 800d56e <_strtod_l+0xee>
 800d55e:	2135      	movs	r1, #53	; 0x35
 800d560:	a81a      	add	r0, sp, #104	; 0x68
 800d562:	f002 fcb0 	bl	800fec6 <__copybits>
 800d566:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d568:	4620      	mov	r0, r4
 800d56a:	f002 f86f 	bl	800f64c <_Bfree>
 800d56e:	3f01      	subs	r7, #1
 800d570:	2f04      	cmp	r7, #4
 800d572:	d806      	bhi.n	800d582 <_strtod_l+0x102>
 800d574:	e8df f007 	tbb	[pc, r7]
 800d578:	1714030a 	.word	0x1714030a
 800d57c:	0a          	.byte	0x0a
 800d57d:	00          	.byte	0x00
 800d57e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d582:	0728      	lsls	r0, r5, #28
 800d584:	d5c0      	bpl.n	800d508 <_strtod_l+0x88>
 800d586:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d58a:	e7bd      	b.n	800d508 <_strtod_l+0x88>
 800d58c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d590:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d592:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d596:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d59a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d59e:	e7f0      	b.n	800d582 <_strtod_l+0x102>
 800d5a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d724 <_strtod_l+0x2a4>
 800d5a4:	e7ed      	b.n	800d582 <_strtod_l+0x102>
 800d5a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d5aa:	f04f 3aff 	mov.w	sl, #4294967295
 800d5ae:	e7e8      	b.n	800d582 <_strtod_l+0x102>
 800d5b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5b2:	1c5a      	adds	r2, r3, #1
 800d5b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d5b6:	785b      	ldrb	r3, [r3, #1]
 800d5b8:	2b30      	cmp	r3, #48	; 0x30
 800d5ba:	d0f9      	beq.n	800d5b0 <_strtod_l+0x130>
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d0a3      	beq.n	800d508 <_strtod_l+0x88>
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	f04f 0900 	mov.w	r9, #0
 800d5c6:	9304      	str	r3, [sp, #16]
 800d5c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5ca:	9308      	str	r3, [sp, #32]
 800d5cc:	f8cd 901c 	str.w	r9, [sp, #28]
 800d5d0:	464f      	mov	r7, r9
 800d5d2:	220a      	movs	r2, #10
 800d5d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d5d6:	7806      	ldrb	r6, [r0, #0]
 800d5d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d5dc:	b2d9      	uxtb	r1, r3
 800d5de:	2909      	cmp	r1, #9
 800d5e0:	d92a      	bls.n	800d638 <_strtod_l+0x1b8>
 800d5e2:	9905      	ldr	r1, [sp, #20]
 800d5e4:	462a      	mov	r2, r5
 800d5e6:	f003 f877 	bl	80106d8 <strncmp>
 800d5ea:	b398      	cbz	r0, 800d654 <_strtod_l+0x1d4>
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	4632      	mov	r2, r6
 800d5f0:	463d      	mov	r5, r7
 800d5f2:	9005      	str	r0, [sp, #20]
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2a65      	cmp	r2, #101	; 0x65
 800d5f8:	d001      	beq.n	800d5fe <_strtod_l+0x17e>
 800d5fa:	2a45      	cmp	r2, #69	; 0x45
 800d5fc:	d118      	bne.n	800d630 <_strtod_l+0x1b0>
 800d5fe:	b91d      	cbnz	r5, 800d608 <_strtod_l+0x188>
 800d600:	9a04      	ldr	r2, [sp, #16]
 800d602:	4302      	orrs	r2, r0
 800d604:	d09e      	beq.n	800d544 <_strtod_l+0xc4>
 800d606:	2500      	movs	r5, #0
 800d608:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d60c:	f108 0201 	add.w	r2, r8, #1
 800d610:	9217      	str	r2, [sp, #92]	; 0x5c
 800d612:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d616:	2a2b      	cmp	r2, #43	; 0x2b
 800d618:	d075      	beq.n	800d706 <_strtod_l+0x286>
 800d61a:	2a2d      	cmp	r2, #45	; 0x2d
 800d61c:	d07b      	beq.n	800d716 <_strtod_l+0x296>
 800d61e:	f04f 0c00 	mov.w	ip, #0
 800d622:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d626:	2909      	cmp	r1, #9
 800d628:	f240 8082 	bls.w	800d730 <_strtod_l+0x2b0>
 800d62c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d630:	2600      	movs	r6, #0
 800d632:	e09d      	b.n	800d770 <_strtod_l+0x2f0>
 800d634:	2300      	movs	r3, #0
 800d636:	e7c4      	b.n	800d5c2 <_strtod_l+0x142>
 800d638:	2f08      	cmp	r7, #8
 800d63a:	bfd8      	it	le
 800d63c:	9907      	ldrle	r1, [sp, #28]
 800d63e:	f100 0001 	add.w	r0, r0, #1
 800d642:	bfda      	itte	le
 800d644:	fb02 3301 	mlale	r3, r2, r1, r3
 800d648:	9307      	strle	r3, [sp, #28]
 800d64a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d64e:	3701      	adds	r7, #1
 800d650:	9017      	str	r0, [sp, #92]	; 0x5c
 800d652:	e7bf      	b.n	800d5d4 <_strtod_l+0x154>
 800d654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d656:	195a      	adds	r2, r3, r5
 800d658:	9217      	str	r2, [sp, #92]	; 0x5c
 800d65a:	5d5a      	ldrb	r2, [r3, r5]
 800d65c:	2f00      	cmp	r7, #0
 800d65e:	d037      	beq.n	800d6d0 <_strtod_l+0x250>
 800d660:	9005      	str	r0, [sp, #20]
 800d662:	463d      	mov	r5, r7
 800d664:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d668:	2b09      	cmp	r3, #9
 800d66a:	d912      	bls.n	800d692 <_strtod_l+0x212>
 800d66c:	2301      	movs	r3, #1
 800d66e:	e7c2      	b.n	800d5f6 <_strtod_l+0x176>
 800d670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	9217      	str	r2, [sp, #92]	; 0x5c
 800d676:	785a      	ldrb	r2, [r3, #1]
 800d678:	3001      	adds	r0, #1
 800d67a:	2a30      	cmp	r2, #48	; 0x30
 800d67c:	d0f8      	beq.n	800d670 <_strtod_l+0x1f0>
 800d67e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d682:	2b08      	cmp	r3, #8
 800d684:	f200 84d9 	bhi.w	800e03a <_strtod_l+0xbba>
 800d688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d68a:	9005      	str	r0, [sp, #20]
 800d68c:	2000      	movs	r0, #0
 800d68e:	9308      	str	r3, [sp, #32]
 800d690:	4605      	mov	r5, r0
 800d692:	3a30      	subs	r2, #48	; 0x30
 800d694:	f100 0301 	add.w	r3, r0, #1
 800d698:	d014      	beq.n	800d6c4 <_strtod_l+0x244>
 800d69a:	9905      	ldr	r1, [sp, #20]
 800d69c:	4419      	add	r1, r3
 800d69e:	9105      	str	r1, [sp, #20]
 800d6a0:	462b      	mov	r3, r5
 800d6a2:	eb00 0e05 	add.w	lr, r0, r5
 800d6a6:	210a      	movs	r1, #10
 800d6a8:	4573      	cmp	r3, lr
 800d6aa:	d113      	bne.n	800d6d4 <_strtod_l+0x254>
 800d6ac:	182b      	adds	r3, r5, r0
 800d6ae:	2b08      	cmp	r3, #8
 800d6b0:	f105 0501 	add.w	r5, r5, #1
 800d6b4:	4405      	add	r5, r0
 800d6b6:	dc1c      	bgt.n	800d6f2 <_strtod_l+0x272>
 800d6b8:	9907      	ldr	r1, [sp, #28]
 800d6ba:	230a      	movs	r3, #10
 800d6bc:	fb03 2301 	mla	r3, r3, r1, r2
 800d6c0:	9307      	str	r3, [sp, #28]
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6c6:	1c51      	adds	r1, r2, #1
 800d6c8:	9117      	str	r1, [sp, #92]	; 0x5c
 800d6ca:	7852      	ldrb	r2, [r2, #1]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	e7c9      	b.n	800d664 <_strtod_l+0x1e4>
 800d6d0:	4638      	mov	r0, r7
 800d6d2:	e7d2      	b.n	800d67a <_strtod_l+0x1fa>
 800d6d4:	2b08      	cmp	r3, #8
 800d6d6:	dc04      	bgt.n	800d6e2 <_strtod_l+0x262>
 800d6d8:	9e07      	ldr	r6, [sp, #28]
 800d6da:	434e      	muls	r6, r1
 800d6dc:	9607      	str	r6, [sp, #28]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	e7e2      	b.n	800d6a8 <_strtod_l+0x228>
 800d6e2:	f103 0c01 	add.w	ip, r3, #1
 800d6e6:	f1bc 0f10 	cmp.w	ip, #16
 800d6ea:	bfd8      	it	le
 800d6ec:	fb01 f909 	mulle.w	r9, r1, r9
 800d6f0:	e7f5      	b.n	800d6de <_strtod_l+0x25e>
 800d6f2:	2d10      	cmp	r5, #16
 800d6f4:	bfdc      	itt	le
 800d6f6:	230a      	movle	r3, #10
 800d6f8:	fb03 2909 	mlale	r9, r3, r9, r2
 800d6fc:	e7e1      	b.n	800d6c2 <_strtod_l+0x242>
 800d6fe:	2300      	movs	r3, #0
 800d700:	9305      	str	r3, [sp, #20]
 800d702:	2301      	movs	r3, #1
 800d704:	e77c      	b.n	800d600 <_strtod_l+0x180>
 800d706:	f04f 0c00 	mov.w	ip, #0
 800d70a:	f108 0202 	add.w	r2, r8, #2
 800d70e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d710:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d714:	e785      	b.n	800d622 <_strtod_l+0x1a2>
 800d716:	f04f 0c01 	mov.w	ip, #1
 800d71a:	e7f6      	b.n	800d70a <_strtod_l+0x28a>
 800d71c:	080116d0 	.word	0x080116d0
 800d720:	080114f0 	.word	0x080114f0
 800d724:	7ff00000 	.word	0x7ff00000
 800d728:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d72a:	1c51      	adds	r1, r2, #1
 800d72c:	9117      	str	r1, [sp, #92]	; 0x5c
 800d72e:	7852      	ldrb	r2, [r2, #1]
 800d730:	2a30      	cmp	r2, #48	; 0x30
 800d732:	d0f9      	beq.n	800d728 <_strtod_l+0x2a8>
 800d734:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d738:	2908      	cmp	r1, #8
 800d73a:	f63f af79 	bhi.w	800d630 <_strtod_l+0x1b0>
 800d73e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d742:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d744:	9206      	str	r2, [sp, #24]
 800d746:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d748:	1c51      	adds	r1, r2, #1
 800d74a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d74c:	7852      	ldrb	r2, [r2, #1]
 800d74e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d752:	2e09      	cmp	r6, #9
 800d754:	d937      	bls.n	800d7c6 <_strtod_l+0x346>
 800d756:	9e06      	ldr	r6, [sp, #24]
 800d758:	1b89      	subs	r1, r1, r6
 800d75a:	2908      	cmp	r1, #8
 800d75c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d760:	dc02      	bgt.n	800d768 <_strtod_l+0x2e8>
 800d762:	4576      	cmp	r6, lr
 800d764:	bfa8      	it	ge
 800d766:	4676      	movge	r6, lr
 800d768:	f1bc 0f00 	cmp.w	ip, #0
 800d76c:	d000      	beq.n	800d770 <_strtod_l+0x2f0>
 800d76e:	4276      	negs	r6, r6
 800d770:	2d00      	cmp	r5, #0
 800d772:	d14d      	bne.n	800d810 <_strtod_l+0x390>
 800d774:	9904      	ldr	r1, [sp, #16]
 800d776:	4301      	orrs	r1, r0
 800d778:	f47f aec6 	bne.w	800d508 <_strtod_l+0x88>
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f47f aee1 	bne.w	800d544 <_strtod_l+0xc4>
 800d782:	2a69      	cmp	r2, #105	; 0x69
 800d784:	d027      	beq.n	800d7d6 <_strtod_l+0x356>
 800d786:	dc24      	bgt.n	800d7d2 <_strtod_l+0x352>
 800d788:	2a49      	cmp	r2, #73	; 0x49
 800d78a:	d024      	beq.n	800d7d6 <_strtod_l+0x356>
 800d78c:	2a4e      	cmp	r2, #78	; 0x4e
 800d78e:	f47f aed9 	bne.w	800d544 <_strtod_l+0xc4>
 800d792:	499f      	ldr	r1, [pc, #636]	; (800da10 <_strtod_l+0x590>)
 800d794:	a817      	add	r0, sp, #92	; 0x5c
 800d796:	f001 fe4b 	bl	800f430 <__match>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	f43f aed2 	beq.w	800d544 <_strtod_l+0xc4>
 800d7a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	2b28      	cmp	r3, #40	; 0x28
 800d7a6:	d12d      	bne.n	800d804 <_strtod_l+0x384>
 800d7a8:	499a      	ldr	r1, [pc, #616]	; (800da14 <_strtod_l+0x594>)
 800d7aa:	aa1a      	add	r2, sp, #104	; 0x68
 800d7ac:	a817      	add	r0, sp, #92	; 0x5c
 800d7ae:	f001 fe53 	bl	800f458 <__hexnan>
 800d7b2:	2805      	cmp	r0, #5
 800d7b4:	d126      	bne.n	800d804 <_strtod_l+0x384>
 800d7b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d7bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d7c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d7c4:	e6a0      	b.n	800d508 <_strtod_l+0x88>
 800d7c6:	210a      	movs	r1, #10
 800d7c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d7cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d7d0:	e7b9      	b.n	800d746 <_strtod_l+0x2c6>
 800d7d2:	2a6e      	cmp	r2, #110	; 0x6e
 800d7d4:	e7db      	b.n	800d78e <_strtod_l+0x30e>
 800d7d6:	4990      	ldr	r1, [pc, #576]	; (800da18 <_strtod_l+0x598>)
 800d7d8:	a817      	add	r0, sp, #92	; 0x5c
 800d7da:	f001 fe29 	bl	800f430 <__match>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	f43f aeb0 	beq.w	800d544 <_strtod_l+0xc4>
 800d7e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7e6:	498d      	ldr	r1, [pc, #564]	; (800da1c <_strtod_l+0x59c>)
 800d7e8:	3b01      	subs	r3, #1
 800d7ea:	a817      	add	r0, sp, #92	; 0x5c
 800d7ec:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7ee:	f001 fe1f 	bl	800f430 <__match>
 800d7f2:	b910      	cbnz	r0, 800d7fa <_strtod_l+0x37a>
 800d7f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800da2c <_strtod_l+0x5ac>
 800d7fe:	f04f 0a00 	mov.w	sl, #0
 800d802:	e681      	b.n	800d508 <_strtod_l+0x88>
 800d804:	4886      	ldr	r0, [pc, #536]	; (800da20 <_strtod_l+0x5a0>)
 800d806:	f002 ff4f 	bl	80106a8 <nan>
 800d80a:	ec5b ab10 	vmov	sl, fp, d0
 800d80e:	e67b      	b.n	800d508 <_strtod_l+0x88>
 800d810:	9b05      	ldr	r3, [sp, #20]
 800d812:	9807      	ldr	r0, [sp, #28]
 800d814:	1af3      	subs	r3, r6, r3
 800d816:	2f00      	cmp	r7, #0
 800d818:	bf08      	it	eq
 800d81a:	462f      	moveq	r7, r5
 800d81c:	2d10      	cmp	r5, #16
 800d81e:	9306      	str	r3, [sp, #24]
 800d820:	46a8      	mov	r8, r5
 800d822:	bfa8      	it	ge
 800d824:	f04f 0810 	movge.w	r8, #16
 800d828:	f7f2 fe6c 	bl	8000504 <__aeabi_ui2d>
 800d82c:	2d09      	cmp	r5, #9
 800d82e:	4682      	mov	sl, r0
 800d830:	468b      	mov	fp, r1
 800d832:	dd13      	ble.n	800d85c <_strtod_l+0x3dc>
 800d834:	4b7b      	ldr	r3, [pc, #492]	; (800da24 <_strtod_l+0x5a4>)
 800d836:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d83a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d83e:	f7f2 fedb 	bl	80005f8 <__aeabi_dmul>
 800d842:	4682      	mov	sl, r0
 800d844:	4648      	mov	r0, r9
 800d846:	468b      	mov	fp, r1
 800d848:	f7f2 fe5c 	bl	8000504 <__aeabi_ui2d>
 800d84c:	4602      	mov	r2, r0
 800d84e:	460b      	mov	r3, r1
 800d850:	4650      	mov	r0, sl
 800d852:	4659      	mov	r1, fp
 800d854:	f7f2 fd1a 	bl	800028c <__adddf3>
 800d858:	4682      	mov	sl, r0
 800d85a:	468b      	mov	fp, r1
 800d85c:	2d0f      	cmp	r5, #15
 800d85e:	dc38      	bgt.n	800d8d2 <_strtod_l+0x452>
 800d860:	9b06      	ldr	r3, [sp, #24]
 800d862:	2b00      	cmp	r3, #0
 800d864:	f43f ae50 	beq.w	800d508 <_strtod_l+0x88>
 800d868:	dd24      	ble.n	800d8b4 <_strtod_l+0x434>
 800d86a:	2b16      	cmp	r3, #22
 800d86c:	dc0b      	bgt.n	800d886 <_strtod_l+0x406>
 800d86e:	496d      	ldr	r1, [pc, #436]	; (800da24 <_strtod_l+0x5a4>)
 800d870:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d874:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d878:	4652      	mov	r2, sl
 800d87a:	465b      	mov	r3, fp
 800d87c:	f7f2 febc 	bl	80005f8 <__aeabi_dmul>
 800d880:	4682      	mov	sl, r0
 800d882:	468b      	mov	fp, r1
 800d884:	e640      	b.n	800d508 <_strtod_l+0x88>
 800d886:	9a06      	ldr	r2, [sp, #24]
 800d888:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d88c:	4293      	cmp	r3, r2
 800d88e:	db20      	blt.n	800d8d2 <_strtod_l+0x452>
 800d890:	4c64      	ldr	r4, [pc, #400]	; (800da24 <_strtod_l+0x5a4>)
 800d892:	f1c5 050f 	rsb	r5, r5, #15
 800d896:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d89a:	4652      	mov	r2, sl
 800d89c:	465b      	mov	r3, fp
 800d89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8a2:	f7f2 fea9 	bl	80005f8 <__aeabi_dmul>
 800d8a6:	9b06      	ldr	r3, [sp, #24]
 800d8a8:	1b5d      	subs	r5, r3, r5
 800d8aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d8ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d8b2:	e7e3      	b.n	800d87c <_strtod_l+0x3fc>
 800d8b4:	9b06      	ldr	r3, [sp, #24]
 800d8b6:	3316      	adds	r3, #22
 800d8b8:	db0b      	blt.n	800d8d2 <_strtod_l+0x452>
 800d8ba:	9b05      	ldr	r3, [sp, #20]
 800d8bc:	1b9e      	subs	r6, r3, r6
 800d8be:	4b59      	ldr	r3, [pc, #356]	; (800da24 <_strtod_l+0x5a4>)
 800d8c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d8c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d8c8:	4650      	mov	r0, sl
 800d8ca:	4659      	mov	r1, fp
 800d8cc:	f7f2 ffbe 	bl	800084c <__aeabi_ddiv>
 800d8d0:	e7d6      	b.n	800d880 <_strtod_l+0x400>
 800d8d2:	9b06      	ldr	r3, [sp, #24]
 800d8d4:	eba5 0808 	sub.w	r8, r5, r8
 800d8d8:	4498      	add	r8, r3
 800d8da:	f1b8 0f00 	cmp.w	r8, #0
 800d8de:	dd74      	ble.n	800d9ca <_strtod_l+0x54a>
 800d8e0:	f018 030f 	ands.w	r3, r8, #15
 800d8e4:	d00a      	beq.n	800d8fc <_strtod_l+0x47c>
 800d8e6:	494f      	ldr	r1, [pc, #316]	; (800da24 <_strtod_l+0x5a4>)
 800d8e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d8ec:	4652      	mov	r2, sl
 800d8ee:	465b      	mov	r3, fp
 800d8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8f4:	f7f2 fe80 	bl	80005f8 <__aeabi_dmul>
 800d8f8:	4682      	mov	sl, r0
 800d8fa:	468b      	mov	fp, r1
 800d8fc:	f038 080f 	bics.w	r8, r8, #15
 800d900:	d04f      	beq.n	800d9a2 <_strtod_l+0x522>
 800d902:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d906:	dd22      	ble.n	800d94e <_strtod_l+0x4ce>
 800d908:	2500      	movs	r5, #0
 800d90a:	462e      	mov	r6, r5
 800d90c:	9507      	str	r5, [sp, #28]
 800d90e:	9505      	str	r5, [sp, #20]
 800d910:	2322      	movs	r3, #34	; 0x22
 800d912:	f8df b118 	ldr.w	fp, [pc, #280]	; 800da2c <_strtod_l+0x5ac>
 800d916:	6023      	str	r3, [r4, #0]
 800d918:	f04f 0a00 	mov.w	sl, #0
 800d91c:	9b07      	ldr	r3, [sp, #28]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f43f adf2 	beq.w	800d508 <_strtod_l+0x88>
 800d924:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d926:	4620      	mov	r0, r4
 800d928:	f001 fe90 	bl	800f64c <_Bfree>
 800d92c:	9905      	ldr	r1, [sp, #20]
 800d92e:	4620      	mov	r0, r4
 800d930:	f001 fe8c 	bl	800f64c <_Bfree>
 800d934:	4631      	mov	r1, r6
 800d936:	4620      	mov	r0, r4
 800d938:	f001 fe88 	bl	800f64c <_Bfree>
 800d93c:	9907      	ldr	r1, [sp, #28]
 800d93e:	4620      	mov	r0, r4
 800d940:	f001 fe84 	bl	800f64c <_Bfree>
 800d944:	4629      	mov	r1, r5
 800d946:	4620      	mov	r0, r4
 800d948:	f001 fe80 	bl	800f64c <_Bfree>
 800d94c:	e5dc      	b.n	800d508 <_strtod_l+0x88>
 800d94e:	4b36      	ldr	r3, [pc, #216]	; (800da28 <_strtod_l+0x5a8>)
 800d950:	9304      	str	r3, [sp, #16]
 800d952:	2300      	movs	r3, #0
 800d954:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d958:	4650      	mov	r0, sl
 800d95a:	4659      	mov	r1, fp
 800d95c:	4699      	mov	r9, r3
 800d95e:	f1b8 0f01 	cmp.w	r8, #1
 800d962:	dc21      	bgt.n	800d9a8 <_strtod_l+0x528>
 800d964:	b10b      	cbz	r3, 800d96a <_strtod_l+0x4ea>
 800d966:	4682      	mov	sl, r0
 800d968:	468b      	mov	fp, r1
 800d96a:	4b2f      	ldr	r3, [pc, #188]	; (800da28 <_strtod_l+0x5a8>)
 800d96c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d970:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d974:	4652      	mov	r2, sl
 800d976:	465b      	mov	r3, fp
 800d978:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d97c:	f7f2 fe3c 	bl	80005f8 <__aeabi_dmul>
 800d980:	4b2a      	ldr	r3, [pc, #168]	; (800da2c <_strtod_l+0x5ac>)
 800d982:	460a      	mov	r2, r1
 800d984:	400b      	ands	r3, r1
 800d986:	492a      	ldr	r1, [pc, #168]	; (800da30 <_strtod_l+0x5b0>)
 800d988:	428b      	cmp	r3, r1
 800d98a:	4682      	mov	sl, r0
 800d98c:	d8bc      	bhi.n	800d908 <_strtod_l+0x488>
 800d98e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d992:	428b      	cmp	r3, r1
 800d994:	bf86      	itte	hi
 800d996:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800da34 <_strtod_l+0x5b4>
 800d99a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d99e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	9304      	str	r3, [sp, #16]
 800d9a6:	e084      	b.n	800dab2 <_strtod_l+0x632>
 800d9a8:	f018 0f01 	tst.w	r8, #1
 800d9ac:	d005      	beq.n	800d9ba <_strtod_l+0x53a>
 800d9ae:	9b04      	ldr	r3, [sp, #16]
 800d9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b4:	f7f2 fe20 	bl	80005f8 <__aeabi_dmul>
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	9a04      	ldr	r2, [sp, #16]
 800d9bc:	3208      	adds	r2, #8
 800d9be:	f109 0901 	add.w	r9, r9, #1
 800d9c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d9c6:	9204      	str	r2, [sp, #16]
 800d9c8:	e7c9      	b.n	800d95e <_strtod_l+0x4de>
 800d9ca:	d0ea      	beq.n	800d9a2 <_strtod_l+0x522>
 800d9cc:	f1c8 0800 	rsb	r8, r8, #0
 800d9d0:	f018 020f 	ands.w	r2, r8, #15
 800d9d4:	d00a      	beq.n	800d9ec <_strtod_l+0x56c>
 800d9d6:	4b13      	ldr	r3, [pc, #76]	; (800da24 <_strtod_l+0x5a4>)
 800d9d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9dc:	4650      	mov	r0, sl
 800d9de:	4659      	mov	r1, fp
 800d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e4:	f7f2 ff32 	bl	800084c <__aeabi_ddiv>
 800d9e8:	4682      	mov	sl, r0
 800d9ea:	468b      	mov	fp, r1
 800d9ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d9f0:	d0d7      	beq.n	800d9a2 <_strtod_l+0x522>
 800d9f2:	f1b8 0f1f 	cmp.w	r8, #31
 800d9f6:	dd1f      	ble.n	800da38 <_strtod_l+0x5b8>
 800d9f8:	2500      	movs	r5, #0
 800d9fa:	462e      	mov	r6, r5
 800d9fc:	9507      	str	r5, [sp, #28]
 800d9fe:	9505      	str	r5, [sp, #20]
 800da00:	2322      	movs	r3, #34	; 0x22
 800da02:	f04f 0a00 	mov.w	sl, #0
 800da06:	f04f 0b00 	mov.w	fp, #0
 800da0a:	6023      	str	r3, [r4, #0]
 800da0c:	e786      	b.n	800d91c <_strtod_l+0x49c>
 800da0e:	bf00      	nop
 800da10:	080114c9 	.word	0x080114c9
 800da14:	08011504 	.word	0x08011504
 800da18:	080114c1 	.word	0x080114c1
 800da1c:	080115f3 	.word	0x080115f3
 800da20:	080115ef 	.word	0x080115ef
 800da24:	08011768 	.word	0x08011768
 800da28:	08011740 	.word	0x08011740
 800da2c:	7ff00000 	.word	0x7ff00000
 800da30:	7ca00000 	.word	0x7ca00000
 800da34:	7fefffff 	.word	0x7fefffff
 800da38:	f018 0310 	ands.w	r3, r8, #16
 800da3c:	bf18      	it	ne
 800da3e:	236a      	movne	r3, #106	; 0x6a
 800da40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ddf0 <_strtod_l+0x970>
 800da44:	9304      	str	r3, [sp, #16]
 800da46:	4650      	mov	r0, sl
 800da48:	4659      	mov	r1, fp
 800da4a:	2300      	movs	r3, #0
 800da4c:	f018 0f01 	tst.w	r8, #1
 800da50:	d004      	beq.n	800da5c <_strtod_l+0x5dc>
 800da52:	e9d9 2300 	ldrd	r2, r3, [r9]
 800da56:	f7f2 fdcf 	bl	80005f8 <__aeabi_dmul>
 800da5a:	2301      	movs	r3, #1
 800da5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800da60:	f109 0908 	add.w	r9, r9, #8
 800da64:	d1f2      	bne.n	800da4c <_strtod_l+0x5cc>
 800da66:	b10b      	cbz	r3, 800da6c <_strtod_l+0x5ec>
 800da68:	4682      	mov	sl, r0
 800da6a:	468b      	mov	fp, r1
 800da6c:	9b04      	ldr	r3, [sp, #16]
 800da6e:	b1c3      	cbz	r3, 800daa2 <_strtod_l+0x622>
 800da70:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800da74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800da78:	2b00      	cmp	r3, #0
 800da7a:	4659      	mov	r1, fp
 800da7c:	dd11      	ble.n	800daa2 <_strtod_l+0x622>
 800da7e:	2b1f      	cmp	r3, #31
 800da80:	f340 8124 	ble.w	800dccc <_strtod_l+0x84c>
 800da84:	2b34      	cmp	r3, #52	; 0x34
 800da86:	bfde      	ittt	le
 800da88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800da8c:	f04f 33ff 	movle.w	r3, #4294967295
 800da90:	fa03 f202 	lslle.w	r2, r3, r2
 800da94:	f04f 0a00 	mov.w	sl, #0
 800da98:	bfcc      	ite	gt
 800da9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800da9e:	ea02 0b01 	andle.w	fp, r2, r1
 800daa2:	2200      	movs	r2, #0
 800daa4:	2300      	movs	r3, #0
 800daa6:	4650      	mov	r0, sl
 800daa8:	4659      	mov	r1, fp
 800daaa:	f7f3 f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 800daae:	2800      	cmp	r0, #0
 800dab0:	d1a2      	bne.n	800d9f8 <_strtod_l+0x578>
 800dab2:	9b07      	ldr	r3, [sp, #28]
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	9908      	ldr	r1, [sp, #32]
 800dab8:	462b      	mov	r3, r5
 800daba:	463a      	mov	r2, r7
 800dabc:	4620      	mov	r0, r4
 800dabe:	f001 fe2d 	bl	800f71c <__s2b>
 800dac2:	9007      	str	r0, [sp, #28]
 800dac4:	2800      	cmp	r0, #0
 800dac6:	f43f af1f 	beq.w	800d908 <_strtod_l+0x488>
 800daca:	9b05      	ldr	r3, [sp, #20]
 800dacc:	1b9e      	subs	r6, r3, r6
 800dace:	9b06      	ldr	r3, [sp, #24]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	bfb4      	ite	lt
 800dad4:	4633      	movlt	r3, r6
 800dad6:	2300      	movge	r3, #0
 800dad8:	930c      	str	r3, [sp, #48]	; 0x30
 800dada:	9b06      	ldr	r3, [sp, #24]
 800dadc:	2500      	movs	r5, #0
 800dade:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dae2:	9312      	str	r3, [sp, #72]	; 0x48
 800dae4:	462e      	mov	r6, r5
 800dae6:	9b07      	ldr	r3, [sp, #28]
 800dae8:	4620      	mov	r0, r4
 800daea:	6859      	ldr	r1, [r3, #4]
 800daec:	f001 fd6e 	bl	800f5cc <_Balloc>
 800daf0:	9005      	str	r0, [sp, #20]
 800daf2:	2800      	cmp	r0, #0
 800daf4:	f43f af0c 	beq.w	800d910 <_strtod_l+0x490>
 800daf8:	9b07      	ldr	r3, [sp, #28]
 800dafa:	691a      	ldr	r2, [r3, #16]
 800dafc:	3202      	adds	r2, #2
 800dafe:	f103 010c 	add.w	r1, r3, #12
 800db02:	0092      	lsls	r2, r2, #2
 800db04:	300c      	adds	r0, #12
 800db06:	f7fe ffed 	bl	800cae4 <memcpy>
 800db0a:	ec4b ab10 	vmov	d0, sl, fp
 800db0e:	aa1a      	add	r2, sp, #104	; 0x68
 800db10:	a919      	add	r1, sp, #100	; 0x64
 800db12:	4620      	mov	r0, r4
 800db14:	f002 f948 	bl	800fda8 <__d2b>
 800db18:	ec4b ab18 	vmov	d8, sl, fp
 800db1c:	9018      	str	r0, [sp, #96]	; 0x60
 800db1e:	2800      	cmp	r0, #0
 800db20:	f43f aef6 	beq.w	800d910 <_strtod_l+0x490>
 800db24:	2101      	movs	r1, #1
 800db26:	4620      	mov	r0, r4
 800db28:	f001 fe92 	bl	800f850 <__i2b>
 800db2c:	4606      	mov	r6, r0
 800db2e:	2800      	cmp	r0, #0
 800db30:	f43f aeee 	beq.w	800d910 <_strtod_l+0x490>
 800db34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db36:	9904      	ldr	r1, [sp, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	bfab      	itete	ge
 800db3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800db3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800db40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800db42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800db46:	bfac      	ite	ge
 800db48:	eb03 0902 	addge.w	r9, r3, r2
 800db4c:	1ad7      	sublt	r7, r2, r3
 800db4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800db50:	eba3 0801 	sub.w	r8, r3, r1
 800db54:	4490      	add	r8, r2
 800db56:	4ba1      	ldr	r3, [pc, #644]	; (800dddc <_strtod_l+0x95c>)
 800db58:	f108 38ff 	add.w	r8, r8, #4294967295
 800db5c:	4598      	cmp	r8, r3
 800db5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db62:	f280 80c7 	bge.w	800dcf4 <_strtod_l+0x874>
 800db66:	eba3 0308 	sub.w	r3, r3, r8
 800db6a:	2b1f      	cmp	r3, #31
 800db6c:	eba2 0203 	sub.w	r2, r2, r3
 800db70:	f04f 0101 	mov.w	r1, #1
 800db74:	f300 80b1 	bgt.w	800dcda <_strtod_l+0x85a>
 800db78:	fa01 f303 	lsl.w	r3, r1, r3
 800db7c:	930d      	str	r3, [sp, #52]	; 0x34
 800db7e:	2300      	movs	r3, #0
 800db80:	9308      	str	r3, [sp, #32]
 800db82:	eb09 0802 	add.w	r8, r9, r2
 800db86:	9b04      	ldr	r3, [sp, #16]
 800db88:	45c1      	cmp	r9, r8
 800db8a:	4417      	add	r7, r2
 800db8c:	441f      	add	r7, r3
 800db8e:	464b      	mov	r3, r9
 800db90:	bfa8      	it	ge
 800db92:	4643      	movge	r3, r8
 800db94:	42bb      	cmp	r3, r7
 800db96:	bfa8      	it	ge
 800db98:	463b      	movge	r3, r7
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	bfc2      	ittt	gt
 800db9e:	eba8 0803 	subgt.w	r8, r8, r3
 800dba2:	1aff      	subgt	r7, r7, r3
 800dba4:	eba9 0903 	subgt.w	r9, r9, r3
 800dba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	dd17      	ble.n	800dbde <_strtod_l+0x75e>
 800dbae:	4631      	mov	r1, r6
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f001 ff0c 	bl	800f9d0 <__pow5mult>
 800dbb8:	4606      	mov	r6, r0
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	f43f aea8 	beq.w	800d910 <_strtod_l+0x490>
 800dbc0:	4601      	mov	r1, r0
 800dbc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f001 fe59 	bl	800f87c <__multiply>
 800dbca:	900b      	str	r0, [sp, #44]	; 0x2c
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	f43f ae9f 	beq.w	800d910 <_strtod_l+0x490>
 800dbd2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f001 fd39 	bl	800f64c <_Bfree>
 800dbda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbdc:	9318      	str	r3, [sp, #96]	; 0x60
 800dbde:	f1b8 0f00 	cmp.w	r8, #0
 800dbe2:	f300 808c 	bgt.w	800dcfe <_strtod_l+0x87e>
 800dbe6:	9b06      	ldr	r3, [sp, #24]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	dd08      	ble.n	800dbfe <_strtod_l+0x77e>
 800dbec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dbee:	9905      	ldr	r1, [sp, #20]
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f001 feed 	bl	800f9d0 <__pow5mult>
 800dbf6:	9005      	str	r0, [sp, #20]
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	f43f ae89 	beq.w	800d910 <_strtod_l+0x490>
 800dbfe:	2f00      	cmp	r7, #0
 800dc00:	dd08      	ble.n	800dc14 <_strtod_l+0x794>
 800dc02:	9905      	ldr	r1, [sp, #20]
 800dc04:	463a      	mov	r2, r7
 800dc06:	4620      	mov	r0, r4
 800dc08:	f001 ff3c 	bl	800fa84 <__lshift>
 800dc0c:	9005      	str	r0, [sp, #20]
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	f43f ae7e 	beq.w	800d910 <_strtod_l+0x490>
 800dc14:	f1b9 0f00 	cmp.w	r9, #0
 800dc18:	dd08      	ble.n	800dc2c <_strtod_l+0x7ac>
 800dc1a:	4631      	mov	r1, r6
 800dc1c:	464a      	mov	r2, r9
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f001 ff30 	bl	800fa84 <__lshift>
 800dc24:	4606      	mov	r6, r0
 800dc26:	2800      	cmp	r0, #0
 800dc28:	f43f ae72 	beq.w	800d910 <_strtod_l+0x490>
 800dc2c:	9a05      	ldr	r2, [sp, #20]
 800dc2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc30:	4620      	mov	r0, r4
 800dc32:	f001 ffb3 	bl	800fb9c <__mdiff>
 800dc36:	4605      	mov	r5, r0
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	f43f ae69 	beq.w	800d910 <_strtod_l+0x490>
 800dc3e:	68c3      	ldr	r3, [r0, #12]
 800dc40:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc42:	2300      	movs	r3, #0
 800dc44:	60c3      	str	r3, [r0, #12]
 800dc46:	4631      	mov	r1, r6
 800dc48:	f001 ff8c 	bl	800fb64 <__mcmp>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	da60      	bge.n	800dd12 <_strtod_l+0x892>
 800dc50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc52:	ea53 030a 	orrs.w	r3, r3, sl
 800dc56:	f040 8082 	bne.w	800dd5e <_strtod_l+0x8de>
 800dc5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d17d      	bne.n	800dd5e <_strtod_l+0x8de>
 800dc62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc66:	0d1b      	lsrs	r3, r3, #20
 800dc68:	051b      	lsls	r3, r3, #20
 800dc6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dc6e:	d976      	bls.n	800dd5e <_strtod_l+0x8de>
 800dc70:	696b      	ldr	r3, [r5, #20]
 800dc72:	b913      	cbnz	r3, 800dc7a <_strtod_l+0x7fa>
 800dc74:	692b      	ldr	r3, [r5, #16]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	dd71      	ble.n	800dd5e <_strtod_l+0x8de>
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f001 ff00 	bl	800fa84 <__lshift>
 800dc84:	4631      	mov	r1, r6
 800dc86:	4605      	mov	r5, r0
 800dc88:	f001 ff6c 	bl	800fb64 <__mcmp>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	dd66      	ble.n	800dd5e <_strtod_l+0x8de>
 800dc90:	9904      	ldr	r1, [sp, #16]
 800dc92:	4a53      	ldr	r2, [pc, #332]	; (800dde0 <_strtod_l+0x960>)
 800dc94:	465b      	mov	r3, fp
 800dc96:	2900      	cmp	r1, #0
 800dc98:	f000 8081 	beq.w	800dd9e <_strtod_l+0x91e>
 800dc9c:	ea02 010b 	and.w	r1, r2, fp
 800dca0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dca4:	dc7b      	bgt.n	800dd9e <_strtod_l+0x91e>
 800dca6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dcaa:	f77f aea9 	ble.w	800da00 <_strtod_l+0x580>
 800dcae:	4b4d      	ldr	r3, [pc, #308]	; (800dde4 <_strtod_l+0x964>)
 800dcb0:	4650      	mov	r0, sl
 800dcb2:	4659      	mov	r1, fp
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f7f2 fc9f 	bl	80005f8 <__aeabi_dmul>
 800dcba:	460b      	mov	r3, r1
 800dcbc:	4303      	orrs	r3, r0
 800dcbe:	bf08      	it	eq
 800dcc0:	2322      	moveq	r3, #34	; 0x22
 800dcc2:	4682      	mov	sl, r0
 800dcc4:	468b      	mov	fp, r1
 800dcc6:	bf08      	it	eq
 800dcc8:	6023      	streq	r3, [r4, #0]
 800dcca:	e62b      	b.n	800d924 <_strtod_l+0x4a4>
 800dccc:	f04f 32ff 	mov.w	r2, #4294967295
 800dcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd4:	ea03 0a0a 	and.w	sl, r3, sl
 800dcd8:	e6e3      	b.n	800daa2 <_strtod_l+0x622>
 800dcda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dcde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dce2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dce6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dcea:	fa01 f308 	lsl.w	r3, r1, r8
 800dcee:	9308      	str	r3, [sp, #32]
 800dcf0:	910d      	str	r1, [sp, #52]	; 0x34
 800dcf2:	e746      	b.n	800db82 <_strtod_l+0x702>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	9308      	str	r3, [sp, #32]
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	930d      	str	r3, [sp, #52]	; 0x34
 800dcfc:	e741      	b.n	800db82 <_strtod_l+0x702>
 800dcfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dd00:	4642      	mov	r2, r8
 800dd02:	4620      	mov	r0, r4
 800dd04:	f001 febe 	bl	800fa84 <__lshift>
 800dd08:	9018      	str	r0, [sp, #96]	; 0x60
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	f47f af6b 	bne.w	800dbe6 <_strtod_l+0x766>
 800dd10:	e5fe      	b.n	800d910 <_strtod_l+0x490>
 800dd12:	465f      	mov	r7, fp
 800dd14:	d16e      	bne.n	800ddf4 <_strtod_l+0x974>
 800dd16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd1c:	b342      	cbz	r2, 800dd70 <_strtod_l+0x8f0>
 800dd1e:	4a32      	ldr	r2, [pc, #200]	; (800dde8 <_strtod_l+0x968>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d128      	bne.n	800dd76 <_strtod_l+0x8f6>
 800dd24:	9b04      	ldr	r3, [sp, #16]
 800dd26:	4651      	mov	r1, sl
 800dd28:	b1eb      	cbz	r3, 800dd66 <_strtod_l+0x8e6>
 800dd2a:	4b2d      	ldr	r3, [pc, #180]	; (800dde0 <_strtod_l+0x960>)
 800dd2c:	403b      	ands	r3, r7
 800dd2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dd32:	f04f 32ff 	mov.w	r2, #4294967295
 800dd36:	d819      	bhi.n	800dd6c <_strtod_l+0x8ec>
 800dd38:	0d1b      	lsrs	r3, r3, #20
 800dd3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dd3e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd42:	4299      	cmp	r1, r3
 800dd44:	d117      	bne.n	800dd76 <_strtod_l+0x8f6>
 800dd46:	4b29      	ldr	r3, [pc, #164]	; (800ddec <_strtod_l+0x96c>)
 800dd48:	429f      	cmp	r7, r3
 800dd4a:	d102      	bne.n	800dd52 <_strtod_l+0x8d2>
 800dd4c:	3101      	adds	r1, #1
 800dd4e:	f43f addf 	beq.w	800d910 <_strtod_l+0x490>
 800dd52:	4b23      	ldr	r3, [pc, #140]	; (800dde0 <_strtod_l+0x960>)
 800dd54:	403b      	ands	r3, r7
 800dd56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dd5a:	f04f 0a00 	mov.w	sl, #0
 800dd5e:	9b04      	ldr	r3, [sp, #16]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1a4      	bne.n	800dcae <_strtod_l+0x82e>
 800dd64:	e5de      	b.n	800d924 <_strtod_l+0x4a4>
 800dd66:	f04f 33ff 	mov.w	r3, #4294967295
 800dd6a:	e7ea      	b.n	800dd42 <_strtod_l+0x8c2>
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	e7e8      	b.n	800dd42 <_strtod_l+0x8c2>
 800dd70:	ea53 030a 	orrs.w	r3, r3, sl
 800dd74:	d08c      	beq.n	800dc90 <_strtod_l+0x810>
 800dd76:	9b08      	ldr	r3, [sp, #32]
 800dd78:	b1db      	cbz	r3, 800ddb2 <_strtod_l+0x932>
 800dd7a:	423b      	tst	r3, r7
 800dd7c:	d0ef      	beq.n	800dd5e <_strtod_l+0x8de>
 800dd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd80:	9a04      	ldr	r2, [sp, #16]
 800dd82:	4650      	mov	r0, sl
 800dd84:	4659      	mov	r1, fp
 800dd86:	b1c3      	cbz	r3, 800ddba <_strtod_l+0x93a>
 800dd88:	f7ff fb5b 	bl	800d442 <sulp>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	ec51 0b18 	vmov	r0, r1, d8
 800dd94:	f7f2 fa7a 	bl	800028c <__adddf3>
 800dd98:	4682      	mov	sl, r0
 800dd9a:	468b      	mov	fp, r1
 800dd9c:	e7df      	b.n	800dd5e <_strtod_l+0x8de>
 800dd9e:	4013      	ands	r3, r2
 800dda0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dda4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dda8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ddac:	f04f 3aff 	mov.w	sl, #4294967295
 800ddb0:	e7d5      	b.n	800dd5e <_strtod_l+0x8de>
 800ddb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddb4:	ea13 0f0a 	tst.w	r3, sl
 800ddb8:	e7e0      	b.n	800dd7c <_strtod_l+0x8fc>
 800ddba:	f7ff fb42 	bl	800d442 <sulp>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	ec51 0b18 	vmov	r0, r1, d8
 800ddc6:	f7f2 fa5f 	bl	8000288 <__aeabi_dsub>
 800ddca:	2200      	movs	r2, #0
 800ddcc:	2300      	movs	r3, #0
 800ddce:	4682      	mov	sl, r0
 800ddd0:	468b      	mov	fp, r1
 800ddd2:	f7f2 fe79 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d0c1      	beq.n	800dd5e <_strtod_l+0x8de>
 800ddda:	e611      	b.n	800da00 <_strtod_l+0x580>
 800dddc:	fffffc02 	.word	0xfffffc02
 800dde0:	7ff00000 	.word	0x7ff00000
 800dde4:	39500000 	.word	0x39500000
 800dde8:	000fffff 	.word	0x000fffff
 800ddec:	7fefffff 	.word	0x7fefffff
 800ddf0:	08011518 	.word	0x08011518
 800ddf4:	4631      	mov	r1, r6
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	f002 f832 	bl	800fe60 <__ratio>
 800ddfc:	ec59 8b10 	vmov	r8, r9, d0
 800de00:	ee10 0a10 	vmov	r0, s0
 800de04:	2200      	movs	r2, #0
 800de06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de0a:	4649      	mov	r1, r9
 800de0c:	f7f2 fe70 	bl	8000af0 <__aeabi_dcmple>
 800de10:	2800      	cmp	r0, #0
 800de12:	d07a      	beq.n	800df0a <_strtod_l+0xa8a>
 800de14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de16:	2b00      	cmp	r3, #0
 800de18:	d04a      	beq.n	800deb0 <_strtod_l+0xa30>
 800de1a:	4b95      	ldr	r3, [pc, #596]	; (800e070 <_strtod_l+0xbf0>)
 800de1c:	2200      	movs	r2, #0
 800de1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e070 <_strtod_l+0xbf0>
 800de26:	f04f 0800 	mov.w	r8, #0
 800de2a:	4b92      	ldr	r3, [pc, #584]	; (800e074 <_strtod_l+0xbf4>)
 800de2c:	403b      	ands	r3, r7
 800de2e:	930d      	str	r3, [sp, #52]	; 0x34
 800de30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de32:	4b91      	ldr	r3, [pc, #580]	; (800e078 <_strtod_l+0xbf8>)
 800de34:	429a      	cmp	r2, r3
 800de36:	f040 80b0 	bne.w	800df9a <_strtod_l+0xb1a>
 800de3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800de42:	ec4b ab10 	vmov	d0, sl, fp
 800de46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de4a:	f001 ff31 	bl	800fcb0 <__ulp>
 800de4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de52:	ec53 2b10 	vmov	r2, r3, d0
 800de56:	f7f2 fbcf 	bl	80005f8 <__aeabi_dmul>
 800de5a:	4652      	mov	r2, sl
 800de5c:	465b      	mov	r3, fp
 800de5e:	f7f2 fa15 	bl	800028c <__adddf3>
 800de62:	460b      	mov	r3, r1
 800de64:	4983      	ldr	r1, [pc, #524]	; (800e074 <_strtod_l+0xbf4>)
 800de66:	4a85      	ldr	r2, [pc, #532]	; (800e07c <_strtod_l+0xbfc>)
 800de68:	4019      	ands	r1, r3
 800de6a:	4291      	cmp	r1, r2
 800de6c:	4682      	mov	sl, r0
 800de6e:	d960      	bls.n	800df32 <_strtod_l+0xab2>
 800de70:	ee18 3a90 	vmov	r3, s17
 800de74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800de78:	4293      	cmp	r3, r2
 800de7a:	d104      	bne.n	800de86 <_strtod_l+0xa06>
 800de7c:	ee18 3a10 	vmov	r3, s16
 800de80:	3301      	adds	r3, #1
 800de82:	f43f ad45 	beq.w	800d910 <_strtod_l+0x490>
 800de86:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e088 <_strtod_l+0xc08>
 800de8a:	f04f 3aff 	mov.w	sl, #4294967295
 800de8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800de90:	4620      	mov	r0, r4
 800de92:	f001 fbdb 	bl	800f64c <_Bfree>
 800de96:	9905      	ldr	r1, [sp, #20]
 800de98:	4620      	mov	r0, r4
 800de9a:	f001 fbd7 	bl	800f64c <_Bfree>
 800de9e:	4631      	mov	r1, r6
 800dea0:	4620      	mov	r0, r4
 800dea2:	f001 fbd3 	bl	800f64c <_Bfree>
 800dea6:	4629      	mov	r1, r5
 800dea8:	4620      	mov	r0, r4
 800deaa:	f001 fbcf 	bl	800f64c <_Bfree>
 800deae:	e61a      	b.n	800dae6 <_strtod_l+0x666>
 800deb0:	f1ba 0f00 	cmp.w	sl, #0
 800deb4:	d11b      	bne.n	800deee <_strtod_l+0xa6e>
 800deb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800deba:	b9f3      	cbnz	r3, 800defa <_strtod_l+0xa7a>
 800debc:	4b6c      	ldr	r3, [pc, #432]	; (800e070 <_strtod_l+0xbf0>)
 800debe:	2200      	movs	r2, #0
 800dec0:	4640      	mov	r0, r8
 800dec2:	4649      	mov	r1, r9
 800dec4:	f7f2 fe0a 	bl	8000adc <__aeabi_dcmplt>
 800dec8:	b9d0      	cbnz	r0, 800df00 <_strtod_l+0xa80>
 800deca:	4640      	mov	r0, r8
 800decc:	4649      	mov	r1, r9
 800dece:	4b6c      	ldr	r3, [pc, #432]	; (800e080 <_strtod_l+0xc00>)
 800ded0:	2200      	movs	r2, #0
 800ded2:	f7f2 fb91 	bl	80005f8 <__aeabi_dmul>
 800ded6:	4680      	mov	r8, r0
 800ded8:	4689      	mov	r9, r1
 800deda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dede:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dee2:	9315      	str	r3, [sp, #84]	; 0x54
 800dee4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800deec:	e79d      	b.n	800de2a <_strtod_l+0x9aa>
 800deee:	f1ba 0f01 	cmp.w	sl, #1
 800def2:	d102      	bne.n	800defa <_strtod_l+0xa7a>
 800def4:	2f00      	cmp	r7, #0
 800def6:	f43f ad83 	beq.w	800da00 <_strtod_l+0x580>
 800defa:	4b62      	ldr	r3, [pc, #392]	; (800e084 <_strtod_l+0xc04>)
 800defc:	2200      	movs	r2, #0
 800defe:	e78e      	b.n	800de1e <_strtod_l+0x99e>
 800df00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e080 <_strtod_l+0xc00>
 800df04:	f04f 0800 	mov.w	r8, #0
 800df08:	e7e7      	b.n	800deda <_strtod_l+0xa5a>
 800df0a:	4b5d      	ldr	r3, [pc, #372]	; (800e080 <_strtod_l+0xc00>)
 800df0c:	4640      	mov	r0, r8
 800df0e:	4649      	mov	r1, r9
 800df10:	2200      	movs	r2, #0
 800df12:	f7f2 fb71 	bl	80005f8 <__aeabi_dmul>
 800df16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df18:	4680      	mov	r8, r0
 800df1a:	4689      	mov	r9, r1
 800df1c:	b933      	cbnz	r3, 800df2c <_strtod_l+0xaac>
 800df1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df22:	900e      	str	r0, [sp, #56]	; 0x38
 800df24:	930f      	str	r3, [sp, #60]	; 0x3c
 800df26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800df2a:	e7dd      	b.n	800dee8 <_strtod_l+0xa68>
 800df2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800df30:	e7f9      	b.n	800df26 <_strtod_l+0xaa6>
 800df32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800df36:	9b04      	ldr	r3, [sp, #16]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1a8      	bne.n	800de8e <_strtod_l+0xa0e>
 800df3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df42:	0d1b      	lsrs	r3, r3, #20
 800df44:	051b      	lsls	r3, r3, #20
 800df46:	429a      	cmp	r2, r3
 800df48:	d1a1      	bne.n	800de8e <_strtod_l+0xa0e>
 800df4a:	4640      	mov	r0, r8
 800df4c:	4649      	mov	r1, r9
 800df4e:	f7f2 feb3 	bl	8000cb8 <__aeabi_d2lz>
 800df52:	f7f2 fb23 	bl	800059c <__aeabi_l2d>
 800df56:	4602      	mov	r2, r0
 800df58:	460b      	mov	r3, r1
 800df5a:	4640      	mov	r0, r8
 800df5c:	4649      	mov	r1, r9
 800df5e:	f7f2 f993 	bl	8000288 <__aeabi_dsub>
 800df62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df68:	ea43 030a 	orr.w	r3, r3, sl
 800df6c:	4313      	orrs	r3, r2
 800df6e:	4680      	mov	r8, r0
 800df70:	4689      	mov	r9, r1
 800df72:	d055      	beq.n	800e020 <_strtod_l+0xba0>
 800df74:	a336      	add	r3, pc, #216	; (adr r3, 800e050 <_strtod_l+0xbd0>)
 800df76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7a:	f7f2 fdaf 	bl	8000adc <__aeabi_dcmplt>
 800df7e:	2800      	cmp	r0, #0
 800df80:	f47f acd0 	bne.w	800d924 <_strtod_l+0x4a4>
 800df84:	a334      	add	r3, pc, #208	; (adr r3, 800e058 <_strtod_l+0xbd8>)
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	4640      	mov	r0, r8
 800df8c:	4649      	mov	r1, r9
 800df8e:	f7f2 fdc3 	bl	8000b18 <__aeabi_dcmpgt>
 800df92:	2800      	cmp	r0, #0
 800df94:	f43f af7b 	beq.w	800de8e <_strtod_l+0xa0e>
 800df98:	e4c4      	b.n	800d924 <_strtod_l+0x4a4>
 800df9a:	9b04      	ldr	r3, [sp, #16]
 800df9c:	b333      	cbz	r3, 800dfec <_strtod_l+0xb6c>
 800df9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfa0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dfa4:	d822      	bhi.n	800dfec <_strtod_l+0xb6c>
 800dfa6:	a32e      	add	r3, pc, #184	; (adr r3, 800e060 <_strtod_l+0xbe0>)
 800dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfac:	4640      	mov	r0, r8
 800dfae:	4649      	mov	r1, r9
 800dfb0:	f7f2 fd9e 	bl	8000af0 <__aeabi_dcmple>
 800dfb4:	b1a0      	cbz	r0, 800dfe0 <_strtod_l+0xb60>
 800dfb6:	4649      	mov	r1, r9
 800dfb8:	4640      	mov	r0, r8
 800dfba:	f7f2 fdf5 	bl	8000ba8 <__aeabi_d2uiz>
 800dfbe:	2801      	cmp	r0, #1
 800dfc0:	bf38      	it	cc
 800dfc2:	2001      	movcc	r0, #1
 800dfc4:	f7f2 fa9e 	bl	8000504 <__aeabi_ui2d>
 800dfc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfca:	4680      	mov	r8, r0
 800dfcc:	4689      	mov	r9, r1
 800dfce:	bb23      	cbnz	r3, 800e01a <_strtod_l+0xb9a>
 800dfd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfd4:	9010      	str	r0, [sp, #64]	; 0x40
 800dfd6:	9311      	str	r3, [sp, #68]	; 0x44
 800dfd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dfdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dfe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dfe4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dfe8:	1a9b      	subs	r3, r3, r2
 800dfea:	9309      	str	r3, [sp, #36]	; 0x24
 800dfec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dff0:	eeb0 0a48 	vmov.f32	s0, s16
 800dff4:	eef0 0a68 	vmov.f32	s1, s17
 800dff8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dffc:	f001 fe58 	bl	800fcb0 <__ulp>
 800e000:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e004:	ec53 2b10 	vmov	r2, r3, d0
 800e008:	f7f2 faf6 	bl	80005f8 <__aeabi_dmul>
 800e00c:	ec53 2b18 	vmov	r2, r3, d8
 800e010:	f7f2 f93c 	bl	800028c <__adddf3>
 800e014:	4682      	mov	sl, r0
 800e016:	468b      	mov	fp, r1
 800e018:	e78d      	b.n	800df36 <_strtod_l+0xab6>
 800e01a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e01e:	e7db      	b.n	800dfd8 <_strtod_l+0xb58>
 800e020:	a311      	add	r3, pc, #68	; (adr r3, 800e068 <_strtod_l+0xbe8>)
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	f7f2 fd59 	bl	8000adc <__aeabi_dcmplt>
 800e02a:	e7b2      	b.n	800df92 <_strtod_l+0xb12>
 800e02c:	2300      	movs	r3, #0
 800e02e:	930a      	str	r3, [sp, #40]	; 0x28
 800e030:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e032:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e034:	6013      	str	r3, [r2, #0]
 800e036:	f7ff ba6b 	b.w	800d510 <_strtod_l+0x90>
 800e03a:	2a65      	cmp	r2, #101	; 0x65
 800e03c:	f43f ab5f 	beq.w	800d6fe <_strtod_l+0x27e>
 800e040:	2a45      	cmp	r2, #69	; 0x45
 800e042:	f43f ab5c 	beq.w	800d6fe <_strtod_l+0x27e>
 800e046:	2301      	movs	r3, #1
 800e048:	f7ff bb94 	b.w	800d774 <_strtod_l+0x2f4>
 800e04c:	f3af 8000 	nop.w
 800e050:	94a03595 	.word	0x94a03595
 800e054:	3fdfffff 	.word	0x3fdfffff
 800e058:	35afe535 	.word	0x35afe535
 800e05c:	3fe00000 	.word	0x3fe00000
 800e060:	ffc00000 	.word	0xffc00000
 800e064:	41dfffff 	.word	0x41dfffff
 800e068:	94a03595 	.word	0x94a03595
 800e06c:	3fcfffff 	.word	0x3fcfffff
 800e070:	3ff00000 	.word	0x3ff00000
 800e074:	7ff00000 	.word	0x7ff00000
 800e078:	7fe00000 	.word	0x7fe00000
 800e07c:	7c9fffff 	.word	0x7c9fffff
 800e080:	3fe00000 	.word	0x3fe00000
 800e084:	bff00000 	.word	0xbff00000
 800e088:	7fefffff 	.word	0x7fefffff

0800e08c <strtod>:
 800e08c:	460a      	mov	r2, r1
 800e08e:	4601      	mov	r1, r0
 800e090:	4802      	ldr	r0, [pc, #8]	; (800e09c <strtod+0x10>)
 800e092:	4b03      	ldr	r3, [pc, #12]	; (800e0a0 <strtod+0x14>)
 800e094:	6800      	ldr	r0, [r0, #0]
 800e096:	f7ff b9f3 	b.w	800d480 <_strtod_l>
 800e09a:	bf00      	nop
 800e09c:	2000000c 	.word	0x2000000c
 800e0a0:	20000074 	.word	0x20000074

0800e0a4 <strtok>:
 800e0a4:	4b16      	ldr	r3, [pc, #88]	; (800e100 <strtok+0x5c>)
 800e0a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0a8:	681e      	ldr	r6, [r3, #0]
 800e0aa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	b9fc      	cbnz	r4, 800e0f0 <strtok+0x4c>
 800e0b0:	2050      	movs	r0, #80	; 0x50
 800e0b2:	9101      	str	r1, [sp, #4]
 800e0b4:	f001 fa70 	bl	800f598 <malloc>
 800e0b8:	9901      	ldr	r1, [sp, #4]
 800e0ba:	65b0      	str	r0, [r6, #88]	; 0x58
 800e0bc:	4602      	mov	r2, r0
 800e0be:	b920      	cbnz	r0, 800e0ca <strtok+0x26>
 800e0c0:	4b10      	ldr	r3, [pc, #64]	; (800e104 <strtok+0x60>)
 800e0c2:	4811      	ldr	r0, [pc, #68]	; (800e108 <strtok+0x64>)
 800e0c4:	2157      	movs	r1, #87	; 0x57
 800e0c6:	f000 f849 	bl	800e15c <__assert_func>
 800e0ca:	e9c0 4400 	strd	r4, r4, [r0]
 800e0ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e0d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e0d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e0da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e0de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e0e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e0e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e0ea:	6184      	str	r4, [r0, #24]
 800e0ec:	7704      	strb	r4, [r0, #28]
 800e0ee:	6244      	str	r4, [r0, #36]	; 0x24
 800e0f0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	b002      	add	sp, #8
 800e0f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0fc:	f000 b806 	b.w	800e10c <__strtok_r>
 800e100:	2000000c 	.word	0x2000000c
 800e104:	08011540 	.word	0x08011540
 800e108:	08011557 	.word	0x08011557

0800e10c <__strtok_r>:
 800e10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e10e:	b908      	cbnz	r0, 800e114 <__strtok_r+0x8>
 800e110:	6810      	ldr	r0, [r2, #0]
 800e112:	b188      	cbz	r0, 800e138 <__strtok_r+0x2c>
 800e114:	4604      	mov	r4, r0
 800e116:	4620      	mov	r0, r4
 800e118:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e11c:	460f      	mov	r7, r1
 800e11e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e122:	b91e      	cbnz	r6, 800e12c <__strtok_r+0x20>
 800e124:	b965      	cbnz	r5, 800e140 <__strtok_r+0x34>
 800e126:	6015      	str	r5, [r2, #0]
 800e128:	4628      	mov	r0, r5
 800e12a:	e005      	b.n	800e138 <__strtok_r+0x2c>
 800e12c:	42b5      	cmp	r5, r6
 800e12e:	d1f6      	bne.n	800e11e <__strtok_r+0x12>
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1f0      	bne.n	800e116 <__strtok_r+0xa>
 800e134:	6014      	str	r4, [r2, #0]
 800e136:	7003      	strb	r3, [r0, #0]
 800e138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e13a:	461c      	mov	r4, r3
 800e13c:	e00c      	b.n	800e158 <__strtok_r+0x4c>
 800e13e:	b915      	cbnz	r5, 800e146 <__strtok_r+0x3a>
 800e140:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e144:	460e      	mov	r6, r1
 800e146:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e14a:	42ab      	cmp	r3, r5
 800e14c:	d1f7      	bne.n	800e13e <__strtok_r+0x32>
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d0f3      	beq.n	800e13a <__strtok_r+0x2e>
 800e152:	2300      	movs	r3, #0
 800e154:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e158:	6014      	str	r4, [r2, #0]
 800e15a:	e7ed      	b.n	800e138 <__strtok_r+0x2c>

0800e15c <__assert_func>:
 800e15c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e15e:	4614      	mov	r4, r2
 800e160:	461a      	mov	r2, r3
 800e162:	4b09      	ldr	r3, [pc, #36]	; (800e188 <__assert_func+0x2c>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4605      	mov	r5, r0
 800e168:	68d8      	ldr	r0, [r3, #12]
 800e16a:	b14c      	cbz	r4, 800e180 <__assert_func+0x24>
 800e16c:	4b07      	ldr	r3, [pc, #28]	; (800e18c <__assert_func+0x30>)
 800e16e:	9100      	str	r1, [sp, #0]
 800e170:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e174:	4906      	ldr	r1, [pc, #24]	; (800e190 <__assert_func+0x34>)
 800e176:	462b      	mov	r3, r5
 800e178:	f000 fe88 	bl	800ee8c <fiprintf>
 800e17c:	f002 fb8e 	bl	801089c <abort>
 800e180:	4b04      	ldr	r3, [pc, #16]	; (800e194 <__assert_func+0x38>)
 800e182:	461c      	mov	r4, r3
 800e184:	e7f3      	b.n	800e16e <__assert_func+0x12>
 800e186:	bf00      	nop
 800e188:	2000000c 	.word	0x2000000c
 800e18c:	080115b4 	.word	0x080115b4
 800e190:	080115c1 	.word	0x080115c1
 800e194:	080115ef 	.word	0x080115ef

0800e198 <quorem>:
 800e198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	6903      	ldr	r3, [r0, #16]
 800e19e:	690c      	ldr	r4, [r1, #16]
 800e1a0:	42a3      	cmp	r3, r4
 800e1a2:	4607      	mov	r7, r0
 800e1a4:	f2c0 8081 	blt.w	800e2aa <quorem+0x112>
 800e1a8:	3c01      	subs	r4, #1
 800e1aa:	f101 0814 	add.w	r8, r1, #20
 800e1ae:	f100 0514 	add.w	r5, r0, #20
 800e1b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1b6:	9301      	str	r3, [sp, #4]
 800e1b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e1bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e1c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e1cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800e1d0:	d331      	bcc.n	800e236 <quorem+0x9e>
 800e1d2:	f04f 0e00 	mov.w	lr, #0
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	46ac      	mov	ip, r5
 800e1da:	46f2      	mov	sl, lr
 800e1dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800e1e0:	b293      	uxth	r3, r2
 800e1e2:	fb06 e303 	mla	r3, r6, r3, lr
 800e1e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	ebaa 0303 	sub.w	r3, sl, r3
 800e1f0:	f8dc a000 	ldr.w	sl, [ip]
 800e1f4:	0c12      	lsrs	r2, r2, #16
 800e1f6:	fa13 f38a 	uxtah	r3, r3, sl
 800e1fa:	fb06 e202 	mla	r2, r6, r2, lr
 800e1fe:	9300      	str	r3, [sp, #0]
 800e200:	9b00      	ldr	r3, [sp, #0]
 800e202:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e206:	b292      	uxth	r2, r2
 800e208:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e20c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e210:	f8bd 3000 	ldrh.w	r3, [sp]
 800e214:	4581      	cmp	r9, r0
 800e216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e21a:	f84c 3b04 	str.w	r3, [ip], #4
 800e21e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e222:	d2db      	bcs.n	800e1dc <quorem+0x44>
 800e224:	f855 300b 	ldr.w	r3, [r5, fp]
 800e228:	b92b      	cbnz	r3, 800e236 <quorem+0x9e>
 800e22a:	9b01      	ldr	r3, [sp, #4]
 800e22c:	3b04      	subs	r3, #4
 800e22e:	429d      	cmp	r5, r3
 800e230:	461a      	mov	r2, r3
 800e232:	d32e      	bcc.n	800e292 <quorem+0xfa>
 800e234:	613c      	str	r4, [r7, #16]
 800e236:	4638      	mov	r0, r7
 800e238:	f001 fc94 	bl	800fb64 <__mcmp>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	db24      	blt.n	800e28a <quorem+0xf2>
 800e240:	3601      	adds	r6, #1
 800e242:	4628      	mov	r0, r5
 800e244:	f04f 0c00 	mov.w	ip, #0
 800e248:	f858 2b04 	ldr.w	r2, [r8], #4
 800e24c:	f8d0 e000 	ldr.w	lr, [r0]
 800e250:	b293      	uxth	r3, r2
 800e252:	ebac 0303 	sub.w	r3, ip, r3
 800e256:	0c12      	lsrs	r2, r2, #16
 800e258:	fa13 f38e 	uxtah	r3, r3, lr
 800e25c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e264:	b29b      	uxth	r3, r3
 800e266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e26a:	45c1      	cmp	r9, r8
 800e26c:	f840 3b04 	str.w	r3, [r0], #4
 800e270:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e274:	d2e8      	bcs.n	800e248 <quorem+0xb0>
 800e276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e27a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e27e:	b922      	cbnz	r2, 800e28a <quorem+0xf2>
 800e280:	3b04      	subs	r3, #4
 800e282:	429d      	cmp	r5, r3
 800e284:	461a      	mov	r2, r3
 800e286:	d30a      	bcc.n	800e29e <quorem+0x106>
 800e288:	613c      	str	r4, [r7, #16]
 800e28a:	4630      	mov	r0, r6
 800e28c:	b003      	add	sp, #12
 800e28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e292:	6812      	ldr	r2, [r2, #0]
 800e294:	3b04      	subs	r3, #4
 800e296:	2a00      	cmp	r2, #0
 800e298:	d1cc      	bne.n	800e234 <quorem+0x9c>
 800e29a:	3c01      	subs	r4, #1
 800e29c:	e7c7      	b.n	800e22e <quorem+0x96>
 800e29e:	6812      	ldr	r2, [r2, #0]
 800e2a0:	3b04      	subs	r3, #4
 800e2a2:	2a00      	cmp	r2, #0
 800e2a4:	d1f0      	bne.n	800e288 <quorem+0xf0>
 800e2a6:	3c01      	subs	r4, #1
 800e2a8:	e7eb      	b.n	800e282 <quorem+0xea>
 800e2aa:	2000      	movs	r0, #0
 800e2ac:	e7ee      	b.n	800e28c <quorem+0xf4>
	...

0800e2b0 <_dtoa_r>:
 800e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b4:	ed2d 8b04 	vpush	{d8-d9}
 800e2b8:	ec57 6b10 	vmov	r6, r7, d0
 800e2bc:	b093      	sub	sp, #76	; 0x4c
 800e2be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e2c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e2c4:	9106      	str	r1, [sp, #24]
 800e2c6:	ee10 aa10 	vmov	sl, s0
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	9209      	str	r2, [sp, #36]	; 0x24
 800e2ce:	930c      	str	r3, [sp, #48]	; 0x30
 800e2d0:	46bb      	mov	fp, r7
 800e2d2:	b975      	cbnz	r5, 800e2f2 <_dtoa_r+0x42>
 800e2d4:	2010      	movs	r0, #16
 800e2d6:	f001 f95f 	bl	800f598 <malloc>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	6260      	str	r0, [r4, #36]	; 0x24
 800e2de:	b920      	cbnz	r0, 800e2ea <_dtoa_r+0x3a>
 800e2e0:	4ba7      	ldr	r3, [pc, #668]	; (800e580 <_dtoa_r+0x2d0>)
 800e2e2:	21ea      	movs	r1, #234	; 0xea
 800e2e4:	48a7      	ldr	r0, [pc, #668]	; (800e584 <_dtoa_r+0x2d4>)
 800e2e6:	f7ff ff39 	bl	800e15c <__assert_func>
 800e2ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e2ee:	6005      	str	r5, [r0, #0]
 800e2f0:	60c5      	str	r5, [r0, #12]
 800e2f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2f4:	6819      	ldr	r1, [r3, #0]
 800e2f6:	b151      	cbz	r1, 800e30e <_dtoa_r+0x5e>
 800e2f8:	685a      	ldr	r2, [r3, #4]
 800e2fa:	604a      	str	r2, [r1, #4]
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	4093      	lsls	r3, r2
 800e300:	608b      	str	r3, [r1, #8]
 800e302:	4620      	mov	r0, r4
 800e304:	f001 f9a2 	bl	800f64c <_Bfree>
 800e308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e30a:	2200      	movs	r2, #0
 800e30c:	601a      	str	r2, [r3, #0]
 800e30e:	1e3b      	subs	r3, r7, #0
 800e310:	bfaa      	itet	ge
 800e312:	2300      	movge	r3, #0
 800e314:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e318:	f8c8 3000 	strge.w	r3, [r8]
 800e31c:	4b9a      	ldr	r3, [pc, #616]	; (800e588 <_dtoa_r+0x2d8>)
 800e31e:	bfbc      	itt	lt
 800e320:	2201      	movlt	r2, #1
 800e322:	f8c8 2000 	strlt.w	r2, [r8]
 800e326:	ea33 030b 	bics.w	r3, r3, fp
 800e32a:	d11b      	bne.n	800e364 <_dtoa_r+0xb4>
 800e32c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e32e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e332:	6013      	str	r3, [r2, #0]
 800e334:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e338:	4333      	orrs	r3, r6
 800e33a:	f000 8592 	beq.w	800ee62 <_dtoa_r+0xbb2>
 800e33e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e340:	b963      	cbnz	r3, 800e35c <_dtoa_r+0xac>
 800e342:	4b92      	ldr	r3, [pc, #584]	; (800e58c <_dtoa_r+0x2dc>)
 800e344:	e022      	b.n	800e38c <_dtoa_r+0xdc>
 800e346:	4b92      	ldr	r3, [pc, #584]	; (800e590 <_dtoa_r+0x2e0>)
 800e348:	9301      	str	r3, [sp, #4]
 800e34a:	3308      	adds	r3, #8
 800e34c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e34e:	6013      	str	r3, [r2, #0]
 800e350:	9801      	ldr	r0, [sp, #4]
 800e352:	b013      	add	sp, #76	; 0x4c
 800e354:	ecbd 8b04 	vpop	{d8-d9}
 800e358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35c:	4b8b      	ldr	r3, [pc, #556]	; (800e58c <_dtoa_r+0x2dc>)
 800e35e:	9301      	str	r3, [sp, #4]
 800e360:	3303      	adds	r3, #3
 800e362:	e7f3      	b.n	800e34c <_dtoa_r+0x9c>
 800e364:	2200      	movs	r2, #0
 800e366:	2300      	movs	r3, #0
 800e368:	4650      	mov	r0, sl
 800e36a:	4659      	mov	r1, fp
 800e36c:	f7f2 fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 800e370:	ec4b ab19 	vmov	d9, sl, fp
 800e374:	4680      	mov	r8, r0
 800e376:	b158      	cbz	r0, 800e390 <_dtoa_r+0xe0>
 800e378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e37a:	2301      	movs	r3, #1
 800e37c:	6013      	str	r3, [r2, #0]
 800e37e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e380:	2b00      	cmp	r3, #0
 800e382:	f000 856b 	beq.w	800ee5c <_dtoa_r+0xbac>
 800e386:	4883      	ldr	r0, [pc, #524]	; (800e594 <_dtoa_r+0x2e4>)
 800e388:	6018      	str	r0, [r3, #0]
 800e38a:	1e43      	subs	r3, r0, #1
 800e38c:	9301      	str	r3, [sp, #4]
 800e38e:	e7df      	b.n	800e350 <_dtoa_r+0xa0>
 800e390:	ec4b ab10 	vmov	d0, sl, fp
 800e394:	aa10      	add	r2, sp, #64	; 0x40
 800e396:	a911      	add	r1, sp, #68	; 0x44
 800e398:	4620      	mov	r0, r4
 800e39a:	f001 fd05 	bl	800fda8 <__d2b>
 800e39e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e3a2:	ee08 0a10 	vmov	s16, r0
 800e3a6:	2d00      	cmp	r5, #0
 800e3a8:	f000 8084 	beq.w	800e4b4 <_dtoa_r+0x204>
 800e3ac:	ee19 3a90 	vmov	r3, s19
 800e3b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e3b8:	4656      	mov	r6, sl
 800e3ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e3be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e3c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e3c6:	4b74      	ldr	r3, [pc, #464]	; (800e598 <_dtoa_r+0x2e8>)
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	f7f1 ff5b 	bl	8000288 <__aeabi_dsub>
 800e3d2:	a365      	add	r3, pc, #404	; (adr r3, 800e568 <_dtoa_r+0x2b8>)
 800e3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d8:	f7f2 f90e 	bl	80005f8 <__aeabi_dmul>
 800e3dc:	a364      	add	r3, pc, #400	; (adr r3, 800e570 <_dtoa_r+0x2c0>)
 800e3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e2:	f7f1 ff53 	bl	800028c <__adddf3>
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	460f      	mov	r7, r1
 800e3ec:	f7f2 f89a 	bl	8000524 <__aeabi_i2d>
 800e3f0:	a361      	add	r3, pc, #388	; (adr r3, 800e578 <_dtoa_r+0x2c8>)
 800e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f6:	f7f2 f8ff 	bl	80005f8 <__aeabi_dmul>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	4630      	mov	r0, r6
 800e400:	4639      	mov	r1, r7
 800e402:	f7f1 ff43 	bl	800028c <__adddf3>
 800e406:	4606      	mov	r6, r0
 800e408:	460f      	mov	r7, r1
 800e40a:	f7f2 fba5 	bl	8000b58 <__aeabi_d2iz>
 800e40e:	2200      	movs	r2, #0
 800e410:	9000      	str	r0, [sp, #0]
 800e412:	2300      	movs	r3, #0
 800e414:	4630      	mov	r0, r6
 800e416:	4639      	mov	r1, r7
 800e418:	f7f2 fb60 	bl	8000adc <__aeabi_dcmplt>
 800e41c:	b150      	cbz	r0, 800e434 <_dtoa_r+0x184>
 800e41e:	9800      	ldr	r0, [sp, #0]
 800e420:	f7f2 f880 	bl	8000524 <__aeabi_i2d>
 800e424:	4632      	mov	r2, r6
 800e426:	463b      	mov	r3, r7
 800e428:	f7f2 fb4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e42c:	b910      	cbnz	r0, 800e434 <_dtoa_r+0x184>
 800e42e:	9b00      	ldr	r3, [sp, #0]
 800e430:	3b01      	subs	r3, #1
 800e432:	9300      	str	r3, [sp, #0]
 800e434:	9b00      	ldr	r3, [sp, #0]
 800e436:	2b16      	cmp	r3, #22
 800e438:	d85a      	bhi.n	800e4f0 <_dtoa_r+0x240>
 800e43a:	9a00      	ldr	r2, [sp, #0]
 800e43c:	4b57      	ldr	r3, [pc, #348]	; (800e59c <_dtoa_r+0x2ec>)
 800e43e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e446:	ec51 0b19 	vmov	r0, r1, d9
 800e44a:	f7f2 fb47 	bl	8000adc <__aeabi_dcmplt>
 800e44e:	2800      	cmp	r0, #0
 800e450:	d050      	beq.n	800e4f4 <_dtoa_r+0x244>
 800e452:	9b00      	ldr	r3, [sp, #0]
 800e454:	3b01      	subs	r3, #1
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	2300      	movs	r3, #0
 800e45a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e45c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e45e:	1b5d      	subs	r5, r3, r5
 800e460:	1e6b      	subs	r3, r5, #1
 800e462:	9305      	str	r3, [sp, #20]
 800e464:	bf45      	ittet	mi
 800e466:	f1c5 0301 	rsbmi	r3, r5, #1
 800e46a:	9304      	strmi	r3, [sp, #16]
 800e46c:	2300      	movpl	r3, #0
 800e46e:	2300      	movmi	r3, #0
 800e470:	bf4c      	ite	mi
 800e472:	9305      	strmi	r3, [sp, #20]
 800e474:	9304      	strpl	r3, [sp, #16]
 800e476:	9b00      	ldr	r3, [sp, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	db3d      	blt.n	800e4f8 <_dtoa_r+0x248>
 800e47c:	9b05      	ldr	r3, [sp, #20]
 800e47e:	9a00      	ldr	r2, [sp, #0]
 800e480:	920a      	str	r2, [sp, #40]	; 0x28
 800e482:	4413      	add	r3, r2
 800e484:	9305      	str	r3, [sp, #20]
 800e486:	2300      	movs	r3, #0
 800e488:	9307      	str	r3, [sp, #28]
 800e48a:	9b06      	ldr	r3, [sp, #24]
 800e48c:	2b09      	cmp	r3, #9
 800e48e:	f200 8089 	bhi.w	800e5a4 <_dtoa_r+0x2f4>
 800e492:	2b05      	cmp	r3, #5
 800e494:	bfc4      	itt	gt
 800e496:	3b04      	subgt	r3, #4
 800e498:	9306      	strgt	r3, [sp, #24]
 800e49a:	9b06      	ldr	r3, [sp, #24]
 800e49c:	f1a3 0302 	sub.w	r3, r3, #2
 800e4a0:	bfcc      	ite	gt
 800e4a2:	2500      	movgt	r5, #0
 800e4a4:	2501      	movle	r5, #1
 800e4a6:	2b03      	cmp	r3, #3
 800e4a8:	f200 8087 	bhi.w	800e5ba <_dtoa_r+0x30a>
 800e4ac:	e8df f003 	tbb	[pc, r3]
 800e4b0:	59383a2d 	.word	0x59383a2d
 800e4b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e4b8:	441d      	add	r5, r3
 800e4ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e4be:	2b20      	cmp	r3, #32
 800e4c0:	bfc1      	itttt	gt
 800e4c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e4c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e4ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800e4ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e4d2:	bfda      	itte	le
 800e4d4:	f1c3 0320 	rsble	r3, r3, #32
 800e4d8:	fa06 f003 	lslle.w	r0, r6, r3
 800e4dc:	4318      	orrgt	r0, r3
 800e4de:	f7f2 f811 	bl	8000504 <__aeabi_ui2d>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	4606      	mov	r6, r0
 800e4e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e4ea:	3d01      	subs	r5, #1
 800e4ec:	930e      	str	r3, [sp, #56]	; 0x38
 800e4ee:	e76a      	b.n	800e3c6 <_dtoa_r+0x116>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	e7b2      	b.n	800e45a <_dtoa_r+0x1aa>
 800e4f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e4f6:	e7b1      	b.n	800e45c <_dtoa_r+0x1ac>
 800e4f8:	9b04      	ldr	r3, [sp, #16]
 800e4fa:	9a00      	ldr	r2, [sp, #0]
 800e4fc:	1a9b      	subs	r3, r3, r2
 800e4fe:	9304      	str	r3, [sp, #16]
 800e500:	4253      	negs	r3, r2
 800e502:	9307      	str	r3, [sp, #28]
 800e504:	2300      	movs	r3, #0
 800e506:	930a      	str	r3, [sp, #40]	; 0x28
 800e508:	e7bf      	b.n	800e48a <_dtoa_r+0x1da>
 800e50a:	2300      	movs	r3, #0
 800e50c:	9308      	str	r3, [sp, #32]
 800e50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e510:	2b00      	cmp	r3, #0
 800e512:	dc55      	bgt.n	800e5c0 <_dtoa_r+0x310>
 800e514:	2301      	movs	r3, #1
 800e516:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e51a:	461a      	mov	r2, r3
 800e51c:	9209      	str	r2, [sp, #36]	; 0x24
 800e51e:	e00c      	b.n	800e53a <_dtoa_r+0x28a>
 800e520:	2301      	movs	r3, #1
 800e522:	e7f3      	b.n	800e50c <_dtoa_r+0x25c>
 800e524:	2300      	movs	r3, #0
 800e526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e528:	9308      	str	r3, [sp, #32]
 800e52a:	9b00      	ldr	r3, [sp, #0]
 800e52c:	4413      	add	r3, r2
 800e52e:	9302      	str	r3, [sp, #8]
 800e530:	3301      	adds	r3, #1
 800e532:	2b01      	cmp	r3, #1
 800e534:	9303      	str	r3, [sp, #12]
 800e536:	bfb8      	it	lt
 800e538:	2301      	movlt	r3, #1
 800e53a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e53c:	2200      	movs	r2, #0
 800e53e:	6042      	str	r2, [r0, #4]
 800e540:	2204      	movs	r2, #4
 800e542:	f102 0614 	add.w	r6, r2, #20
 800e546:	429e      	cmp	r6, r3
 800e548:	6841      	ldr	r1, [r0, #4]
 800e54a:	d93d      	bls.n	800e5c8 <_dtoa_r+0x318>
 800e54c:	4620      	mov	r0, r4
 800e54e:	f001 f83d 	bl	800f5cc <_Balloc>
 800e552:	9001      	str	r0, [sp, #4]
 800e554:	2800      	cmp	r0, #0
 800e556:	d13b      	bne.n	800e5d0 <_dtoa_r+0x320>
 800e558:	4b11      	ldr	r3, [pc, #68]	; (800e5a0 <_dtoa_r+0x2f0>)
 800e55a:	4602      	mov	r2, r0
 800e55c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e560:	e6c0      	b.n	800e2e4 <_dtoa_r+0x34>
 800e562:	2301      	movs	r3, #1
 800e564:	e7df      	b.n	800e526 <_dtoa_r+0x276>
 800e566:	bf00      	nop
 800e568:	636f4361 	.word	0x636f4361
 800e56c:	3fd287a7 	.word	0x3fd287a7
 800e570:	8b60c8b3 	.word	0x8b60c8b3
 800e574:	3fc68a28 	.word	0x3fc68a28
 800e578:	509f79fb 	.word	0x509f79fb
 800e57c:	3fd34413 	.word	0x3fd34413
 800e580:	08011540 	.word	0x08011540
 800e584:	080115fd 	.word	0x080115fd
 800e588:	7ff00000 	.word	0x7ff00000
 800e58c:	080115f9 	.word	0x080115f9
 800e590:	080115f0 	.word	0x080115f0
 800e594:	080114cd 	.word	0x080114cd
 800e598:	3ff80000 	.word	0x3ff80000
 800e59c:	08011768 	.word	0x08011768
 800e5a0:	08011658 	.word	0x08011658
 800e5a4:	2501      	movs	r5, #1
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	9306      	str	r3, [sp, #24]
 800e5aa:	9508      	str	r5, [sp, #32]
 800e5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	2312      	movs	r3, #18
 800e5b8:	e7b0      	b.n	800e51c <_dtoa_r+0x26c>
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	9308      	str	r3, [sp, #32]
 800e5be:	e7f5      	b.n	800e5ac <_dtoa_r+0x2fc>
 800e5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5c6:	e7b8      	b.n	800e53a <_dtoa_r+0x28a>
 800e5c8:	3101      	adds	r1, #1
 800e5ca:	6041      	str	r1, [r0, #4]
 800e5cc:	0052      	lsls	r2, r2, #1
 800e5ce:	e7b8      	b.n	800e542 <_dtoa_r+0x292>
 800e5d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5d2:	9a01      	ldr	r2, [sp, #4]
 800e5d4:	601a      	str	r2, [r3, #0]
 800e5d6:	9b03      	ldr	r3, [sp, #12]
 800e5d8:	2b0e      	cmp	r3, #14
 800e5da:	f200 809d 	bhi.w	800e718 <_dtoa_r+0x468>
 800e5de:	2d00      	cmp	r5, #0
 800e5e0:	f000 809a 	beq.w	800e718 <_dtoa_r+0x468>
 800e5e4:	9b00      	ldr	r3, [sp, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	dd32      	ble.n	800e650 <_dtoa_r+0x3a0>
 800e5ea:	4ab7      	ldr	r2, [pc, #732]	; (800e8c8 <_dtoa_r+0x618>)
 800e5ec:	f003 030f 	and.w	r3, r3, #15
 800e5f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e5f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5f8:	9b00      	ldr	r3, [sp, #0]
 800e5fa:	05d8      	lsls	r0, r3, #23
 800e5fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e600:	d516      	bpl.n	800e630 <_dtoa_r+0x380>
 800e602:	4bb2      	ldr	r3, [pc, #712]	; (800e8cc <_dtoa_r+0x61c>)
 800e604:	ec51 0b19 	vmov	r0, r1, d9
 800e608:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e60c:	f7f2 f91e 	bl	800084c <__aeabi_ddiv>
 800e610:	f007 070f 	and.w	r7, r7, #15
 800e614:	4682      	mov	sl, r0
 800e616:	468b      	mov	fp, r1
 800e618:	2503      	movs	r5, #3
 800e61a:	4eac      	ldr	r6, [pc, #688]	; (800e8cc <_dtoa_r+0x61c>)
 800e61c:	b957      	cbnz	r7, 800e634 <_dtoa_r+0x384>
 800e61e:	4642      	mov	r2, r8
 800e620:	464b      	mov	r3, r9
 800e622:	4650      	mov	r0, sl
 800e624:	4659      	mov	r1, fp
 800e626:	f7f2 f911 	bl	800084c <__aeabi_ddiv>
 800e62a:	4682      	mov	sl, r0
 800e62c:	468b      	mov	fp, r1
 800e62e:	e028      	b.n	800e682 <_dtoa_r+0x3d2>
 800e630:	2502      	movs	r5, #2
 800e632:	e7f2      	b.n	800e61a <_dtoa_r+0x36a>
 800e634:	07f9      	lsls	r1, r7, #31
 800e636:	d508      	bpl.n	800e64a <_dtoa_r+0x39a>
 800e638:	4640      	mov	r0, r8
 800e63a:	4649      	mov	r1, r9
 800e63c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e640:	f7f1 ffda 	bl	80005f8 <__aeabi_dmul>
 800e644:	3501      	adds	r5, #1
 800e646:	4680      	mov	r8, r0
 800e648:	4689      	mov	r9, r1
 800e64a:	107f      	asrs	r7, r7, #1
 800e64c:	3608      	adds	r6, #8
 800e64e:	e7e5      	b.n	800e61c <_dtoa_r+0x36c>
 800e650:	f000 809b 	beq.w	800e78a <_dtoa_r+0x4da>
 800e654:	9b00      	ldr	r3, [sp, #0]
 800e656:	4f9d      	ldr	r7, [pc, #628]	; (800e8cc <_dtoa_r+0x61c>)
 800e658:	425e      	negs	r6, r3
 800e65a:	4b9b      	ldr	r3, [pc, #620]	; (800e8c8 <_dtoa_r+0x618>)
 800e65c:	f006 020f 	and.w	r2, r6, #15
 800e660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e668:	ec51 0b19 	vmov	r0, r1, d9
 800e66c:	f7f1 ffc4 	bl	80005f8 <__aeabi_dmul>
 800e670:	1136      	asrs	r6, r6, #4
 800e672:	4682      	mov	sl, r0
 800e674:	468b      	mov	fp, r1
 800e676:	2300      	movs	r3, #0
 800e678:	2502      	movs	r5, #2
 800e67a:	2e00      	cmp	r6, #0
 800e67c:	d17a      	bne.n	800e774 <_dtoa_r+0x4c4>
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1d3      	bne.n	800e62a <_dtoa_r+0x37a>
 800e682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e684:	2b00      	cmp	r3, #0
 800e686:	f000 8082 	beq.w	800e78e <_dtoa_r+0x4de>
 800e68a:	4b91      	ldr	r3, [pc, #580]	; (800e8d0 <_dtoa_r+0x620>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	4650      	mov	r0, sl
 800e690:	4659      	mov	r1, fp
 800e692:	f7f2 fa23 	bl	8000adc <__aeabi_dcmplt>
 800e696:	2800      	cmp	r0, #0
 800e698:	d079      	beq.n	800e78e <_dtoa_r+0x4de>
 800e69a:	9b03      	ldr	r3, [sp, #12]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d076      	beq.n	800e78e <_dtoa_r+0x4de>
 800e6a0:	9b02      	ldr	r3, [sp, #8]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	dd36      	ble.n	800e714 <_dtoa_r+0x464>
 800e6a6:	9b00      	ldr	r3, [sp, #0]
 800e6a8:	4650      	mov	r0, sl
 800e6aa:	4659      	mov	r1, fp
 800e6ac:	1e5f      	subs	r7, r3, #1
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	4b88      	ldr	r3, [pc, #544]	; (800e8d4 <_dtoa_r+0x624>)
 800e6b2:	f7f1 ffa1 	bl	80005f8 <__aeabi_dmul>
 800e6b6:	9e02      	ldr	r6, [sp, #8]
 800e6b8:	4682      	mov	sl, r0
 800e6ba:	468b      	mov	fp, r1
 800e6bc:	3501      	adds	r5, #1
 800e6be:	4628      	mov	r0, r5
 800e6c0:	f7f1 ff30 	bl	8000524 <__aeabi_i2d>
 800e6c4:	4652      	mov	r2, sl
 800e6c6:	465b      	mov	r3, fp
 800e6c8:	f7f1 ff96 	bl	80005f8 <__aeabi_dmul>
 800e6cc:	4b82      	ldr	r3, [pc, #520]	; (800e8d8 <_dtoa_r+0x628>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f7f1 fddc 	bl	800028c <__adddf3>
 800e6d4:	46d0      	mov	r8, sl
 800e6d6:	46d9      	mov	r9, fp
 800e6d8:	4682      	mov	sl, r0
 800e6da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e6de:	2e00      	cmp	r6, #0
 800e6e0:	d158      	bne.n	800e794 <_dtoa_r+0x4e4>
 800e6e2:	4b7e      	ldr	r3, [pc, #504]	; (800e8dc <_dtoa_r+0x62c>)
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	4640      	mov	r0, r8
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	f7f1 fdcd 	bl	8000288 <__aeabi_dsub>
 800e6ee:	4652      	mov	r2, sl
 800e6f0:	465b      	mov	r3, fp
 800e6f2:	4680      	mov	r8, r0
 800e6f4:	4689      	mov	r9, r1
 800e6f6:	f7f2 fa0f 	bl	8000b18 <__aeabi_dcmpgt>
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	f040 8295 	bne.w	800ec2a <_dtoa_r+0x97a>
 800e700:	4652      	mov	r2, sl
 800e702:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e706:	4640      	mov	r0, r8
 800e708:	4649      	mov	r1, r9
 800e70a:	f7f2 f9e7 	bl	8000adc <__aeabi_dcmplt>
 800e70e:	2800      	cmp	r0, #0
 800e710:	f040 8289 	bne.w	800ec26 <_dtoa_r+0x976>
 800e714:	ec5b ab19 	vmov	sl, fp, d9
 800e718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f2c0 8148 	blt.w	800e9b0 <_dtoa_r+0x700>
 800e720:	9a00      	ldr	r2, [sp, #0]
 800e722:	2a0e      	cmp	r2, #14
 800e724:	f300 8144 	bgt.w	800e9b0 <_dtoa_r+0x700>
 800e728:	4b67      	ldr	r3, [pc, #412]	; (800e8c8 <_dtoa_r+0x618>)
 800e72a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e72e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e734:	2b00      	cmp	r3, #0
 800e736:	f280 80d5 	bge.w	800e8e4 <_dtoa_r+0x634>
 800e73a:	9b03      	ldr	r3, [sp, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f300 80d1 	bgt.w	800e8e4 <_dtoa_r+0x634>
 800e742:	f040 826f 	bne.w	800ec24 <_dtoa_r+0x974>
 800e746:	4b65      	ldr	r3, [pc, #404]	; (800e8dc <_dtoa_r+0x62c>)
 800e748:	2200      	movs	r2, #0
 800e74a:	4640      	mov	r0, r8
 800e74c:	4649      	mov	r1, r9
 800e74e:	f7f1 ff53 	bl	80005f8 <__aeabi_dmul>
 800e752:	4652      	mov	r2, sl
 800e754:	465b      	mov	r3, fp
 800e756:	f7f2 f9d5 	bl	8000b04 <__aeabi_dcmpge>
 800e75a:	9e03      	ldr	r6, [sp, #12]
 800e75c:	4637      	mov	r7, r6
 800e75e:	2800      	cmp	r0, #0
 800e760:	f040 8245 	bne.w	800ebee <_dtoa_r+0x93e>
 800e764:	9d01      	ldr	r5, [sp, #4]
 800e766:	2331      	movs	r3, #49	; 0x31
 800e768:	f805 3b01 	strb.w	r3, [r5], #1
 800e76c:	9b00      	ldr	r3, [sp, #0]
 800e76e:	3301      	adds	r3, #1
 800e770:	9300      	str	r3, [sp, #0]
 800e772:	e240      	b.n	800ebf6 <_dtoa_r+0x946>
 800e774:	07f2      	lsls	r2, r6, #31
 800e776:	d505      	bpl.n	800e784 <_dtoa_r+0x4d4>
 800e778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e77c:	f7f1 ff3c 	bl	80005f8 <__aeabi_dmul>
 800e780:	3501      	adds	r5, #1
 800e782:	2301      	movs	r3, #1
 800e784:	1076      	asrs	r6, r6, #1
 800e786:	3708      	adds	r7, #8
 800e788:	e777      	b.n	800e67a <_dtoa_r+0x3ca>
 800e78a:	2502      	movs	r5, #2
 800e78c:	e779      	b.n	800e682 <_dtoa_r+0x3d2>
 800e78e:	9f00      	ldr	r7, [sp, #0]
 800e790:	9e03      	ldr	r6, [sp, #12]
 800e792:	e794      	b.n	800e6be <_dtoa_r+0x40e>
 800e794:	9901      	ldr	r1, [sp, #4]
 800e796:	4b4c      	ldr	r3, [pc, #304]	; (800e8c8 <_dtoa_r+0x618>)
 800e798:	4431      	add	r1, r6
 800e79a:	910d      	str	r1, [sp, #52]	; 0x34
 800e79c:	9908      	ldr	r1, [sp, #32]
 800e79e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e7a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e7a6:	2900      	cmp	r1, #0
 800e7a8:	d043      	beq.n	800e832 <_dtoa_r+0x582>
 800e7aa:	494d      	ldr	r1, [pc, #308]	; (800e8e0 <_dtoa_r+0x630>)
 800e7ac:	2000      	movs	r0, #0
 800e7ae:	f7f2 f84d 	bl	800084c <__aeabi_ddiv>
 800e7b2:	4652      	mov	r2, sl
 800e7b4:	465b      	mov	r3, fp
 800e7b6:	f7f1 fd67 	bl	8000288 <__aeabi_dsub>
 800e7ba:	9d01      	ldr	r5, [sp, #4]
 800e7bc:	4682      	mov	sl, r0
 800e7be:	468b      	mov	fp, r1
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	f7f2 f9c8 	bl	8000b58 <__aeabi_d2iz>
 800e7c8:	4606      	mov	r6, r0
 800e7ca:	f7f1 feab 	bl	8000524 <__aeabi_i2d>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	4649      	mov	r1, r9
 800e7d6:	f7f1 fd57 	bl	8000288 <__aeabi_dsub>
 800e7da:	3630      	adds	r6, #48	; 0x30
 800e7dc:	f805 6b01 	strb.w	r6, [r5], #1
 800e7e0:	4652      	mov	r2, sl
 800e7e2:	465b      	mov	r3, fp
 800e7e4:	4680      	mov	r8, r0
 800e7e6:	4689      	mov	r9, r1
 800e7e8:	f7f2 f978 	bl	8000adc <__aeabi_dcmplt>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d163      	bne.n	800e8b8 <_dtoa_r+0x608>
 800e7f0:	4642      	mov	r2, r8
 800e7f2:	464b      	mov	r3, r9
 800e7f4:	4936      	ldr	r1, [pc, #216]	; (800e8d0 <_dtoa_r+0x620>)
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	f7f1 fd46 	bl	8000288 <__aeabi_dsub>
 800e7fc:	4652      	mov	r2, sl
 800e7fe:	465b      	mov	r3, fp
 800e800:	f7f2 f96c 	bl	8000adc <__aeabi_dcmplt>
 800e804:	2800      	cmp	r0, #0
 800e806:	f040 80b5 	bne.w	800e974 <_dtoa_r+0x6c4>
 800e80a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e80c:	429d      	cmp	r5, r3
 800e80e:	d081      	beq.n	800e714 <_dtoa_r+0x464>
 800e810:	4b30      	ldr	r3, [pc, #192]	; (800e8d4 <_dtoa_r+0x624>)
 800e812:	2200      	movs	r2, #0
 800e814:	4650      	mov	r0, sl
 800e816:	4659      	mov	r1, fp
 800e818:	f7f1 feee 	bl	80005f8 <__aeabi_dmul>
 800e81c:	4b2d      	ldr	r3, [pc, #180]	; (800e8d4 <_dtoa_r+0x624>)
 800e81e:	4682      	mov	sl, r0
 800e820:	468b      	mov	fp, r1
 800e822:	4640      	mov	r0, r8
 800e824:	4649      	mov	r1, r9
 800e826:	2200      	movs	r2, #0
 800e828:	f7f1 fee6 	bl	80005f8 <__aeabi_dmul>
 800e82c:	4680      	mov	r8, r0
 800e82e:	4689      	mov	r9, r1
 800e830:	e7c6      	b.n	800e7c0 <_dtoa_r+0x510>
 800e832:	4650      	mov	r0, sl
 800e834:	4659      	mov	r1, fp
 800e836:	f7f1 fedf 	bl	80005f8 <__aeabi_dmul>
 800e83a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e83c:	9d01      	ldr	r5, [sp, #4]
 800e83e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e840:	4682      	mov	sl, r0
 800e842:	468b      	mov	fp, r1
 800e844:	4649      	mov	r1, r9
 800e846:	4640      	mov	r0, r8
 800e848:	f7f2 f986 	bl	8000b58 <__aeabi_d2iz>
 800e84c:	4606      	mov	r6, r0
 800e84e:	f7f1 fe69 	bl	8000524 <__aeabi_i2d>
 800e852:	3630      	adds	r6, #48	; 0x30
 800e854:	4602      	mov	r2, r0
 800e856:	460b      	mov	r3, r1
 800e858:	4640      	mov	r0, r8
 800e85a:	4649      	mov	r1, r9
 800e85c:	f7f1 fd14 	bl	8000288 <__aeabi_dsub>
 800e860:	f805 6b01 	strb.w	r6, [r5], #1
 800e864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e866:	429d      	cmp	r5, r3
 800e868:	4680      	mov	r8, r0
 800e86a:	4689      	mov	r9, r1
 800e86c:	f04f 0200 	mov.w	r2, #0
 800e870:	d124      	bne.n	800e8bc <_dtoa_r+0x60c>
 800e872:	4b1b      	ldr	r3, [pc, #108]	; (800e8e0 <_dtoa_r+0x630>)
 800e874:	4650      	mov	r0, sl
 800e876:	4659      	mov	r1, fp
 800e878:	f7f1 fd08 	bl	800028c <__adddf3>
 800e87c:	4602      	mov	r2, r0
 800e87e:	460b      	mov	r3, r1
 800e880:	4640      	mov	r0, r8
 800e882:	4649      	mov	r1, r9
 800e884:	f7f2 f948 	bl	8000b18 <__aeabi_dcmpgt>
 800e888:	2800      	cmp	r0, #0
 800e88a:	d173      	bne.n	800e974 <_dtoa_r+0x6c4>
 800e88c:	4652      	mov	r2, sl
 800e88e:	465b      	mov	r3, fp
 800e890:	4913      	ldr	r1, [pc, #76]	; (800e8e0 <_dtoa_r+0x630>)
 800e892:	2000      	movs	r0, #0
 800e894:	f7f1 fcf8 	bl	8000288 <__aeabi_dsub>
 800e898:	4602      	mov	r2, r0
 800e89a:	460b      	mov	r3, r1
 800e89c:	4640      	mov	r0, r8
 800e89e:	4649      	mov	r1, r9
 800e8a0:	f7f2 f91c 	bl	8000adc <__aeabi_dcmplt>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	f43f af35 	beq.w	800e714 <_dtoa_r+0x464>
 800e8aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e8ac:	1e6b      	subs	r3, r5, #1
 800e8ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8b4:	2b30      	cmp	r3, #48	; 0x30
 800e8b6:	d0f8      	beq.n	800e8aa <_dtoa_r+0x5fa>
 800e8b8:	9700      	str	r7, [sp, #0]
 800e8ba:	e049      	b.n	800e950 <_dtoa_r+0x6a0>
 800e8bc:	4b05      	ldr	r3, [pc, #20]	; (800e8d4 <_dtoa_r+0x624>)
 800e8be:	f7f1 fe9b 	bl	80005f8 <__aeabi_dmul>
 800e8c2:	4680      	mov	r8, r0
 800e8c4:	4689      	mov	r9, r1
 800e8c6:	e7bd      	b.n	800e844 <_dtoa_r+0x594>
 800e8c8:	08011768 	.word	0x08011768
 800e8cc:	08011740 	.word	0x08011740
 800e8d0:	3ff00000 	.word	0x3ff00000
 800e8d4:	40240000 	.word	0x40240000
 800e8d8:	401c0000 	.word	0x401c0000
 800e8dc:	40140000 	.word	0x40140000
 800e8e0:	3fe00000 	.word	0x3fe00000
 800e8e4:	9d01      	ldr	r5, [sp, #4]
 800e8e6:	4656      	mov	r6, sl
 800e8e8:	465f      	mov	r7, fp
 800e8ea:	4642      	mov	r2, r8
 800e8ec:	464b      	mov	r3, r9
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	f7f1 ffab 	bl	800084c <__aeabi_ddiv>
 800e8f6:	f7f2 f92f 	bl	8000b58 <__aeabi_d2iz>
 800e8fa:	4682      	mov	sl, r0
 800e8fc:	f7f1 fe12 	bl	8000524 <__aeabi_i2d>
 800e900:	4642      	mov	r2, r8
 800e902:	464b      	mov	r3, r9
 800e904:	f7f1 fe78 	bl	80005f8 <__aeabi_dmul>
 800e908:	4602      	mov	r2, r0
 800e90a:	460b      	mov	r3, r1
 800e90c:	4630      	mov	r0, r6
 800e90e:	4639      	mov	r1, r7
 800e910:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e914:	f7f1 fcb8 	bl	8000288 <__aeabi_dsub>
 800e918:	f805 6b01 	strb.w	r6, [r5], #1
 800e91c:	9e01      	ldr	r6, [sp, #4]
 800e91e:	9f03      	ldr	r7, [sp, #12]
 800e920:	1bae      	subs	r6, r5, r6
 800e922:	42b7      	cmp	r7, r6
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	d135      	bne.n	800e996 <_dtoa_r+0x6e6>
 800e92a:	f7f1 fcaf 	bl	800028c <__adddf3>
 800e92e:	4642      	mov	r2, r8
 800e930:	464b      	mov	r3, r9
 800e932:	4606      	mov	r6, r0
 800e934:	460f      	mov	r7, r1
 800e936:	f7f2 f8ef 	bl	8000b18 <__aeabi_dcmpgt>
 800e93a:	b9d0      	cbnz	r0, 800e972 <_dtoa_r+0x6c2>
 800e93c:	4642      	mov	r2, r8
 800e93e:	464b      	mov	r3, r9
 800e940:	4630      	mov	r0, r6
 800e942:	4639      	mov	r1, r7
 800e944:	f7f2 f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e948:	b110      	cbz	r0, 800e950 <_dtoa_r+0x6a0>
 800e94a:	f01a 0f01 	tst.w	sl, #1
 800e94e:	d110      	bne.n	800e972 <_dtoa_r+0x6c2>
 800e950:	4620      	mov	r0, r4
 800e952:	ee18 1a10 	vmov	r1, s16
 800e956:	f000 fe79 	bl	800f64c <_Bfree>
 800e95a:	2300      	movs	r3, #0
 800e95c:	9800      	ldr	r0, [sp, #0]
 800e95e:	702b      	strb	r3, [r5, #0]
 800e960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e962:	3001      	adds	r0, #1
 800e964:	6018      	str	r0, [r3, #0]
 800e966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e968:	2b00      	cmp	r3, #0
 800e96a:	f43f acf1 	beq.w	800e350 <_dtoa_r+0xa0>
 800e96e:	601d      	str	r5, [r3, #0]
 800e970:	e4ee      	b.n	800e350 <_dtoa_r+0xa0>
 800e972:	9f00      	ldr	r7, [sp, #0]
 800e974:	462b      	mov	r3, r5
 800e976:	461d      	mov	r5, r3
 800e978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e97c:	2a39      	cmp	r2, #57	; 0x39
 800e97e:	d106      	bne.n	800e98e <_dtoa_r+0x6de>
 800e980:	9a01      	ldr	r2, [sp, #4]
 800e982:	429a      	cmp	r2, r3
 800e984:	d1f7      	bne.n	800e976 <_dtoa_r+0x6c6>
 800e986:	9901      	ldr	r1, [sp, #4]
 800e988:	2230      	movs	r2, #48	; 0x30
 800e98a:	3701      	adds	r7, #1
 800e98c:	700a      	strb	r2, [r1, #0]
 800e98e:	781a      	ldrb	r2, [r3, #0]
 800e990:	3201      	adds	r2, #1
 800e992:	701a      	strb	r2, [r3, #0]
 800e994:	e790      	b.n	800e8b8 <_dtoa_r+0x608>
 800e996:	4ba6      	ldr	r3, [pc, #664]	; (800ec30 <_dtoa_r+0x980>)
 800e998:	2200      	movs	r2, #0
 800e99a:	f7f1 fe2d 	bl	80005f8 <__aeabi_dmul>
 800e99e:	2200      	movs	r2, #0
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	4606      	mov	r6, r0
 800e9a4:	460f      	mov	r7, r1
 800e9a6:	f7f2 f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d09d      	beq.n	800e8ea <_dtoa_r+0x63a>
 800e9ae:	e7cf      	b.n	800e950 <_dtoa_r+0x6a0>
 800e9b0:	9a08      	ldr	r2, [sp, #32]
 800e9b2:	2a00      	cmp	r2, #0
 800e9b4:	f000 80d7 	beq.w	800eb66 <_dtoa_r+0x8b6>
 800e9b8:	9a06      	ldr	r2, [sp, #24]
 800e9ba:	2a01      	cmp	r2, #1
 800e9bc:	f300 80ba 	bgt.w	800eb34 <_dtoa_r+0x884>
 800e9c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9c2:	2a00      	cmp	r2, #0
 800e9c4:	f000 80b2 	beq.w	800eb2c <_dtoa_r+0x87c>
 800e9c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e9cc:	9e07      	ldr	r6, [sp, #28]
 800e9ce:	9d04      	ldr	r5, [sp, #16]
 800e9d0:	9a04      	ldr	r2, [sp, #16]
 800e9d2:	441a      	add	r2, r3
 800e9d4:	9204      	str	r2, [sp, #16]
 800e9d6:	9a05      	ldr	r2, [sp, #20]
 800e9d8:	2101      	movs	r1, #1
 800e9da:	441a      	add	r2, r3
 800e9dc:	4620      	mov	r0, r4
 800e9de:	9205      	str	r2, [sp, #20]
 800e9e0:	f000 ff36 	bl	800f850 <__i2b>
 800e9e4:	4607      	mov	r7, r0
 800e9e6:	2d00      	cmp	r5, #0
 800e9e8:	dd0c      	ble.n	800ea04 <_dtoa_r+0x754>
 800e9ea:	9b05      	ldr	r3, [sp, #20]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	dd09      	ble.n	800ea04 <_dtoa_r+0x754>
 800e9f0:	42ab      	cmp	r3, r5
 800e9f2:	9a04      	ldr	r2, [sp, #16]
 800e9f4:	bfa8      	it	ge
 800e9f6:	462b      	movge	r3, r5
 800e9f8:	1ad2      	subs	r2, r2, r3
 800e9fa:	9204      	str	r2, [sp, #16]
 800e9fc:	9a05      	ldr	r2, [sp, #20]
 800e9fe:	1aed      	subs	r5, r5, r3
 800ea00:	1ad3      	subs	r3, r2, r3
 800ea02:	9305      	str	r3, [sp, #20]
 800ea04:	9b07      	ldr	r3, [sp, #28]
 800ea06:	b31b      	cbz	r3, 800ea50 <_dtoa_r+0x7a0>
 800ea08:	9b08      	ldr	r3, [sp, #32]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f000 80af 	beq.w	800eb6e <_dtoa_r+0x8be>
 800ea10:	2e00      	cmp	r6, #0
 800ea12:	dd13      	ble.n	800ea3c <_dtoa_r+0x78c>
 800ea14:	4639      	mov	r1, r7
 800ea16:	4632      	mov	r2, r6
 800ea18:	4620      	mov	r0, r4
 800ea1a:	f000 ffd9 	bl	800f9d0 <__pow5mult>
 800ea1e:	ee18 2a10 	vmov	r2, s16
 800ea22:	4601      	mov	r1, r0
 800ea24:	4607      	mov	r7, r0
 800ea26:	4620      	mov	r0, r4
 800ea28:	f000 ff28 	bl	800f87c <__multiply>
 800ea2c:	ee18 1a10 	vmov	r1, s16
 800ea30:	4680      	mov	r8, r0
 800ea32:	4620      	mov	r0, r4
 800ea34:	f000 fe0a 	bl	800f64c <_Bfree>
 800ea38:	ee08 8a10 	vmov	s16, r8
 800ea3c:	9b07      	ldr	r3, [sp, #28]
 800ea3e:	1b9a      	subs	r2, r3, r6
 800ea40:	d006      	beq.n	800ea50 <_dtoa_r+0x7a0>
 800ea42:	ee18 1a10 	vmov	r1, s16
 800ea46:	4620      	mov	r0, r4
 800ea48:	f000 ffc2 	bl	800f9d0 <__pow5mult>
 800ea4c:	ee08 0a10 	vmov	s16, r0
 800ea50:	2101      	movs	r1, #1
 800ea52:	4620      	mov	r0, r4
 800ea54:	f000 fefc 	bl	800f850 <__i2b>
 800ea58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	4606      	mov	r6, r0
 800ea5e:	f340 8088 	ble.w	800eb72 <_dtoa_r+0x8c2>
 800ea62:	461a      	mov	r2, r3
 800ea64:	4601      	mov	r1, r0
 800ea66:	4620      	mov	r0, r4
 800ea68:	f000 ffb2 	bl	800f9d0 <__pow5mult>
 800ea6c:	9b06      	ldr	r3, [sp, #24]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	4606      	mov	r6, r0
 800ea72:	f340 8081 	ble.w	800eb78 <_dtoa_r+0x8c8>
 800ea76:	f04f 0800 	mov.w	r8, #0
 800ea7a:	6933      	ldr	r3, [r6, #16]
 800ea7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ea80:	6918      	ldr	r0, [r3, #16]
 800ea82:	f000 fe95 	bl	800f7b0 <__hi0bits>
 800ea86:	f1c0 0020 	rsb	r0, r0, #32
 800ea8a:	9b05      	ldr	r3, [sp, #20]
 800ea8c:	4418      	add	r0, r3
 800ea8e:	f010 001f 	ands.w	r0, r0, #31
 800ea92:	f000 8092 	beq.w	800ebba <_dtoa_r+0x90a>
 800ea96:	f1c0 0320 	rsb	r3, r0, #32
 800ea9a:	2b04      	cmp	r3, #4
 800ea9c:	f340 808a 	ble.w	800ebb4 <_dtoa_r+0x904>
 800eaa0:	f1c0 001c 	rsb	r0, r0, #28
 800eaa4:	9b04      	ldr	r3, [sp, #16]
 800eaa6:	4403      	add	r3, r0
 800eaa8:	9304      	str	r3, [sp, #16]
 800eaaa:	9b05      	ldr	r3, [sp, #20]
 800eaac:	4403      	add	r3, r0
 800eaae:	4405      	add	r5, r0
 800eab0:	9305      	str	r3, [sp, #20]
 800eab2:	9b04      	ldr	r3, [sp, #16]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	dd07      	ble.n	800eac8 <_dtoa_r+0x818>
 800eab8:	ee18 1a10 	vmov	r1, s16
 800eabc:	461a      	mov	r2, r3
 800eabe:	4620      	mov	r0, r4
 800eac0:	f000 ffe0 	bl	800fa84 <__lshift>
 800eac4:	ee08 0a10 	vmov	s16, r0
 800eac8:	9b05      	ldr	r3, [sp, #20]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	dd05      	ble.n	800eada <_dtoa_r+0x82a>
 800eace:	4631      	mov	r1, r6
 800ead0:	461a      	mov	r2, r3
 800ead2:	4620      	mov	r0, r4
 800ead4:	f000 ffd6 	bl	800fa84 <__lshift>
 800ead8:	4606      	mov	r6, r0
 800eada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d06e      	beq.n	800ebbe <_dtoa_r+0x90e>
 800eae0:	ee18 0a10 	vmov	r0, s16
 800eae4:	4631      	mov	r1, r6
 800eae6:	f001 f83d 	bl	800fb64 <__mcmp>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	da67      	bge.n	800ebbe <_dtoa_r+0x90e>
 800eaee:	9b00      	ldr	r3, [sp, #0]
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	ee18 1a10 	vmov	r1, s16
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	220a      	movs	r2, #10
 800eafa:	2300      	movs	r3, #0
 800eafc:	4620      	mov	r0, r4
 800eafe:	f000 fdc7 	bl	800f690 <__multadd>
 800eb02:	9b08      	ldr	r3, [sp, #32]
 800eb04:	ee08 0a10 	vmov	s16, r0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f000 81b1 	beq.w	800ee70 <_dtoa_r+0xbc0>
 800eb0e:	2300      	movs	r3, #0
 800eb10:	4639      	mov	r1, r7
 800eb12:	220a      	movs	r2, #10
 800eb14:	4620      	mov	r0, r4
 800eb16:	f000 fdbb 	bl	800f690 <__multadd>
 800eb1a:	9b02      	ldr	r3, [sp, #8]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	4607      	mov	r7, r0
 800eb20:	f300 808e 	bgt.w	800ec40 <_dtoa_r+0x990>
 800eb24:	9b06      	ldr	r3, [sp, #24]
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	dc51      	bgt.n	800ebce <_dtoa_r+0x91e>
 800eb2a:	e089      	b.n	800ec40 <_dtoa_r+0x990>
 800eb2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eb32:	e74b      	b.n	800e9cc <_dtoa_r+0x71c>
 800eb34:	9b03      	ldr	r3, [sp, #12]
 800eb36:	1e5e      	subs	r6, r3, #1
 800eb38:	9b07      	ldr	r3, [sp, #28]
 800eb3a:	42b3      	cmp	r3, r6
 800eb3c:	bfbf      	itttt	lt
 800eb3e:	9b07      	ldrlt	r3, [sp, #28]
 800eb40:	9607      	strlt	r6, [sp, #28]
 800eb42:	1af2      	sublt	r2, r6, r3
 800eb44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800eb46:	bfb6      	itet	lt
 800eb48:	189b      	addlt	r3, r3, r2
 800eb4a:	1b9e      	subge	r6, r3, r6
 800eb4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800eb4e:	9b03      	ldr	r3, [sp, #12]
 800eb50:	bfb8      	it	lt
 800eb52:	2600      	movlt	r6, #0
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	bfb7      	itett	lt
 800eb58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800eb5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800eb60:	1a9d      	sublt	r5, r3, r2
 800eb62:	2300      	movlt	r3, #0
 800eb64:	e734      	b.n	800e9d0 <_dtoa_r+0x720>
 800eb66:	9e07      	ldr	r6, [sp, #28]
 800eb68:	9d04      	ldr	r5, [sp, #16]
 800eb6a:	9f08      	ldr	r7, [sp, #32]
 800eb6c:	e73b      	b.n	800e9e6 <_dtoa_r+0x736>
 800eb6e:	9a07      	ldr	r2, [sp, #28]
 800eb70:	e767      	b.n	800ea42 <_dtoa_r+0x792>
 800eb72:	9b06      	ldr	r3, [sp, #24]
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	dc18      	bgt.n	800ebaa <_dtoa_r+0x8fa>
 800eb78:	f1ba 0f00 	cmp.w	sl, #0
 800eb7c:	d115      	bne.n	800ebaa <_dtoa_r+0x8fa>
 800eb7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb82:	b993      	cbnz	r3, 800ebaa <_dtoa_r+0x8fa>
 800eb84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eb88:	0d1b      	lsrs	r3, r3, #20
 800eb8a:	051b      	lsls	r3, r3, #20
 800eb8c:	b183      	cbz	r3, 800ebb0 <_dtoa_r+0x900>
 800eb8e:	9b04      	ldr	r3, [sp, #16]
 800eb90:	3301      	adds	r3, #1
 800eb92:	9304      	str	r3, [sp, #16]
 800eb94:	9b05      	ldr	r3, [sp, #20]
 800eb96:	3301      	adds	r3, #1
 800eb98:	9305      	str	r3, [sp, #20]
 800eb9a:	f04f 0801 	mov.w	r8, #1
 800eb9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f47f af6a 	bne.w	800ea7a <_dtoa_r+0x7ca>
 800eba6:	2001      	movs	r0, #1
 800eba8:	e76f      	b.n	800ea8a <_dtoa_r+0x7da>
 800ebaa:	f04f 0800 	mov.w	r8, #0
 800ebae:	e7f6      	b.n	800eb9e <_dtoa_r+0x8ee>
 800ebb0:	4698      	mov	r8, r3
 800ebb2:	e7f4      	b.n	800eb9e <_dtoa_r+0x8ee>
 800ebb4:	f43f af7d 	beq.w	800eab2 <_dtoa_r+0x802>
 800ebb8:	4618      	mov	r0, r3
 800ebba:	301c      	adds	r0, #28
 800ebbc:	e772      	b.n	800eaa4 <_dtoa_r+0x7f4>
 800ebbe:	9b03      	ldr	r3, [sp, #12]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	dc37      	bgt.n	800ec34 <_dtoa_r+0x984>
 800ebc4:	9b06      	ldr	r3, [sp, #24]
 800ebc6:	2b02      	cmp	r3, #2
 800ebc8:	dd34      	ble.n	800ec34 <_dtoa_r+0x984>
 800ebca:	9b03      	ldr	r3, [sp, #12]
 800ebcc:	9302      	str	r3, [sp, #8]
 800ebce:	9b02      	ldr	r3, [sp, #8]
 800ebd0:	b96b      	cbnz	r3, 800ebee <_dtoa_r+0x93e>
 800ebd2:	4631      	mov	r1, r6
 800ebd4:	2205      	movs	r2, #5
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f000 fd5a 	bl	800f690 <__multadd>
 800ebdc:	4601      	mov	r1, r0
 800ebde:	4606      	mov	r6, r0
 800ebe0:	ee18 0a10 	vmov	r0, s16
 800ebe4:	f000 ffbe 	bl	800fb64 <__mcmp>
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	f73f adbb 	bgt.w	800e764 <_dtoa_r+0x4b4>
 800ebee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf0:	9d01      	ldr	r5, [sp, #4]
 800ebf2:	43db      	mvns	r3, r3
 800ebf4:	9300      	str	r3, [sp, #0]
 800ebf6:	f04f 0800 	mov.w	r8, #0
 800ebfa:	4631      	mov	r1, r6
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f000 fd25 	bl	800f64c <_Bfree>
 800ec02:	2f00      	cmp	r7, #0
 800ec04:	f43f aea4 	beq.w	800e950 <_dtoa_r+0x6a0>
 800ec08:	f1b8 0f00 	cmp.w	r8, #0
 800ec0c:	d005      	beq.n	800ec1a <_dtoa_r+0x96a>
 800ec0e:	45b8      	cmp	r8, r7
 800ec10:	d003      	beq.n	800ec1a <_dtoa_r+0x96a>
 800ec12:	4641      	mov	r1, r8
 800ec14:	4620      	mov	r0, r4
 800ec16:	f000 fd19 	bl	800f64c <_Bfree>
 800ec1a:	4639      	mov	r1, r7
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f000 fd15 	bl	800f64c <_Bfree>
 800ec22:	e695      	b.n	800e950 <_dtoa_r+0x6a0>
 800ec24:	2600      	movs	r6, #0
 800ec26:	4637      	mov	r7, r6
 800ec28:	e7e1      	b.n	800ebee <_dtoa_r+0x93e>
 800ec2a:	9700      	str	r7, [sp, #0]
 800ec2c:	4637      	mov	r7, r6
 800ec2e:	e599      	b.n	800e764 <_dtoa_r+0x4b4>
 800ec30:	40240000 	.word	0x40240000
 800ec34:	9b08      	ldr	r3, [sp, #32]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	f000 80ca 	beq.w	800edd0 <_dtoa_r+0xb20>
 800ec3c:	9b03      	ldr	r3, [sp, #12]
 800ec3e:	9302      	str	r3, [sp, #8]
 800ec40:	2d00      	cmp	r5, #0
 800ec42:	dd05      	ble.n	800ec50 <_dtoa_r+0x9a0>
 800ec44:	4639      	mov	r1, r7
 800ec46:	462a      	mov	r2, r5
 800ec48:	4620      	mov	r0, r4
 800ec4a:	f000 ff1b 	bl	800fa84 <__lshift>
 800ec4e:	4607      	mov	r7, r0
 800ec50:	f1b8 0f00 	cmp.w	r8, #0
 800ec54:	d05b      	beq.n	800ed0e <_dtoa_r+0xa5e>
 800ec56:	6879      	ldr	r1, [r7, #4]
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 fcb7 	bl	800f5cc <_Balloc>
 800ec5e:	4605      	mov	r5, r0
 800ec60:	b928      	cbnz	r0, 800ec6e <_dtoa_r+0x9be>
 800ec62:	4b87      	ldr	r3, [pc, #540]	; (800ee80 <_dtoa_r+0xbd0>)
 800ec64:	4602      	mov	r2, r0
 800ec66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ec6a:	f7ff bb3b 	b.w	800e2e4 <_dtoa_r+0x34>
 800ec6e:	693a      	ldr	r2, [r7, #16]
 800ec70:	3202      	adds	r2, #2
 800ec72:	0092      	lsls	r2, r2, #2
 800ec74:	f107 010c 	add.w	r1, r7, #12
 800ec78:	300c      	adds	r0, #12
 800ec7a:	f7fd ff33 	bl	800cae4 <memcpy>
 800ec7e:	2201      	movs	r2, #1
 800ec80:	4629      	mov	r1, r5
 800ec82:	4620      	mov	r0, r4
 800ec84:	f000 fefe 	bl	800fa84 <__lshift>
 800ec88:	9b01      	ldr	r3, [sp, #4]
 800ec8a:	f103 0901 	add.w	r9, r3, #1
 800ec8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ec92:	4413      	add	r3, r2
 800ec94:	9305      	str	r3, [sp, #20]
 800ec96:	f00a 0301 	and.w	r3, sl, #1
 800ec9a:	46b8      	mov	r8, r7
 800ec9c:	9304      	str	r3, [sp, #16]
 800ec9e:	4607      	mov	r7, r0
 800eca0:	4631      	mov	r1, r6
 800eca2:	ee18 0a10 	vmov	r0, s16
 800eca6:	f7ff fa77 	bl	800e198 <quorem>
 800ecaa:	4641      	mov	r1, r8
 800ecac:	9002      	str	r0, [sp, #8]
 800ecae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ecb2:	ee18 0a10 	vmov	r0, s16
 800ecb6:	f000 ff55 	bl	800fb64 <__mcmp>
 800ecba:	463a      	mov	r2, r7
 800ecbc:	9003      	str	r0, [sp, #12]
 800ecbe:	4631      	mov	r1, r6
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	f000 ff6b 	bl	800fb9c <__mdiff>
 800ecc6:	68c2      	ldr	r2, [r0, #12]
 800ecc8:	f109 3bff 	add.w	fp, r9, #4294967295
 800eccc:	4605      	mov	r5, r0
 800ecce:	bb02      	cbnz	r2, 800ed12 <_dtoa_r+0xa62>
 800ecd0:	4601      	mov	r1, r0
 800ecd2:	ee18 0a10 	vmov	r0, s16
 800ecd6:	f000 ff45 	bl	800fb64 <__mcmp>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	4629      	mov	r1, r5
 800ecde:	4620      	mov	r0, r4
 800ece0:	9207      	str	r2, [sp, #28]
 800ece2:	f000 fcb3 	bl	800f64c <_Bfree>
 800ece6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ecea:	ea43 0102 	orr.w	r1, r3, r2
 800ecee:	9b04      	ldr	r3, [sp, #16]
 800ecf0:	430b      	orrs	r3, r1
 800ecf2:	464d      	mov	r5, r9
 800ecf4:	d10f      	bne.n	800ed16 <_dtoa_r+0xa66>
 800ecf6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ecfa:	d02a      	beq.n	800ed52 <_dtoa_r+0xaa2>
 800ecfc:	9b03      	ldr	r3, [sp, #12]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	dd02      	ble.n	800ed08 <_dtoa_r+0xa58>
 800ed02:	9b02      	ldr	r3, [sp, #8]
 800ed04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ed08:	f88b a000 	strb.w	sl, [fp]
 800ed0c:	e775      	b.n	800ebfa <_dtoa_r+0x94a>
 800ed0e:	4638      	mov	r0, r7
 800ed10:	e7ba      	b.n	800ec88 <_dtoa_r+0x9d8>
 800ed12:	2201      	movs	r2, #1
 800ed14:	e7e2      	b.n	800ecdc <_dtoa_r+0xa2c>
 800ed16:	9b03      	ldr	r3, [sp, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	db04      	blt.n	800ed26 <_dtoa_r+0xa76>
 800ed1c:	9906      	ldr	r1, [sp, #24]
 800ed1e:	430b      	orrs	r3, r1
 800ed20:	9904      	ldr	r1, [sp, #16]
 800ed22:	430b      	orrs	r3, r1
 800ed24:	d122      	bne.n	800ed6c <_dtoa_r+0xabc>
 800ed26:	2a00      	cmp	r2, #0
 800ed28:	ddee      	ble.n	800ed08 <_dtoa_r+0xa58>
 800ed2a:	ee18 1a10 	vmov	r1, s16
 800ed2e:	2201      	movs	r2, #1
 800ed30:	4620      	mov	r0, r4
 800ed32:	f000 fea7 	bl	800fa84 <__lshift>
 800ed36:	4631      	mov	r1, r6
 800ed38:	ee08 0a10 	vmov	s16, r0
 800ed3c:	f000 ff12 	bl	800fb64 <__mcmp>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	dc03      	bgt.n	800ed4c <_dtoa_r+0xa9c>
 800ed44:	d1e0      	bne.n	800ed08 <_dtoa_r+0xa58>
 800ed46:	f01a 0f01 	tst.w	sl, #1
 800ed4a:	d0dd      	beq.n	800ed08 <_dtoa_r+0xa58>
 800ed4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed50:	d1d7      	bne.n	800ed02 <_dtoa_r+0xa52>
 800ed52:	2339      	movs	r3, #57	; 0x39
 800ed54:	f88b 3000 	strb.w	r3, [fp]
 800ed58:	462b      	mov	r3, r5
 800ed5a:	461d      	mov	r5, r3
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ed62:	2a39      	cmp	r2, #57	; 0x39
 800ed64:	d071      	beq.n	800ee4a <_dtoa_r+0xb9a>
 800ed66:	3201      	adds	r2, #1
 800ed68:	701a      	strb	r2, [r3, #0]
 800ed6a:	e746      	b.n	800ebfa <_dtoa_r+0x94a>
 800ed6c:	2a00      	cmp	r2, #0
 800ed6e:	dd07      	ble.n	800ed80 <_dtoa_r+0xad0>
 800ed70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed74:	d0ed      	beq.n	800ed52 <_dtoa_r+0xaa2>
 800ed76:	f10a 0301 	add.w	r3, sl, #1
 800ed7a:	f88b 3000 	strb.w	r3, [fp]
 800ed7e:	e73c      	b.n	800ebfa <_dtoa_r+0x94a>
 800ed80:	9b05      	ldr	r3, [sp, #20]
 800ed82:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ed86:	4599      	cmp	r9, r3
 800ed88:	d047      	beq.n	800ee1a <_dtoa_r+0xb6a>
 800ed8a:	ee18 1a10 	vmov	r1, s16
 800ed8e:	2300      	movs	r3, #0
 800ed90:	220a      	movs	r2, #10
 800ed92:	4620      	mov	r0, r4
 800ed94:	f000 fc7c 	bl	800f690 <__multadd>
 800ed98:	45b8      	cmp	r8, r7
 800ed9a:	ee08 0a10 	vmov	s16, r0
 800ed9e:	f04f 0300 	mov.w	r3, #0
 800eda2:	f04f 020a 	mov.w	r2, #10
 800eda6:	4641      	mov	r1, r8
 800eda8:	4620      	mov	r0, r4
 800edaa:	d106      	bne.n	800edba <_dtoa_r+0xb0a>
 800edac:	f000 fc70 	bl	800f690 <__multadd>
 800edb0:	4680      	mov	r8, r0
 800edb2:	4607      	mov	r7, r0
 800edb4:	f109 0901 	add.w	r9, r9, #1
 800edb8:	e772      	b.n	800eca0 <_dtoa_r+0x9f0>
 800edba:	f000 fc69 	bl	800f690 <__multadd>
 800edbe:	4639      	mov	r1, r7
 800edc0:	4680      	mov	r8, r0
 800edc2:	2300      	movs	r3, #0
 800edc4:	220a      	movs	r2, #10
 800edc6:	4620      	mov	r0, r4
 800edc8:	f000 fc62 	bl	800f690 <__multadd>
 800edcc:	4607      	mov	r7, r0
 800edce:	e7f1      	b.n	800edb4 <_dtoa_r+0xb04>
 800edd0:	9b03      	ldr	r3, [sp, #12]
 800edd2:	9302      	str	r3, [sp, #8]
 800edd4:	9d01      	ldr	r5, [sp, #4]
 800edd6:	ee18 0a10 	vmov	r0, s16
 800edda:	4631      	mov	r1, r6
 800eddc:	f7ff f9dc 	bl	800e198 <quorem>
 800ede0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ede4:	9b01      	ldr	r3, [sp, #4]
 800ede6:	f805 ab01 	strb.w	sl, [r5], #1
 800edea:	1aea      	subs	r2, r5, r3
 800edec:	9b02      	ldr	r3, [sp, #8]
 800edee:	4293      	cmp	r3, r2
 800edf0:	dd09      	ble.n	800ee06 <_dtoa_r+0xb56>
 800edf2:	ee18 1a10 	vmov	r1, s16
 800edf6:	2300      	movs	r3, #0
 800edf8:	220a      	movs	r2, #10
 800edfa:	4620      	mov	r0, r4
 800edfc:	f000 fc48 	bl	800f690 <__multadd>
 800ee00:	ee08 0a10 	vmov	s16, r0
 800ee04:	e7e7      	b.n	800edd6 <_dtoa_r+0xb26>
 800ee06:	9b02      	ldr	r3, [sp, #8]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	bfc8      	it	gt
 800ee0c:	461d      	movgt	r5, r3
 800ee0e:	9b01      	ldr	r3, [sp, #4]
 800ee10:	bfd8      	it	le
 800ee12:	2501      	movle	r5, #1
 800ee14:	441d      	add	r5, r3
 800ee16:	f04f 0800 	mov.w	r8, #0
 800ee1a:	ee18 1a10 	vmov	r1, s16
 800ee1e:	2201      	movs	r2, #1
 800ee20:	4620      	mov	r0, r4
 800ee22:	f000 fe2f 	bl	800fa84 <__lshift>
 800ee26:	4631      	mov	r1, r6
 800ee28:	ee08 0a10 	vmov	s16, r0
 800ee2c:	f000 fe9a 	bl	800fb64 <__mcmp>
 800ee30:	2800      	cmp	r0, #0
 800ee32:	dc91      	bgt.n	800ed58 <_dtoa_r+0xaa8>
 800ee34:	d102      	bne.n	800ee3c <_dtoa_r+0xb8c>
 800ee36:	f01a 0f01 	tst.w	sl, #1
 800ee3a:	d18d      	bne.n	800ed58 <_dtoa_r+0xaa8>
 800ee3c:	462b      	mov	r3, r5
 800ee3e:	461d      	mov	r5, r3
 800ee40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee44:	2a30      	cmp	r2, #48	; 0x30
 800ee46:	d0fa      	beq.n	800ee3e <_dtoa_r+0xb8e>
 800ee48:	e6d7      	b.n	800ebfa <_dtoa_r+0x94a>
 800ee4a:	9a01      	ldr	r2, [sp, #4]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d184      	bne.n	800ed5a <_dtoa_r+0xaaa>
 800ee50:	9b00      	ldr	r3, [sp, #0]
 800ee52:	3301      	adds	r3, #1
 800ee54:	9300      	str	r3, [sp, #0]
 800ee56:	2331      	movs	r3, #49	; 0x31
 800ee58:	7013      	strb	r3, [r2, #0]
 800ee5a:	e6ce      	b.n	800ebfa <_dtoa_r+0x94a>
 800ee5c:	4b09      	ldr	r3, [pc, #36]	; (800ee84 <_dtoa_r+0xbd4>)
 800ee5e:	f7ff ba95 	b.w	800e38c <_dtoa_r+0xdc>
 800ee62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f47f aa6e 	bne.w	800e346 <_dtoa_r+0x96>
 800ee6a:	4b07      	ldr	r3, [pc, #28]	; (800ee88 <_dtoa_r+0xbd8>)
 800ee6c:	f7ff ba8e 	b.w	800e38c <_dtoa_r+0xdc>
 800ee70:	9b02      	ldr	r3, [sp, #8]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	dcae      	bgt.n	800edd4 <_dtoa_r+0xb24>
 800ee76:	9b06      	ldr	r3, [sp, #24]
 800ee78:	2b02      	cmp	r3, #2
 800ee7a:	f73f aea8 	bgt.w	800ebce <_dtoa_r+0x91e>
 800ee7e:	e7a9      	b.n	800edd4 <_dtoa_r+0xb24>
 800ee80:	08011658 	.word	0x08011658
 800ee84:	080114cc 	.word	0x080114cc
 800ee88:	080115f0 	.word	0x080115f0

0800ee8c <fiprintf>:
 800ee8c:	b40e      	push	{r1, r2, r3}
 800ee8e:	b503      	push	{r0, r1, lr}
 800ee90:	4601      	mov	r1, r0
 800ee92:	ab03      	add	r3, sp, #12
 800ee94:	4805      	ldr	r0, [pc, #20]	; (800eeac <fiprintf+0x20>)
 800ee96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee9a:	6800      	ldr	r0, [r0, #0]
 800ee9c:	9301      	str	r3, [sp, #4]
 800ee9e:	f001 fad3 	bl	8010448 <_vfiprintf_r>
 800eea2:	b002      	add	sp, #8
 800eea4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eea8:	b003      	add	sp, #12
 800eeaa:	4770      	bx	lr
 800eeac:	2000000c 	.word	0x2000000c

0800eeb0 <rshift>:
 800eeb0:	6903      	ldr	r3, [r0, #16]
 800eeb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eeb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eeba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eebe:	f100 0414 	add.w	r4, r0, #20
 800eec2:	dd45      	ble.n	800ef50 <rshift+0xa0>
 800eec4:	f011 011f 	ands.w	r1, r1, #31
 800eec8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eecc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eed0:	d10c      	bne.n	800eeec <rshift+0x3c>
 800eed2:	f100 0710 	add.w	r7, r0, #16
 800eed6:	4629      	mov	r1, r5
 800eed8:	42b1      	cmp	r1, r6
 800eeda:	d334      	bcc.n	800ef46 <rshift+0x96>
 800eedc:	1a9b      	subs	r3, r3, r2
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	1eea      	subs	r2, r5, #3
 800eee2:	4296      	cmp	r6, r2
 800eee4:	bf38      	it	cc
 800eee6:	2300      	movcc	r3, #0
 800eee8:	4423      	add	r3, r4
 800eeea:	e015      	b.n	800ef18 <rshift+0x68>
 800eeec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eef0:	f1c1 0820 	rsb	r8, r1, #32
 800eef4:	40cf      	lsrs	r7, r1
 800eef6:	f105 0e04 	add.w	lr, r5, #4
 800eefa:	46a1      	mov	r9, r4
 800eefc:	4576      	cmp	r6, lr
 800eefe:	46f4      	mov	ip, lr
 800ef00:	d815      	bhi.n	800ef2e <rshift+0x7e>
 800ef02:	1a9a      	subs	r2, r3, r2
 800ef04:	0092      	lsls	r2, r2, #2
 800ef06:	3a04      	subs	r2, #4
 800ef08:	3501      	adds	r5, #1
 800ef0a:	42ae      	cmp	r6, r5
 800ef0c:	bf38      	it	cc
 800ef0e:	2200      	movcc	r2, #0
 800ef10:	18a3      	adds	r3, r4, r2
 800ef12:	50a7      	str	r7, [r4, r2]
 800ef14:	b107      	cbz	r7, 800ef18 <rshift+0x68>
 800ef16:	3304      	adds	r3, #4
 800ef18:	1b1a      	subs	r2, r3, r4
 800ef1a:	42a3      	cmp	r3, r4
 800ef1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ef20:	bf08      	it	eq
 800ef22:	2300      	moveq	r3, #0
 800ef24:	6102      	str	r2, [r0, #16]
 800ef26:	bf08      	it	eq
 800ef28:	6143      	streq	r3, [r0, #20]
 800ef2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef2e:	f8dc c000 	ldr.w	ip, [ip]
 800ef32:	fa0c fc08 	lsl.w	ip, ip, r8
 800ef36:	ea4c 0707 	orr.w	r7, ip, r7
 800ef3a:	f849 7b04 	str.w	r7, [r9], #4
 800ef3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef42:	40cf      	lsrs	r7, r1
 800ef44:	e7da      	b.n	800eefc <rshift+0x4c>
 800ef46:	f851 cb04 	ldr.w	ip, [r1], #4
 800ef4a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ef4e:	e7c3      	b.n	800eed8 <rshift+0x28>
 800ef50:	4623      	mov	r3, r4
 800ef52:	e7e1      	b.n	800ef18 <rshift+0x68>

0800ef54 <__hexdig_fun>:
 800ef54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ef58:	2b09      	cmp	r3, #9
 800ef5a:	d802      	bhi.n	800ef62 <__hexdig_fun+0xe>
 800ef5c:	3820      	subs	r0, #32
 800ef5e:	b2c0      	uxtb	r0, r0
 800ef60:	4770      	bx	lr
 800ef62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ef66:	2b05      	cmp	r3, #5
 800ef68:	d801      	bhi.n	800ef6e <__hexdig_fun+0x1a>
 800ef6a:	3847      	subs	r0, #71	; 0x47
 800ef6c:	e7f7      	b.n	800ef5e <__hexdig_fun+0xa>
 800ef6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ef72:	2b05      	cmp	r3, #5
 800ef74:	d801      	bhi.n	800ef7a <__hexdig_fun+0x26>
 800ef76:	3827      	subs	r0, #39	; 0x27
 800ef78:	e7f1      	b.n	800ef5e <__hexdig_fun+0xa>
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	4770      	bx	lr
	...

0800ef80 <__gethex>:
 800ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	ed2d 8b02 	vpush	{d8}
 800ef88:	b089      	sub	sp, #36	; 0x24
 800ef8a:	ee08 0a10 	vmov	s16, r0
 800ef8e:	9304      	str	r3, [sp, #16]
 800ef90:	4bb4      	ldr	r3, [pc, #720]	; (800f264 <__gethex+0x2e4>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	9301      	str	r3, [sp, #4]
 800ef96:	4618      	mov	r0, r3
 800ef98:	468b      	mov	fp, r1
 800ef9a:	4690      	mov	r8, r2
 800ef9c:	f7f1 f918 	bl	80001d0 <strlen>
 800efa0:	9b01      	ldr	r3, [sp, #4]
 800efa2:	f8db 2000 	ldr.w	r2, [fp]
 800efa6:	4403      	add	r3, r0
 800efa8:	4682      	mov	sl, r0
 800efaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800efae:	9305      	str	r3, [sp, #20]
 800efb0:	1c93      	adds	r3, r2, #2
 800efb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800efb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800efba:	32fe      	adds	r2, #254	; 0xfe
 800efbc:	18d1      	adds	r1, r2, r3
 800efbe:	461f      	mov	r7, r3
 800efc0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800efc4:	9100      	str	r1, [sp, #0]
 800efc6:	2830      	cmp	r0, #48	; 0x30
 800efc8:	d0f8      	beq.n	800efbc <__gethex+0x3c>
 800efca:	f7ff ffc3 	bl	800ef54 <__hexdig_fun>
 800efce:	4604      	mov	r4, r0
 800efd0:	2800      	cmp	r0, #0
 800efd2:	d13a      	bne.n	800f04a <__gethex+0xca>
 800efd4:	9901      	ldr	r1, [sp, #4]
 800efd6:	4652      	mov	r2, sl
 800efd8:	4638      	mov	r0, r7
 800efda:	f001 fb7d 	bl	80106d8 <strncmp>
 800efde:	4605      	mov	r5, r0
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d168      	bne.n	800f0b6 <__gethex+0x136>
 800efe4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800efe8:	eb07 060a 	add.w	r6, r7, sl
 800efec:	f7ff ffb2 	bl	800ef54 <__hexdig_fun>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	d062      	beq.n	800f0ba <__gethex+0x13a>
 800eff4:	4633      	mov	r3, r6
 800eff6:	7818      	ldrb	r0, [r3, #0]
 800eff8:	2830      	cmp	r0, #48	; 0x30
 800effa:	461f      	mov	r7, r3
 800effc:	f103 0301 	add.w	r3, r3, #1
 800f000:	d0f9      	beq.n	800eff6 <__gethex+0x76>
 800f002:	f7ff ffa7 	bl	800ef54 <__hexdig_fun>
 800f006:	2301      	movs	r3, #1
 800f008:	fab0 f480 	clz	r4, r0
 800f00c:	0964      	lsrs	r4, r4, #5
 800f00e:	4635      	mov	r5, r6
 800f010:	9300      	str	r3, [sp, #0]
 800f012:	463a      	mov	r2, r7
 800f014:	4616      	mov	r6, r2
 800f016:	3201      	adds	r2, #1
 800f018:	7830      	ldrb	r0, [r6, #0]
 800f01a:	f7ff ff9b 	bl	800ef54 <__hexdig_fun>
 800f01e:	2800      	cmp	r0, #0
 800f020:	d1f8      	bne.n	800f014 <__gethex+0x94>
 800f022:	9901      	ldr	r1, [sp, #4]
 800f024:	4652      	mov	r2, sl
 800f026:	4630      	mov	r0, r6
 800f028:	f001 fb56 	bl	80106d8 <strncmp>
 800f02c:	b980      	cbnz	r0, 800f050 <__gethex+0xd0>
 800f02e:	b94d      	cbnz	r5, 800f044 <__gethex+0xc4>
 800f030:	eb06 050a 	add.w	r5, r6, sl
 800f034:	462a      	mov	r2, r5
 800f036:	4616      	mov	r6, r2
 800f038:	3201      	adds	r2, #1
 800f03a:	7830      	ldrb	r0, [r6, #0]
 800f03c:	f7ff ff8a 	bl	800ef54 <__hexdig_fun>
 800f040:	2800      	cmp	r0, #0
 800f042:	d1f8      	bne.n	800f036 <__gethex+0xb6>
 800f044:	1bad      	subs	r5, r5, r6
 800f046:	00ad      	lsls	r5, r5, #2
 800f048:	e004      	b.n	800f054 <__gethex+0xd4>
 800f04a:	2400      	movs	r4, #0
 800f04c:	4625      	mov	r5, r4
 800f04e:	e7e0      	b.n	800f012 <__gethex+0x92>
 800f050:	2d00      	cmp	r5, #0
 800f052:	d1f7      	bne.n	800f044 <__gethex+0xc4>
 800f054:	7833      	ldrb	r3, [r6, #0]
 800f056:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f05a:	2b50      	cmp	r3, #80	; 0x50
 800f05c:	d13b      	bne.n	800f0d6 <__gethex+0x156>
 800f05e:	7873      	ldrb	r3, [r6, #1]
 800f060:	2b2b      	cmp	r3, #43	; 0x2b
 800f062:	d02c      	beq.n	800f0be <__gethex+0x13e>
 800f064:	2b2d      	cmp	r3, #45	; 0x2d
 800f066:	d02e      	beq.n	800f0c6 <__gethex+0x146>
 800f068:	1c71      	adds	r1, r6, #1
 800f06a:	f04f 0900 	mov.w	r9, #0
 800f06e:	7808      	ldrb	r0, [r1, #0]
 800f070:	f7ff ff70 	bl	800ef54 <__hexdig_fun>
 800f074:	1e43      	subs	r3, r0, #1
 800f076:	b2db      	uxtb	r3, r3
 800f078:	2b18      	cmp	r3, #24
 800f07a:	d82c      	bhi.n	800f0d6 <__gethex+0x156>
 800f07c:	f1a0 0210 	sub.w	r2, r0, #16
 800f080:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f084:	f7ff ff66 	bl	800ef54 <__hexdig_fun>
 800f088:	1e43      	subs	r3, r0, #1
 800f08a:	b2db      	uxtb	r3, r3
 800f08c:	2b18      	cmp	r3, #24
 800f08e:	d91d      	bls.n	800f0cc <__gethex+0x14c>
 800f090:	f1b9 0f00 	cmp.w	r9, #0
 800f094:	d000      	beq.n	800f098 <__gethex+0x118>
 800f096:	4252      	negs	r2, r2
 800f098:	4415      	add	r5, r2
 800f09a:	f8cb 1000 	str.w	r1, [fp]
 800f09e:	b1e4      	cbz	r4, 800f0da <__gethex+0x15a>
 800f0a0:	9b00      	ldr	r3, [sp, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	bf14      	ite	ne
 800f0a6:	2700      	movne	r7, #0
 800f0a8:	2706      	moveq	r7, #6
 800f0aa:	4638      	mov	r0, r7
 800f0ac:	b009      	add	sp, #36	; 0x24
 800f0ae:	ecbd 8b02 	vpop	{d8}
 800f0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b6:	463e      	mov	r6, r7
 800f0b8:	4625      	mov	r5, r4
 800f0ba:	2401      	movs	r4, #1
 800f0bc:	e7ca      	b.n	800f054 <__gethex+0xd4>
 800f0be:	f04f 0900 	mov.w	r9, #0
 800f0c2:	1cb1      	adds	r1, r6, #2
 800f0c4:	e7d3      	b.n	800f06e <__gethex+0xee>
 800f0c6:	f04f 0901 	mov.w	r9, #1
 800f0ca:	e7fa      	b.n	800f0c2 <__gethex+0x142>
 800f0cc:	230a      	movs	r3, #10
 800f0ce:	fb03 0202 	mla	r2, r3, r2, r0
 800f0d2:	3a10      	subs	r2, #16
 800f0d4:	e7d4      	b.n	800f080 <__gethex+0x100>
 800f0d6:	4631      	mov	r1, r6
 800f0d8:	e7df      	b.n	800f09a <__gethex+0x11a>
 800f0da:	1bf3      	subs	r3, r6, r7
 800f0dc:	3b01      	subs	r3, #1
 800f0de:	4621      	mov	r1, r4
 800f0e0:	2b07      	cmp	r3, #7
 800f0e2:	dc0b      	bgt.n	800f0fc <__gethex+0x17c>
 800f0e4:	ee18 0a10 	vmov	r0, s16
 800f0e8:	f000 fa70 	bl	800f5cc <_Balloc>
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	b940      	cbnz	r0, 800f102 <__gethex+0x182>
 800f0f0:	4b5d      	ldr	r3, [pc, #372]	; (800f268 <__gethex+0x2e8>)
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	21de      	movs	r1, #222	; 0xde
 800f0f6:	485d      	ldr	r0, [pc, #372]	; (800f26c <__gethex+0x2ec>)
 800f0f8:	f7ff f830 	bl	800e15c <__assert_func>
 800f0fc:	3101      	adds	r1, #1
 800f0fe:	105b      	asrs	r3, r3, #1
 800f100:	e7ee      	b.n	800f0e0 <__gethex+0x160>
 800f102:	f100 0914 	add.w	r9, r0, #20
 800f106:	f04f 0b00 	mov.w	fp, #0
 800f10a:	f1ca 0301 	rsb	r3, sl, #1
 800f10e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f112:	f8cd b000 	str.w	fp, [sp]
 800f116:	9306      	str	r3, [sp, #24]
 800f118:	42b7      	cmp	r7, r6
 800f11a:	d340      	bcc.n	800f19e <__gethex+0x21e>
 800f11c:	9802      	ldr	r0, [sp, #8]
 800f11e:	9b00      	ldr	r3, [sp, #0]
 800f120:	f840 3b04 	str.w	r3, [r0], #4
 800f124:	eba0 0009 	sub.w	r0, r0, r9
 800f128:	1080      	asrs	r0, r0, #2
 800f12a:	0146      	lsls	r6, r0, #5
 800f12c:	6120      	str	r0, [r4, #16]
 800f12e:	4618      	mov	r0, r3
 800f130:	f000 fb3e 	bl	800f7b0 <__hi0bits>
 800f134:	1a30      	subs	r0, r6, r0
 800f136:	f8d8 6000 	ldr.w	r6, [r8]
 800f13a:	42b0      	cmp	r0, r6
 800f13c:	dd63      	ble.n	800f206 <__gethex+0x286>
 800f13e:	1b87      	subs	r7, r0, r6
 800f140:	4639      	mov	r1, r7
 800f142:	4620      	mov	r0, r4
 800f144:	f000 fee2 	bl	800ff0c <__any_on>
 800f148:	4682      	mov	sl, r0
 800f14a:	b1a8      	cbz	r0, 800f178 <__gethex+0x1f8>
 800f14c:	1e7b      	subs	r3, r7, #1
 800f14e:	1159      	asrs	r1, r3, #5
 800f150:	f003 021f 	and.w	r2, r3, #31
 800f154:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f158:	f04f 0a01 	mov.w	sl, #1
 800f15c:	fa0a f202 	lsl.w	r2, sl, r2
 800f160:	420a      	tst	r2, r1
 800f162:	d009      	beq.n	800f178 <__gethex+0x1f8>
 800f164:	4553      	cmp	r3, sl
 800f166:	dd05      	ble.n	800f174 <__gethex+0x1f4>
 800f168:	1eb9      	subs	r1, r7, #2
 800f16a:	4620      	mov	r0, r4
 800f16c:	f000 fece 	bl	800ff0c <__any_on>
 800f170:	2800      	cmp	r0, #0
 800f172:	d145      	bne.n	800f200 <__gethex+0x280>
 800f174:	f04f 0a02 	mov.w	sl, #2
 800f178:	4639      	mov	r1, r7
 800f17a:	4620      	mov	r0, r4
 800f17c:	f7ff fe98 	bl	800eeb0 <rshift>
 800f180:	443d      	add	r5, r7
 800f182:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f186:	42ab      	cmp	r3, r5
 800f188:	da4c      	bge.n	800f224 <__gethex+0x2a4>
 800f18a:	ee18 0a10 	vmov	r0, s16
 800f18e:	4621      	mov	r1, r4
 800f190:	f000 fa5c 	bl	800f64c <_Bfree>
 800f194:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f196:	2300      	movs	r3, #0
 800f198:	6013      	str	r3, [r2, #0]
 800f19a:	27a3      	movs	r7, #163	; 0xa3
 800f19c:	e785      	b.n	800f0aa <__gethex+0x12a>
 800f19e:	1e73      	subs	r3, r6, #1
 800f1a0:	9a05      	ldr	r2, [sp, #20]
 800f1a2:	9303      	str	r3, [sp, #12]
 800f1a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d019      	beq.n	800f1e0 <__gethex+0x260>
 800f1ac:	f1bb 0f20 	cmp.w	fp, #32
 800f1b0:	d107      	bne.n	800f1c2 <__gethex+0x242>
 800f1b2:	9b02      	ldr	r3, [sp, #8]
 800f1b4:	9a00      	ldr	r2, [sp, #0]
 800f1b6:	f843 2b04 	str.w	r2, [r3], #4
 800f1ba:	9302      	str	r3, [sp, #8]
 800f1bc:	2300      	movs	r3, #0
 800f1be:	9300      	str	r3, [sp, #0]
 800f1c0:	469b      	mov	fp, r3
 800f1c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f1c6:	f7ff fec5 	bl	800ef54 <__hexdig_fun>
 800f1ca:	9b00      	ldr	r3, [sp, #0]
 800f1cc:	f000 000f 	and.w	r0, r0, #15
 800f1d0:	fa00 f00b 	lsl.w	r0, r0, fp
 800f1d4:	4303      	orrs	r3, r0
 800f1d6:	9300      	str	r3, [sp, #0]
 800f1d8:	f10b 0b04 	add.w	fp, fp, #4
 800f1dc:	9b03      	ldr	r3, [sp, #12]
 800f1de:	e00d      	b.n	800f1fc <__gethex+0x27c>
 800f1e0:	9b03      	ldr	r3, [sp, #12]
 800f1e2:	9a06      	ldr	r2, [sp, #24]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	42bb      	cmp	r3, r7
 800f1e8:	d3e0      	bcc.n	800f1ac <__gethex+0x22c>
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	9901      	ldr	r1, [sp, #4]
 800f1ee:	9307      	str	r3, [sp, #28]
 800f1f0:	4652      	mov	r2, sl
 800f1f2:	f001 fa71 	bl	80106d8 <strncmp>
 800f1f6:	9b07      	ldr	r3, [sp, #28]
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d1d7      	bne.n	800f1ac <__gethex+0x22c>
 800f1fc:	461e      	mov	r6, r3
 800f1fe:	e78b      	b.n	800f118 <__gethex+0x198>
 800f200:	f04f 0a03 	mov.w	sl, #3
 800f204:	e7b8      	b.n	800f178 <__gethex+0x1f8>
 800f206:	da0a      	bge.n	800f21e <__gethex+0x29e>
 800f208:	1a37      	subs	r7, r6, r0
 800f20a:	4621      	mov	r1, r4
 800f20c:	ee18 0a10 	vmov	r0, s16
 800f210:	463a      	mov	r2, r7
 800f212:	f000 fc37 	bl	800fa84 <__lshift>
 800f216:	1bed      	subs	r5, r5, r7
 800f218:	4604      	mov	r4, r0
 800f21a:	f100 0914 	add.w	r9, r0, #20
 800f21e:	f04f 0a00 	mov.w	sl, #0
 800f222:	e7ae      	b.n	800f182 <__gethex+0x202>
 800f224:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f228:	42a8      	cmp	r0, r5
 800f22a:	dd72      	ble.n	800f312 <__gethex+0x392>
 800f22c:	1b45      	subs	r5, r0, r5
 800f22e:	42ae      	cmp	r6, r5
 800f230:	dc36      	bgt.n	800f2a0 <__gethex+0x320>
 800f232:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f236:	2b02      	cmp	r3, #2
 800f238:	d02a      	beq.n	800f290 <__gethex+0x310>
 800f23a:	2b03      	cmp	r3, #3
 800f23c:	d02c      	beq.n	800f298 <__gethex+0x318>
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d11c      	bne.n	800f27c <__gethex+0x2fc>
 800f242:	42ae      	cmp	r6, r5
 800f244:	d11a      	bne.n	800f27c <__gethex+0x2fc>
 800f246:	2e01      	cmp	r6, #1
 800f248:	d112      	bne.n	800f270 <__gethex+0x2f0>
 800f24a:	9a04      	ldr	r2, [sp, #16]
 800f24c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f250:	6013      	str	r3, [r2, #0]
 800f252:	2301      	movs	r3, #1
 800f254:	6123      	str	r3, [r4, #16]
 800f256:	f8c9 3000 	str.w	r3, [r9]
 800f25a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f25c:	2762      	movs	r7, #98	; 0x62
 800f25e:	601c      	str	r4, [r3, #0]
 800f260:	e723      	b.n	800f0aa <__gethex+0x12a>
 800f262:	bf00      	nop
 800f264:	080116d0 	.word	0x080116d0
 800f268:	08011658 	.word	0x08011658
 800f26c:	08011669 	.word	0x08011669
 800f270:	1e71      	subs	r1, r6, #1
 800f272:	4620      	mov	r0, r4
 800f274:	f000 fe4a 	bl	800ff0c <__any_on>
 800f278:	2800      	cmp	r0, #0
 800f27a:	d1e6      	bne.n	800f24a <__gethex+0x2ca>
 800f27c:	ee18 0a10 	vmov	r0, s16
 800f280:	4621      	mov	r1, r4
 800f282:	f000 f9e3 	bl	800f64c <_Bfree>
 800f286:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f288:	2300      	movs	r3, #0
 800f28a:	6013      	str	r3, [r2, #0]
 800f28c:	2750      	movs	r7, #80	; 0x50
 800f28e:	e70c      	b.n	800f0aa <__gethex+0x12a>
 800f290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f292:	2b00      	cmp	r3, #0
 800f294:	d1f2      	bne.n	800f27c <__gethex+0x2fc>
 800f296:	e7d8      	b.n	800f24a <__gethex+0x2ca>
 800f298:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1d5      	bne.n	800f24a <__gethex+0x2ca>
 800f29e:	e7ed      	b.n	800f27c <__gethex+0x2fc>
 800f2a0:	1e6f      	subs	r7, r5, #1
 800f2a2:	f1ba 0f00 	cmp.w	sl, #0
 800f2a6:	d131      	bne.n	800f30c <__gethex+0x38c>
 800f2a8:	b127      	cbz	r7, 800f2b4 <__gethex+0x334>
 800f2aa:	4639      	mov	r1, r7
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f000 fe2d 	bl	800ff0c <__any_on>
 800f2b2:	4682      	mov	sl, r0
 800f2b4:	117b      	asrs	r3, r7, #5
 800f2b6:	2101      	movs	r1, #1
 800f2b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f2bc:	f007 071f 	and.w	r7, r7, #31
 800f2c0:	fa01 f707 	lsl.w	r7, r1, r7
 800f2c4:	421f      	tst	r7, r3
 800f2c6:	4629      	mov	r1, r5
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	bf18      	it	ne
 800f2cc:	f04a 0a02 	orrne.w	sl, sl, #2
 800f2d0:	1b76      	subs	r6, r6, r5
 800f2d2:	f7ff fded 	bl	800eeb0 <rshift>
 800f2d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f2da:	2702      	movs	r7, #2
 800f2dc:	f1ba 0f00 	cmp.w	sl, #0
 800f2e0:	d048      	beq.n	800f374 <__gethex+0x3f4>
 800f2e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2e6:	2b02      	cmp	r3, #2
 800f2e8:	d015      	beq.n	800f316 <__gethex+0x396>
 800f2ea:	2b03      	cmp	r3, #3
 800f2ec:	d017      	beq.n	800f31e <__gethex+0x39e>
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d109      	bne.n	800f306 <__gethex+0x386>
 800f2f2:	f01a 0f02 	tst.w	sl, #2
 800f2f6:	d006      	beq.n	800f306 <__gethex+0x386>
 800f2f8:	f8d9 0000 	ldr.w	r0, [r9]
 800f2fc:	ea4a 0a00 	orr.w	sl, sl, r0
 800f300:	f01a 0f01 	tst.w	sl, #1
 800f304:	d10e      	bne.n	800f324 <__gethex+0x3a4>
 800f306:	f047 0710 	orr.w	r7, r7, #16
 800f30a:	e033      	b.n	800f374 <__gethex+0x3f4>
 800f30c:	f04f 0a01 	mov.w	sl, #1
 800f310:	e7d0      	b.n	800f2b4 <__gethex+0x334>
 800f312:	2701      	movs	r7, #1
 800f314:	e7e2      	b.n	800f2dc <__gethex+0x35c>
 800f316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f318:	f1c3 0301 	rsb	r3, r3, #1
 800f31c:	9315      	str	r3, [sp, #84]	; 0x54
 800f31e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f320:	2b00      	cmp	r3, #0
 800f322:	d0f0      	beq.n	800f306 <__gethex+0x386>
 800f324:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f328:	f104 0314 	add.w	r3, r4, #20
 800f32c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f330:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f334:	f04f 0c00 	mov.w	ip, #0
 800f338:	4618      	mov	r0, r3
 800f33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f33e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f342:	d01c      	beq.n	800f37e <__gethex+0x3fe>
 800f344:	3201      	adds	r2, #1
 800f346:	6002      	str	r2, [r0, #0]
 800f348:	2f02      	cmp	r7, #2
 800f34a:	f104 0314 	add.w	r3, r4, #20
 800f34e:	d13f      	bne.n	800f3d0 <__gethex+0x450>
 800f350:	f8d8 2000 	ldr.w	r2, [r8]
 800f354:	3a01      	subs	r2, #1
 800f356:	42b2      	cmp	r2, r6
 800f358:	d10a      	bne.n	800f370 <__gethex+0x3f0>
 800f35a:	1171      	asrs	r1, r6, #5
 800f35c:	2201      	movs	r2, #1
 800f35e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f362:	f006 061f 	and.w	r6, r6, #31
 800f366:	fa02 f606 	lsl.w	r6, r2, r6
 800f36a:	421e      	tst	r6, r3
 800f36c:	bf18      	it	ne
 800f36e:	4617      	movne	r7, r2
 800f370:	f047 0720 	orr.w	r7, r7, #32
 800f374:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f376:	601c      	str	r4, [r3, #0]
 800f378:	9b04      	ldr	r3, [sp, #16]
 800f37a:	601d      	str	r5, [r3, #0]
 800f37c:	e695      	b.n	800f0aa <__gethex+0x12a>
 800f37e:	4299      	cmp	r1, r3
 800f380:	f843 cc04 	str.w	ip, [r3, #-4]
 800f384:	d8d8      	bhi.n	800f338 <__gethex+0x3b8>
 800f386:	68a3      	ldr	r3, [r4, #8]
 800f388:	459b      	cmp	fp, r3
 800f38a:	db19      	blt.n	800f3c0 <__gethex+0x440>
 800f38c:	6861      	ldr	r1, [r4, #4]
 800f38e:	ee18 0a10 	vmov	r0, s16
 800f392:	3101      	adds	r1, #1
 800f394:	f000 f91a 	bl	800f5cc <_Balloc>
 800f398:	4681      	mov	r9, r0
 800f39a:	b918      	cbnz	r0, 800f3a4 <__gethex+0x424>
 800f39c:	4b1a      	ldr	r3, [pc, #104]	; (800f408 <__gethex+0x488>)
 800f39e:	4602      	mov	r2, r0
 800f3a0:	2184      	movs	r1, #132	; 0x84
 800f3a2:	e6a8      	b.n	800f0f6 <__gethex+0x176>
 800f3a4:	6922      	ldr	r2, [r4, #16]
 800f3a6:	3202      	adds	r2, #2
 800f3a8:	f104 010c 	add.w	r1, r4, #12
 800f3ac:	0092      	lsls	r2, r2, #2
 800f3ae:	300c      	adds	r0, #12
 800f3b0:	f7fd fb98 	bl	800cae4 <memcpy>
 800f3b4:	4621      	mov	r1, r4
 800f3b6:	ee18 0a10 	vmov	r0, s16
 800f3ba:	f000 f947 	bl	800f64c <_Bfree>
 800f3be:	464c      	mov	r4, r9
 800f3c0:	6923      	ldr	r3, [r4, #16]
 800f3c2:	1c5a      	adds	r2, r3, #1
 800f3c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f3c8:	6122      	str	r2, [r4, #16]
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	615a      	str	r2, [r3, #20]
 800f3ce:	e7bb      	b.n	800f348 <__gethex+0x3c8>
 800f3d0:	6922      	ldr	r2, [r4, #16]
 800f3d2:	455a      	cmp	r2, fp
 800f3d4:	dd0b      	ble.n	800f3ee <__gethex+0x46e>
 800f3d6:	2101      	movs	r1, #1
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f7ff fd69 	bl	800eeb0 <rshift>
 800f3de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3e2:	3501      	adds	r5, #1
 800f3e4:	42ab      	cmp	r3, r5
 800f3e6:	f6ff aed0 	blt.w	800f18a <__gethex+0x20a>
 800f3ea:	2701      	movs	r7, #1
 800f3ec:	e7c0      	b.n	800f370 <__gethex+0x3f0>
 800f3ee:	f016 061f 	ands.w	r6, r6, #31
 800f3f2:	d0fa      	beq.n	800f3ea <__gethex+0x46a>
 800f3f4:	4453      	add	r3, sl
 800f3f6:	f1c6 0620 	rsb	r6, r6, #32
 800f3fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f3fe:	f000 f9d7 	bl	800f7b0 <__hi0bits>
 800f402:	42b0      	cmp	r0, r6
 800f404:	dbe7      	blt.n	800f3d6 <__gethex+0x456>
 800f406:	e7f0      	b.n	800f3ea <__gethex+0x46a>
 800f408:	08011658 	.word	0x08011658

0800f40c <L_shift>:
 800f40c:	f1c2 0208 	rsb	r2, r2, #8
 800f410:	0092      	lsls	r2, r2, #2
 800f412:	b570      	push	{r4, r5, r6, lr}
 800f414:	f1c2 0620 	rsb	r6, r2, #32
 800f418:	6843      	ldr	r3, [r0, #4]
 800f41a:	6804      	ldr	r4, [r0, #0]
 800f41c:	fa03 f506 	lsl.w	r5, r3, r6
 800f420:	432c      	orrs	r4, r5
 800f422:	40d3      	lsrs	r3, r2
 800f424:	6004      	str	r4, [r0, #0]
 800f426:	f840 3f04 	str.w	r3, [r0, #4]!
 800f42a:	4288      	cmp	r0, r1
 800f42c:	d3f4      	bcc.n	800f418 <L_shift+0xc>
 800f42e:	bd70      	pop	{r4, r5, r6, pc}

0800f430 <__match>:
 800f430:	b530      	push	{r4, r5, lr}
 800f432:	6803      	ldr	r3, [r0, #0]
 800f434:	3301      	adds	r3, #1
 800f436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f43a:	b914      	cbnz	r4, 800f442 <__match+0x12>
 800f43c:	6003      	str	r3, [r0, #0]
 800f43e:	2001      	movs	r0, #1
 800f440:	bd30      	pop	{r4, r5, pc}
 800f442:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f446:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f44a:	2d19      	cmp	r5, #25
 800f44c:	bf98      	it	ls
 800f44e:	3220      	addls	r2, #32
 800f450:	42a2      	cmp	r2, r4
 800f452:	d0f0      	beq.n	800f436 <__match+0x6>
 800f454:	2000      	movs	r0, #0
 800f456:	e7f3      	b.n	800f440 <__match+0x10>

0800f458 <__hexnan>:
 800f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f45c:	680b      	ldr	r3, [r1, #0]
 800f45e:	115e      	asrs	r6, r3, #5
 800f460:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f464:	f013 031f 	ands.w	r3, r3, #31
 800f468:	b087      	sub	sp, #28
 800f46a:	bf18      	it	ne
 800f46c:	3604      	addne	r6, #4
 800f46e:	2500      	movs	r5, #0
 800f470:	1f37      	subs	r7, r6, #4
 800f472:	4690      	mov	r8, r2
 800f474:	6802      	ldr	r2, [r0, #0]
 800f476:	9301      	str	r3, [sp, #4]
 800f478:	4682      	mov	sl, r0
 800f47a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f47e:	46b9      	mov	r9, r7
 800f480:	463c      	mov	r4, r7
 800f482:	9502      	str	r5, [sp, #8]
 800f484:	46ab      	mov	fp, r5
 800f486:	7851      	ldrb	r1, [r2, #1]
 800f488:	1c53      	adds	r3, r2, #1
 800f48a:	9303      	str	r3, [sp, #12]
 800f48c:	b341      	cbz	r1, 800f4e0 <__hexnan+0x88>
 800f48e:	4608      	mov	r0, r1
 800f490:	9205      	str	r2, [sp, #20]
 800f492:	9104      	str	r1, [sp, #16]
 800f494:	f7ff fd5e 	bl	800ef54 <__hexdig_fun>
 800f498:	2800      	cmp	r0, #0
 800f49a:	d14f      	bne.n	800f53c <__hexnan+0xe4>
 800f49c:	9904      	ldr	r1, [sp, #16]
 800f49e:	9a05      	ldr	r2, [sp, #20]
 800f4a0:	2920      	cmp	r1, #32
 800f4a2:	d818      	bhi.n	800f4d6 <__hexnan+0x7e>
 800f4a4:	9b02      	ldr	r3, [sp, #8]
 800f4a6:	459b      	cmp	fp, r3
 800f4a8:	dd13      	ble.n	800f4d2 <__hexnan+0x7a>
 800f4aa:	454c      	cmp	r4, r9
 800f4ac:	d206      	bcs.n	800f4bc <__hexnan+0x64>
 800f4ae:	2d07      	cmp	r5, #7
 800f4b0:	dc04      	bgt.n	800f4bc <__hexnan+0x64>
 800f4b2:	462a      	mov	r2, r5
 800f4b4:	4649      	mov	r1, r9
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f7ff ffa8 	bl	800f40c <L_shift>
 800f4bc:	4544      	cmp	r4, r8
 800f4be:	d950      	bls.n	800f562 <__hexnan+0x10a>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	f1a4 0904 	sub.w	r9, r4, #4
 800f4c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f4ca:	f8cd b008 	str.w	fp, [sp, #8]
 800f4ce:	464c      	mov	r4, r9
 800f4d0:	461d      	mov	r5, r3
 800f4d2:	9a03      	ldr	r2, [sp, #12]
 800f4d4:	e7d7      	b.n	800f486 <__hexnan+0x2e>
 800f4d6:	2929      	cmp	r1, #41	; 0x29
 800f4d8:	d156      	bne.n	800f588 <__hexnan+0x130>
 800f4da:	3202      	adds	r2, #2
 800f4dc:	f8ca 2000 	str.w	r2, [sl]
 800f4e0:	f1bb 0f00 	cmp.w	fp, #0
 800f4e4:	d050      	beq.n	800f588 <__hexnan+0x130>
 800f4e6:	454c      	cmp	r4, r9
 800f4e8:	d206      	bcs.n	800f4f8 <__hexnan+0xa0>
 800f4ea:	2d07      	cmp	r5, #7
 800f4ec:	dc04      	bgt.n	800f4f8 <__hexnan+0xa0>
 800f4ee:	462a      	mov	r2, r5
 800f4f0:	4649      	mov	r1, r9
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	f7ff ff8a 	bl	800f40c <L_shift>
 800f4f8:	4544      	cmp	r4, r8
 800f4fa:	d934      	bls.n	800f566 <__hexnan+0x10e>
 800f4fc:	f1a8 0204 	sub.w	r2, r8, #4
 800f500:	4623      	mov	r3, r4
 800f502:	f853 1b04 	ldr.w	r1, [r3], #4
 800f506:	f842 1f04 	str.w	r1, [r2, #4]!
 800f50a:	429f      	cmp	r7, r3
 800f50c:	d2f9      	bcs.n	800f502 <__hexnan+0xaa>
 800f50e:	1b3b      	subs	r3, r7, r4
 800f510:	f023 0303 	bic.w	r3, r3, #3
 800f514:	3304      	adds	r3, #4
 800f516:	3401      	adds	r4, #1
 800f518:	3e03      	subs	r6, #3
 800f51a:	42b4      	cmp	r4, r6
 800f51c:	bf88      	it	hi
 800f51e:	2304      	movhi	r3, #4
 800f520:	4443      	add	r3, r8
 800f522:	2200      	movs	r2, #0
 800f524:	f843 2b04 	str.w	r2, [r3], #4
 800f528:	429f      	cmp	r7, r3
 800f52a:	d2fb      	bcs.n	800f524 <__hexnan+0xcc>
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	b91b      	cbnz	r3, 800f538 <__hexnan+0xe0>
 800f530:	4547      	cmp	r7, r8
 800f532:	d127      	bne.n	800f584 <__hexnan+0x12c>
 800f534:	2301      	movs	r3, #1
 800f536:	603b      	str	r3, [r7, #0]
 800f538:	2005      	movs	r0, #5
 800f53a:	e026      	b.n	800f58a <__hexnan+0x132>
 800f53c:	3501      	adds	r5, #1
 800f53e:	2d08      	cmp	r5, #8
 800f540:	f10b 0b01 	add.w	fp, fp, #1
 800f544:	dd06      	ble.n	800f554 <__hexnan+0xfc>
 800f546:	4544      	cmp	r4, r8
 800f548:	d9c3      	bls.n	800f4d2 <__hexnan+0x7a>
 800f54a:	2300      	movs	r3, #0
 800f54c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f550:	2501      	movs	r5, #1
 800f552:	3c04      	subs	r4, #4
 800f554:	6822      	ldr	r2, [r4, #0]
 800f556:	f000 000f 	and.w	r0, r0, #15
 800f55a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f55e:	6022      	str	r2, [r4, #0]
 800f560:	e7b7      	b.n	800f4d2 <__hexnan+0x7a>
 800f562:	2508      	movs	r5, #8
 800f564:	e7b5      	b.n	800f4d2 <__hexnan+0x7a>
 800f566:	9b01      	ldr	r3, [sp, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d0df      	beq.n	800f52c <__hexnan+0xd4>
 800f56c:	f04f 32ff 	mov.w	r2, #4294967295
 800f570:	f1c3 0320 	rsb	r3, r3, #32
 800f574:	fa22 f303 	lsr.w	r3, r2, r3
 800f578:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f57c:	401a      	ands	r2, r3
 800f57e:	f846 2c04 	str.w	r2, [r6, #-4]
 800f582:	e7d3      	b.n	800f52c <__hexnan+0xd4>
 800f584:	3f04      	subs	r7, #4
 800f586:	e7d1      	b.n	800f52c <__hexnan+0xd4>
 800f588:	2004      	movs	r0, #4
 800f58a:	b007      	add	sp, #28
 800f58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f590 <_localeconv_r>:
 800f590:	4800      	ldr	r0, [pc, #0]	; (800f594 <_localeconv_r+0x4>)
 800f592:	4770      	bx	lr
 800f594:	20000164 	.word	0x20000164

0800f598 <malloc>:
 800f598:	4b02      	ldr	r3, [pc, #8]	; (800f5a4 <malloc+0xc>)
 800f59a:	4601      	mov	r1, r0
 800f59c:	6818      	ldr	r0, [r3, #0]
 800f59e:	f000 bd59 	b.w	8010054 <_malloc_r>
 800f5a2:	bf00      	nop
 800f5a4:	2000000c 	.word	0x2000000c

0800f5a8 <__ascii_mbtowc>:
 800f5a8:	b082      	sub	sp, #8
 800f5aa:	b901      	cbnz	r1, 800f5ae <__ascii_mbtowc+0x6>
 800f5ac:	a901      	add	r1, sp, #4
 800f5ae:	b142      	cbz	r2, 800f5c2 <__ascii_mbtowc+0x1a>
 800f5b0:	b14b      	cbz	r3, 800f5c6 <__ascii_mbtowc+0x1e>
 800f5b2:	7813      	ldrb	r3, [r2, #0]
 800f5b4:	600b      	str	r3, [r1, #0]
 800f5b6:	7812      	ldrb	r2, [r2, #0]
 800f5b8:	1e10      	subs	r0, r2, #0
 800f5ba:	bf18      	it	ne
 800f5bc:	2001      	movne	r0, #1
 800f5be:	b002      	add	sp, #8
 800f5c0:	4770      	bx	lr
 800f5c2:	4610      	mov	r0, r2
 800f5c4:	e7fb      	b.n	800f5be <__ascii_mbtowc+0x16>
 800f5c6:	f06f 0001 	mvn.w	r0, #1
 800f5ca:	e7f8      	b.n	800f5be <__ascii_mbtowc+0x16>

0800f5cc <_Balloc>:
 800f5cc:	b570      	push	{r4, r5, r6, lr}
 800f5ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f5d0:	4604      	mov	r4, r0
 800f5d2:	460d      	mov	r5, r1
 800f5d4:	b976      	cbnz	r6, 800f5f4 <_Balloc+0x28>
 800f5d6:	2010      	movs	r0, #16
 800f5d8:	f7ff ffde 	bl	800f598 <malloc>
 800f5dc:	4602      	mov	r2, r0
 800f5de:	6260      	str	r0, [r4, #36]	; 0x24
 800f5e0:	b920      	cbnz	r0, 800f5ec <_Balloc+0x20>
 800f5e2:	4b18      	ldr	r3, [pc, #96]	; (800f644 <_Balloc+0x78>)
 800f5e4:	4818      	ldr	r0, [pc, #96]	; (800f648 <_Balloc+0x7c>)
 800f5e6:	2166      	movs	r1, #102	; 0x66
 800f5e8:	f7fe fdb8 	bl	800e15c <__assert_func>
 800f5ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5f0:	6006      	str	r6, [r0, #0]
 800f5f2:	60c6      	str	r6, [r0, #12]
 800f5f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f5f6:	68f3      	ldr	r3, [r6, #12]
 800f5f8:	b183      	cbz	r3, 800f61c <_Balloc+0x50>
 800f5fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f602:	b9b8      	cbnz	r0, 800f634 <_Balloc+0x68>
 800f604:	2101      	movs	r1, #1
 800f606:	fa01 f605 	lsl.w	r6, r1, r5
 800f60a:	1d72      	adds	r2, r6, #5
 800f60c:	0092      	lsls	r2, r2, #2
 800f60e:	4620      	mov	r0, r4
 800f610:	f000 fc9d 	bl	800ff4e <_calloc_r>
 800f614:	b160      	cbz	r0, 800f630 <_Balloc+0x64>
 800f616:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f61a:	e00e      	b.n	800f63a <_Balloc+0x6e>
 800f61c:	2221      	movs	r2, #33	; 0x21
 800f61e:	2104      	movs	r1, #4
 800f620:	4620      	mov	r0, r4
 800f622:	f000 fc94 	bl	800ff4e <_calloc_r>
 800f626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f628:	60f0      	str	r0, [r6, #12]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d1e4      	bne.n	800f5fa <_Balloc+0x2e>
 800f630:	2000      	movs	r0, #0
 800f632:	bd70      	pop	{r4, r5, r6, pc}
 800f634:	6802      	ldr	r2, [r0, #0]
 800f636:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f63a:	2300      	movs	r3, #0
 800f63c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f640:	e7f7      	b.n	800f632 <_Balloc+0x66>
 800f642:	bf00      	nop
 800f644:	08011540 	.word	0x08011540
 800f648:	080116e4 	.word	0x080116e4

0800f64c <_Bfree>:
 800f64c:	b570      	push	{r4, r5, r6, lr}
 800f64e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f650:	4605      	mov	r5, r0
 800f652:	460c      	mov	r4, r1
 800f654:	b976      	cbnz	r6, 800f674 <_Bfree+0x28>
 800f656:	2010      	movs	r0, #16
 800f658:	f7ff ff9e 	bl	800f598 <malloc>
 800f65c:	4602      	mov	r2, r0
 800f65e:	6268      	str	r0, [r5, #36]	; 0x24
 800f660:	b920      	cbnz	r0, 800f66c <_Bfree+0x20>
 800f662:	4b09      	ldr	r3, [pc, #36]	; (800f688 <_Bfree+0x3c>)
 800f664:	4809      	ldr	r0, [pc, #36]	; (800f68c <_Bfree+0x40>)
 800f666:	218a      	movs	r1, #138	; 0x8a
 800f668:	f7fe fd78 	bl	800e15c <__assert_func>
 800f66c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f670:	6006      	str	r6, [r0, #0]
 800f672:	60c6      	str	r6, [r0, #12]
 800f674:	b13c      	cbz	r4, 800f686 <_Bfree+0x3a>
 800f676:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f678:	6862      	ldr	r2, [r4, #4]
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f680:	6021      	str	r1, [r4, #0]
 800f682:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f686:	bd70      	pop	{r4, r5, r6, pc}
 800f688:	08011540 	.word	0x08011540
 800f68c:	080116e4 	.word	0x080116e4

0800f690 <__multadd>:
 800f690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f694:	690d      	ldr	r5, [r1, #16]
 800f696:	4607      	mov	r7, r0
 800f698:	460c      	mov	r4, r1
 800f69a:	461e      	mov	r6, r3
 800f69c:	f101 0c14 	add.w	ip, r1, #20
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	f8dc 3000 	ldr.w	r3, [ip]
 800f6a6:	b299      	uxth	r1, r3
 800f6a8:	fb02 6101 	mla	r1, r2, r1, r6
 800f6ac:	0c1e      	lsrs	r6, r3, #16
 800f6ae:	0c0b      	lsrs	r3, r1, #16
 800f6b0:	fb02 3306 	mla	r3, r2, r6, r3
 800f6b4:	b289      	uxth	r1, r1
 800f6b6:	3001      	adds	r0, #1
 800f6b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f6bc:	4285      	cmp	r5, r0
 800f6be:	f84c 1b04 	str.w	r1, [ip], #4
 800f6c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f6c6:	dcec      	bgt.n	800f6a2 <__multadd+0x12>
 800f6c8:	b30e      	cbz	r6, 800f70e <__multadd+0x7e>
 800f6ca:	68a3      	ldr	r3, [r4, #8]
 800f6cc:	42ab      	cmp	r3, r5
 800f6ce:	dc19      	bgt.n	800f704 <__multadd+0x74>
 800f6d0:	6861      	ldr	r1, [r4, #4]
 800f6d2:	4638      	mov	r0, r7
 800f6d4:	3101      	adds	r1, #1
 800f6d6:	f7ff ff79 	bl	800f5cc <_Balloc>
 800f6da:	4680      	mov	r8, r0
 800f6dc:	b928      	cbnz	r0, 800f6ea <__multadd+0x5a>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	4b0c      	ldr	r3, [pc, #48]	; (800f714 <__multadd+0x84>)
 800f6e2:	480d      	ldr	r0, [pc, #52]	; (800f718 <__multadd+0x88>)
 800f6e4:	21b5      	movs	r1, #181	; 0xb5
 800f6e6:	f7fe fd39 	bl	800e15c <__assert_func>
 800f6ea:	6922      	ldr	r2, [r4, #16]
 800f6ec:	3202      	adds	r2, #2
 800f6ee:	f104 010c 	add.w	r1, r4, #12
 800f6f2:	0092      	lsls	r2, r2, #2
 800f6f4:	300c      	adds	r0, #12
 800f6f6:	f7fd f9f5 	bl	800cae4 <memcpy>
 800f6fa:	4621      	mov	r1, r4
 800f6fc:	4638      	mov	r0, r7
 800f6fe:	f7ff ffa5 	bl	800f64c <_Bfree>
 800f702:	4644      	mov	r4, r8
 800f704:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f708:	3501      	adds	r5, #1
 800f70a:	615e      	str	r6, [r3, #20]
 800f70c:	6125      	str	r5, [r4, #16]
 800f70e:	4620      	mov	r0, r4
 800f710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f714:	08011658 	.word	0x08011658
 800f718:	080116e4 	.word	0x080116e4

0800f71c <__s2b>:
 800f71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f720:	460c      	mov	r4, r1
 800f722:	4615      	mov	r5, r2
 800f724:	461f      	mov	r7, r3
 800f726:	2209      	movs	r2, #9
 800f728:	3308      	adds	r3, #8
 800f72a:	4606      	mov	r6, r0
 800f72c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f730:	2100      	movs	r1, #0
 800f732:	2201      	movs	r2, #1
 800f734:	429a      	cmp	r2, r3
 800f736:	db09      	blt.n	800f74c <__s2b+0x30>
 800f738:	4630      	mov	r0, r6
 800f73a:	f7ff ff47 	bl	800f5cc <_Balloc>
 800f73e:	b940      	cbnz	r0, 800f752 <__s2b+0x36>
 800f740:	4602      	mov	r2, r0
 800f742:	4b19      	ldr	r3, [pc, #100]	; (800f7a8 <__s2b+0x8c>)
 800f744:	4819      	ldr	r0, [pc, #100]	; (800f7ac <__s2b+0x90>)
 800f746:	21ce      	movs	r1, #206	; 0xce
 800f748:	f7fe fd08 	bl	800e15c <__assert_func>
 800f74c:	0052      	lsls	r2, r2, #1
 800f74e:	3101      	adds	r1, #1
 800f750:	e7f0      	b.n	800f734 <__s2b+0x18>
 800f752:	9b08      	ldr	r3, [sp, #32]
 800f754:	6143      	str	r3, [r0, #20]
 800f756:	2d09      	cmp	r5, #9
 800f758:	f04f 0301 	mov.w	r3, #1
 800f75c:	6103      	str	r3, [r0, #16]
 800f75e:	dd16      	ble.n	800f78e <__s2b+0x72>
 800f760:	f104 0909 	add.w	r9, r4, #9
 800f764:	46c8      	mov	r8, r9
 800f766:	442c      	add	r4, r5
 800f768:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f76c:	4601      	mov	r1, r0
 800f76e:	3b30      	subs	r3, #48	; 0x30
 800f770:	220a      	movs	r2, #10
 800f772:	4630      	mov	r0, r6
 800f774:	f7ff ff8c 	bl	800f690 <__multadd>
 800f778:	45a0      	cmp	r8, r4
 800f77a:	d1f5      	bne.n	800f768 <__s2b+0x4c>
 800f77c:	f1a5 0408 	sub.w	r4, r5, #8
 800f780:	444c      	add	r4, r9
 800f782:	1b2d      	subs	r5, r5, r4
 800f784:	1963      	adds	r3, r4, r5
 800f786:	42bb      	cmp	r3, r7
 800f788:	db04      	blt.n	800f794 <__s2b+0x78>
 800f78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f78e:	340a      	adds	r4, #10
 800f790:	2509      	movs	r5, #9
 800f792:	e7f6      	b.n	800f782 <__s2b+0x66>
 800f794:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f798:	4601      	mov	r1, r0
 800f79a:	3b30      	subs	r3, #48	; 0x30
 800f79c:	220a      	movs	r2, #10
 800f79e:	4630      	mov	r0, r6
 800f7a0:	f7ff ff76 	bl	800f690 <__multadd>
 800f7a4:	e7ee      	b.n	800f784 <__s2b+0x68>
 800f7a6:	bf00      	nop
 800f7a8:	08011658 	.word	0x08011658
 800f7ac:	080116e4 	.word	0x080116e4

0800f7b0 <__hi0bits>:
 800f7b0:	0c03      	lsrs	r3, r0, #16
 800f7b2:	041b      	lsls	r3, r3, #16
 800f7b4:	b9d3      	cbnz	r3, 800f7ec <__hi0bits+0x3c>
 800f7b6:	0400      	lsls	r0, r0, #16
 800f7b8:	2310      	movs	r3, #16
 800f7ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f7be:	bf04      	itt	eq
 800f7c0:	0200      	lsleq	r0, r0, #8
 800f7c2:	3308      	addeq	r3, #8
 800f7c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f7c8:	bf04      	itt	eq
 800f7ca:	0100      	lsleq	r0, r0, #4
 800f7cc:	3304      	addeq	r3, #4
 800f7ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f7d2:	bf04      	itt	eq
 800f7d4:	0080      	lsleq	r0, r0, #2
 800f7d6:	3302      	addeq	r3, #2
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	db05      	blt.n	800f7e8 <__hi0bits+0x38>
 800f7dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f7e0:	f103 0301 	add.w	r3, r3, #1
 800f7e4:	bf08      	it	eq
 800f7e6:	2320      	moveq	r3, #32
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	4770      	bx	lr
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	e7e4      	b.n	800f7ba <__hi0bits+0xa>

0800f7f0 <__lo0bits>:
 800f7f0:	6803      	ldr	r3, [r0, #0]
 800f7f2:	f013 0207 	ands.w	r2, r3, #7
 800f7f6:	4601      	mov	r1, r0
 800f7f8:	d00b      	beq.n	800f812 <__lo0bits+0x22>
 800f7fa:	07da      	lsls	r2, r3, #31
 800f7fc:	d423      	bmi.n	800f846 <__lo0bits+0x56>
 800f7fe:	0798      	lsls	r0, r3, #30
 800f800:	bf49      	itett	mi
 800f802:	085b      	lsrmi	r3, r3, #1
 800f804:	089b      	lsrpl	r3, r3, #2
 800f806:	2001      	movmi	r0, #1
 800f808:	600b      	strmi	r3, [r1, #0]
 800f80a:	bf5c      	itt	pl
 800f80c:	600b      	strpl	r3, [r1, #0]
 800f80e:	2002      	movpl	r0, #2
 800f810:	4770      	bx	lr
 800f812:	b298      	uxth	r0, r3
 800f814:	b9a8      	cbnz	r0, 800f842 <__lo0bits+0x52>
 800f816:	0c1b      	lsrs	r3, r3, #16
 800f818:	2010      	movs	r0, #16
 800f81a:	b2da      	uxtb	r2, r3
 800f81c:	b90a      	cbnz	r2, 800f822 <__lo0bits+0x32>
 800f81e:	3008      	adds	r0, #8
 800f820:	0a1b      	lsrs	r3, r3, #8
 800f822:	071a      	lsls	r2, r3, #28
 800f824:	bf04      	itt	eq
 800f826:	091b      	lsreq	r3, r3, #4
 800f828:	3004      	addeq	r0, #4
 800f82a:	079a      	lsls	r2, r3, #30
 800f82c:	bf04      	itt	eq
 800f82e:	089b      	lsreq	r3, r3, #2
 800f830:	3002      	addeq	r0, #2
 800f832:	07da      	lsls	r2, r3, #31
 800f834:	d403      	bmi.n	800f83e <__lo0bits+0x4e>
 800f836:	085b      	lsrs	r3, r3, #1
 800f838:	f100 0001 	add.w	r0, r0, #1
 800f83c:	d005      	beq.n	800f84a <__lo0bits+0x5a>
 800f83e:	600b      	str	r3, [r1, #0]
 800f840:	4770      	bx	lr
 800f842:	4610      	mov	r0, r2
 800f844:	e7e9      	b.n	800f81a <__lo0bits+0x2a>
 800f846:	2000      	movs	r0, #0
 800f848:	4770      	bx	lr
 800f84a:	2020      	movs	r0, #32
 800f84c:	4770      	bx	lr
	...

0800f850 <__i2b>:
 800f850:	b510      	push	{r4, lr}
 800f852:	460c      	mov	r4, r1
 800f854:	2101      	movs	r1, #1
 800f856:	f7ff feb9 	bl	800f5cc <_Balloc>
 800f85a:	4602      	mov	r2, r0
 800f85c:	b928      	cbnz	r0, 800f86a <__i2b+0x1a>
 800f85e:	4b05      	ldr	r3, [pc, #20]	; (800f874 <__i2b+0x24>)
 800f860:	4805      	ldr	r0, [pc, #20]	; (800f878 <__i2b+0x28>)
 800f862:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f866:	f7fe fc79 	bl	800e15c <__assert_func>
 800f86a:	2301      	movs	r3, #1
 800f86c:	6144      	str	r4, [r0, #20]
 800f86e:	6103      	str	r3, [r0, #16]
 800f870:	bd10      	pop	{r4, pc}
 800f872:	bf00      	nop
 800f874:	08011658 	.word	0x08011658
 800f878:	080116e4 	.word	0x080116e4

0800f87c <__multiply>:
 800f87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f880:	4691      	mov	r9, r2
 800f882:	690a      	ldr	r2, [r1, #16]
 800f884:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f888:	429a      	cmp	r2, r3
 800f88a:	bfb8      	it	lt
 800f88c:	460b      	movlt	r3, r1
 800f88e:	460c      	mov	r4, r1
 800f890:	bfbc      	itt	lt
 800f892:	464c      	movlt	r4, r9
 800f894:	4699      	movlt	r9, r3
 800f896:	6927      	ldr	r7, [r4, #16]
 800f898:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f89c:	68a3      	ldr	r3, [r4, #8]
 800f89e:	6861      	ldr	r1, [r4, #4]
 800f8a0:	eb07 060a 	add.w	r6, r7, sl
 800f8a4:	42b3      	cmp	r3, r6
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	bfb8      	it	lt
 800f8aa:	3101      	addlt	r1, #1
 800f8ac:	f7ff fe8e 	bl	800f5cc <_Balloc>
 800f8b0:	b930      	cbnz	r0, 800f8c0 <__multiply+0x44>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	4b44      	ldr	r3, [pc, #272]	; (800f9c8 <__multiply+0x14c>)
 800f8b6:	4845      	ldr	r0, [pc, #276]	; (800f9cc <__multiply+0x150>)
 800f8b8:	f240 115d 	movw	r1, #349	; 0x15d
 800f8bc:	f7fe fc4e 	bl	800e15c <__assert_func>
 800f8c0:	f100 0514 	add.w	r5, r0, #20
 800f8c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f8c8:	462b      	mov	r3, r5
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	4543      	cmp	r3, r8
 800f8ce:	d321      	bcc.n	800f914 <__multiply+0x98>
 800f8d0:	f104 0314 	add.w	r3, r4, #20
 800f8d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f8d8:	f109 0314 	add.w	r3, r9, #20
 800f8dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f8e0:	9202      	str	r2, [sp, #8]
 800f8e2:	1b3a      	subs	r2, r7, r4
 800f8e4:	3a15      	subs	r2, #21
 800f8e6:	f022 0203 	bic.w	r2, r2, #3
 800f8ea:	3204      	adds	r2, #4
 800f8ec:	f104 0115 	add.w	r1, r4, #21
 800f8f0:	428f      	cmp	r7, r1
 800f8f2:	bf38      	it	cc
 800f8f4:	2204      	movcc	r2, #4
 800f8f6:	9201      	str	r2, [sp, #4]
 800f8f8:	9a02      	ldr	r2, [sp, #8]
 800f8fa:	9303      	str	r3, [sp, #12]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d80c      	bhi.n	800f91a <__multiply+0x9e>
 800f900:	2e00      	cmp	r6, #0
 800f902:	dd03      	ble.n	800f90c <__multiply+0x90>
 800f904:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d05a      	beq.n	800f9c2 <__multiply+0x146>
 800f90c:	6106      	str	r6, [r0, #16]
 800f90e:	b005      	add	sp, #20
 800f910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f914:	f843 2b04 	str.w	r2, [r3], #4
 800f918:	e7d8      	b.n	800f8cc <__multiply+0x50>
 800f91a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f91e:	f1ba 0f00 	cmp.w	sl, #0
 800f922:	d024      	beq.n	800f96e <__multiply+0xf2>
 800f924:	f104 0e14 	add.w	lr, r4, #20
 800f928:	46a9      	mov	r9, r5
 800f92a:	f04f 0c00 	mov.w	ip, #0
 800f92e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f932:	f8d9 1000 	ldr.w	r1, [r9]
 800f936:	fa1f fb82 	uxth.w	fp, r2
 800f93a:	b289      	uxth	r1, r1
 800f93c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f940:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f944:	f8d9 2000 	ldr.w	r2, [r9]
 800f948:	4461      	add	r1, ip
 800f94a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f94e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f952:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f956:	b289      	uxth	r1, r1
 800f958:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f95c:	4577      	cmp	r7, lr
 800f95e:	f849 1b04 	str.w	r1, [r9], #4
 800f962:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f966:	d8e2      	bhi.n	800f92e <__multiply+0xb2>
 800f968:	9a01      	ldr	r2, [sp, #4]
 800f96a:	f845 c002 	str.w	ip, [r5, r2]
 800f96e:	9a03      	ldr	r2, [sp, #12]
 800f970:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f974:	3304      	adds	r3, #4
 800f976:	f1b9 0f00 	cmp.w	r9, #0
 800f97a:	d020      	beq.n	800f9be <__multiply+0x142>
 800f97c:	6829      	ldr	r1, [r5, #0]
 800f97e:	f104 0c14 	add.w	ip, r4, #20
 800f982:	46ae      	mov	lr, r5
 800f984:	f04f 0a00 	mov.w	sl, #0
 800f988:	f8bc b000 	ldrh.w	fp, [ip]
 800f98c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f990:	fb09 220b 	mla	r2, r9, fp, r2
 800f994:	4492      	add	sl, r2
 800f996:	b289      	uxth	r1, r1
 800f998:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f99c:	f84e 1b04 	str.w	r1, [lr], #4
 800f9a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f9a4:	f8be 1000 	ldrh.w	r1, [lr]
 800f9a8:	0c12      	lsrs	r2, r2, #16
 800f9aa:	fb09 1102 	mla	r1, r9, r2, r1
 800f9ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f9b2:	4567      	cmp	r7, ip
 800f9b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f9b8:	d8e6      	bhi.n	800f988 <__multiply+0x10c>
 800f9ba:	9a01      	ldr	r2, [sp, #4]
 800f9bc:	50a9      	str	r1, [r5, r2]
 800f9be:	3504      	adds	r5, #4
 800f9c0:	e79a      	b.n	800f8f8 <__multiply+0x7c>
 800f9c2:	3e01      	subs	r6, #1
 800f9c4:	e79c      	b.n	800f900 <__multiply+0x84>
 800f9c6:	bf00      	nop
 800f9c8:	08011658 	.word	0x08011658
 800f9cc:	080116e4 	.word	0x080116e4

0800f9d0 <__pow5mult>:
 800f9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9d4:	4615      	mov	r5, r2
 800f9d6:	f012 0203 	ands.w	r2, r2, #3
 800f9da:	4606      	mov	r6, r0
 800f9dc:	460f      	mov	r7, r1
 800f9de:	d007      	beq.n	800f9f0 <__pow5mult+0x20>
 800f9e0:	4c25      	ldr	r4, [pc, #148]	; (800fa78 <__pow5mult+0xa8>)
 800f9e2:	3a01      	subs	r2, #1
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9ea:	f7ff fe51 	bl	800f690 <__multadd>
 800f9ee:	4607      	mov	r7, r0
 800f9f0:	10ad      	asrs	r5, r5, #2
 800f9f2:	d03d      	beq.n	800fa70 <__pow5mult+0xa0>
 800f9f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f9f6:	b97c      	cbnz	r4, 800fa18 <__pow5mult+0x48>
 800f9f8:	2010      	movs	r0, #16
 800f9fa:	f7ff fdcd 	bl	800f598 <malloc>
 800f9fe:	4602      	mov	r2, r0
 800fa00:	6270      	str	r0, [r6, #36]	; 0x24
 800fa02:	b928      	cbnz	r0, 800fa10 <__pow5mult+0x40>
 800fa04:	4b1d      	ldr	r3, [pc, #116]	; (800fa7c <__pow5mult+0xac>)
 800fa06:	481e      	ldr	r0, [pc, #120]	; (800fa80 <__pow5mult+0xb0>)
 800fa08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fa0c:	f7fe fba6 	bl	800e15c <__assert_func>
 800fa10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa14:	6004      	str	r4, [r0, #0]
 800fa16:	60c4      	str	r4, [r0, #12]
 800fa18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fa1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa20:	b94c      	cbnz	r4, 800fa36 <__pow5mult+0x66>
 800fa22:	f240 2171 	movw	r1, #625	; 0x271
 800fa26:	4630      	mov	r0, r6
 800fa28:	f7ff ff12 	bl	800f850 <__i2b>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa32:	4604      	mov	r4, r0
 800fa34:	6003      	str	r3, [r0, #0]
 800fa36:	f04f 0900 	mov.w	r9, #0
 800fa3a:	07eb      	lsls	r3, r5, #31
 800fa3c:	d50a      	bpl.n	800fa54 <__pow5mult+0x84>
 800fa3e:	4639      	mov	r1, r7
 800fa40:	4622      	mov	r2, r4
 800fa42:	4630      	mov	r0, r6
 800fa44:	f7ff ff1a 	bl	800f87c <__multiply>
 800fa48:	4639      	mov	r1, r7
 800fa4a:	4680      	mov	r8, r0
 800fa4c:	4630      	mov	r0, r6
 800fa4e:	f7ff fdfd 	bl	800f64c <_Bfree>
 800fa52:	4647      	mov	r7, r8
 800fa54:	106d      	asrs	r5, r5, #1
 800fa56:	d00b      	beq.n	800fa70 <__pow5mult+0xa0>
 800fa58:	6820      	ldr	r0, [r4, #0]
 800fa5a:	b938      	cbnz	r0, 800fa6c <__pow5mult+0x9c>
 800fa5c:	4622      	mov	r2, r4
 800fa5e:	4621      	mov	r1, r4
 800fa60:	4630      	mov	r0, r6
 800fa62:	f7ff ff0b 	bl	800f87c <__multiply>
 800fa66:	6020      	str	r0, [r4, #0]
 800fa68:	f8c0 9000 	str.w	r9, [r0]
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	e7e4      	b.n	800fa3a <__pow5mult+0x6a>
 800fa70:	4638      	mov	r0, r7
 800fa72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa76:	bf00      	nop
 800fa78:	08011830 	.word	0x08011830
 800fa7c:	08011540 	.word	0x08011540
 800fa80:	080116e4 	.word	0x080116e4

0800fa84 <__lshift>:
 800fa84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa88:	460c      	mov	r4, r1
 800fa8a:	6849      	ldr	r1, [r1, #4]
 800fa8c:	6923      	ldr	r3, [r4, #16]
 800fa8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa92:	68a3      	ldr	r3, [r4, #8]
 800fa94:	4607      	mov	r7, r0
 800fa96:	4691      	mov	r9, r2
 800fa98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa9c:	f108 0601 	add.w	r6, r8, #1
 800faa0:	42b3      	cmp	r3, r6
 800faa2:	db0b      	blt.n	800fabc <__lshift+0x38>
 800faa4:	4638      	mov	r0, r7
 800faa6:	f7ff fd91 	bl	800f5cc <_Balloc>
 800faaa:	4605      	mov	r5, r0
 800faac:	b948      	cbnz	r0, 800fac2 <__lshift+0x3e>
 800faae:	4602      	mov	r2, r0
 800fab0:	4b2a      	ldr	r3, [pc, #168]	; (800fb5c <__lshift+0xd8>)
 800fab2:	482b      	ldr	r0, [pc, #172]	; (800fb60 <__lshift+0xdc>)
 800fab4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fab8:	f7fe fb50 	bl	800e15c <__assert_func>
 800fabc:	3101      	adds	r1, #1
 800fabe:	005b      	lsls	r3, r3, #1
 800fac0:	e7ee      	b.n	800faa0 <__lshift+0x1c>
 800fac2:	2300      	movs	r3, #0
 800fac4:	f100 0114 	add.w	r1, r0, #20
 800fac8:	f100 0210 	add.w	r2, r0, #16
 800facc:	4618      	mov	r0, r3
 800face:	4553      	cmp	r3, sl
 800fad0:	db37      	blt.n	800fb42 <__lshift+0xbe>
 800fad2:	6920      	ldr	r0, [r4, #16]
 800fad4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fad8:	f104 0314 	add.w	r3, r4, #20
 800fadc:	f019 091f 	ands.w	r9, r9, #31
 800fae0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fae4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fae8:	d02f      	beq.n	800fb4a <__lshift+0xc6>
 800faea:	f1c9 0e20 	rsb	lr, r9, #32
 800faee:	468a      	mov	sl, r1
 800faf0:	f04f 0c00 	mov.w	ip, #0
 800faf4:	681a      	ldr	r2, [r3, #0]
 800faf6:	fa02 f209 	lsl.w	r2, r2, r9
 800fafa:	ea42 020c 	orr.w	r2, r2, ip
 800fafe:	f84a 2b04 	str.w	r2, [sl], #4
 800fb02:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb06:	4298      	cmp	r0, r3
 800fb08:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fb0c:	d8f2      	bhi.n	800faf4 <__lshift+0x70>
 800fb0e:	1b03      	subs	r3, r0, r4
 800fb10:	3b15      	subs	r3, #21
 800fb12:	f023 0303 	bic.w	r3, r3, #3
 800fb16:	3304      	adds	r3, #4
 800fb18:	f104 0215 	add.w	r2, r4, #21
 800fb1c:	4290      	cmp	r0, r2
 800fb1e:	bf38      	it	cc
 800fb20:	2304      	movcc	r3, #4
 800fb22:	f841 c003 	str.w	ip, [r1, r3]
 800fb26:	f1bc 0f00 	cmp.w	ip, #0
 800fb2a:	d001      	beq.n	800fb30 <__lshift+0xac>
 800fb2c:	f108 0602 	add.w	r6, r8, #2
 800fb30:	3e01      	subs	r6, #1
 800fb32:	4638      	mov	r0, r7
 800fb34:	612e      	str	r6, [r5, #16]
 800fb36:	4621      	mov	r1, r4
 800fb38:	f7ff fd88 	bl	800f64c <_Bfree>
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb42:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb46:	3301      	adds	r3, #1
 800fb48:	e7c1      	b.n	800face <__lshift+0x4a>
 800fb4a:	3904      	subs	r1, #4
 800fb4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb50:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb54:	4298      	cmp	r0, r3
 800fb56:	d8f9      	bhi.n	800fb4c <__lshift+0xc8>
 800fb58:	e7ea      	b.n	800fb30 <__lshift+0xac>
 800fb5a:	bf00      	nop
 800fb5c:	08011658 	.word	0x08011658
 800fb60:	080116e4 	.word	0x080116e4

0800fb64 <__mcmp>:
 800fb64:	b530      	push	{r4, r5, lr}
 800fb66:	6902      	ldr	r2, [r0, #16]
 800fb68:	690c      	ldr	r4, [r1, #16]
 800fb6a:	1b12      	subs	r2, r2, r4
 800fb6c:	d10e      	bne.n	800fb8c <__mcmp+0x28>
 800fb6e:	f100 0314 	add.w	r3, r0, #20
 800fb72:	3114      	adds	r1, #20
 800fb74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fb78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fb7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fb80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fb84:	42a5      	cmp	r5, r4
 800fb86:	d003      	beq.n	800fb90 <__mcmp+0x2c>
 800fb88:	d305      	bcc.n	800fb96 <__mcmp+0x32>
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	4610      	mov	r0, r2
 800fb8e:	bd30      	pop	{r4, r5, pc}
 800fb90:	4283      	cmp	r3, r0
 800fb92:	d3f3      	bcc.n	800fb7c <__mcmp+0x18>
 800fb94:	e7fa      	b.n	800fb8c <__mcmp+0x28>
 800fb96:	f04f 32ff 	mov.w	r2, #4294967295
 800fb9a:	e7f7      	b.n	800fb8c <__mcmp+0x28>

0800fb9c <__mdiff>:
 800fb9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba0:	460c      	mov	r4, r1
 800fba2:	4606      	mov	r6, r0
 800fba4:	4611      	mov	r1, r2
 800fba6:	4620      	mov	r0, r4
 800fba8:	4690      	mov	r8, r2
 800fbaa:	f7ff ffdb 	bl	800fb64 <__mcmp>
 800fbae:	1e05      	subs	r5, r0, #0
 800fbb0:	d110      	bne.n	800fbd4 <__mdiff+0x38>
 800fbb2:	4629      	mov	r1, r5
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	f7ff fd09 	bl	800f5cc <_Balloc>
 800fbba:	b930      	cbnz	r0, 800fbca <__mdiff+0x2e>
 800fbbc:	4b3a      	ldr	r3, [pc, #232]	; (800fca8 <__mdiff+0x10c>)
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	f240 2132 	movw	r1, #562	; 0x232
 800fbc4:	4839      	ldr	r0, [pc, #228]	; (800fcac <__mdiff+0x110>)
 800fbc6:	f7fe fac9 	bl	800e15c <__assert_func>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fbd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbd4:	bfa4      	itt	ge
 800fbd6:	4643      	movge	r3, r8
 800fbd8:	46a0      	movge	r8, r4
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fbe0:	bfa6      	itte	ge
 800fbe2:	461c      	movge	r4, r3
 800fbe4:	2500      	movge	r5, #0
 800fbe6:	2501      	movlt	r5, #1
 800fbe8:	f7ff fcf0 	bl	800f5cc <_Balloc>
 800fbec:	b920      	cbnz	r0, 800fbf8 <__mdiff+0x5c>
 800fbee:	4b2e      	ldr	r3, [pc, #184]	; (800fca8 <__mdiff+0x10c>)
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fbf6:	e7e5      	b.n	800fbc4 <__mdiff+0x28>
 800fbf8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fbfc:	6926      	ldr	r6, [r4, #16]
 800fbfe:	60c5      	str	r5, [r0, #12]
 800fc00:	f104 0914 	add.w	r9, r4, #20
 800fc04:	f108 0514 	add.w	r5, r8, #20
 800fc08:	f100 0e14 	add.w	lr, r0, #20
 800fc0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fc10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fc14:	f108 0210 	add.w	r2, r8, #16
 800fc18:	46f2      	mov	sl, lr
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fc20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fc24:	fa1f f883 	uxth.w	r8, r3
 800fc28:	fa11 f18b 	uxtah	r1, r1, fp
 800fc2c:	0c1b      	lsrs	r3, r3, #16
 800fc2e:	eba1 0808 	sub.w	r8, r1, r8
 800fc32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fc36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fc3a:	fa1f f888 	uxth.w	r8, r8
 800fc3e:	1419      	asrs	r1, r3, #16
 800fc40:	454e      	cmp	r6, r9
 800fc42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fc46:	f84a 3b04 	str.w	r3, [sl], #4
 800fc4a:	d8e7      	bhi.n	800fc1c <__mdiff+0x80>
 800fc4c:	1b33      	subs	r3, r6, r4
 800fc4e:	3b15      	subs	r3, #21
 800fc50:	f023 0303 	bic.w	r3, r3, #3
 800fc54:	3304      	adds	r3, #4
 800fc56:	3415      	adds	r4, #21
 800fc58:	42a6      	cmp	r6, r4
 800fc5a:	bf38      	it	cc
 800fc5c:	2304      	movcc	r3, #4
 800fc5e:	441d      	add	r5, r3
 800fc60:	4473      	add	r3, lr
 800fc62:	469e      	mov	lr, r3
 800fc64:	462e      	mov	r6, r5
 800fc66:	4566      	cmp	r6, ip
 800fc68:	d30e      	bcc.n	800fc88 <__mdiff+0xec>
 800fc6a:	f10c 0203 	add.w	r2, ip, #3
 800fc6e:	1b52      	subs	r2, r2, r5
 800fc70:	f022 0203 	bic.w	r2, r2, #3
 800fc74:	3d03      	subs	r5, #3
 800fc76:	45ac      	cmp	ip, r5
 800fc78:	bf38      	it	cc
 800fc7a:	2200      	movcc	r2, #0
 800fc7c:	441a      	add	r2, r3
 800fc7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fc82:	b17b      	cbz	r3, 800fca4 <__mdiff+0x108>
 800fc84:	6107      	str	r7, [r0, #16]
 800fc86:	e7a3      	b.n	800fbd0 <__mdiff+0x34>
 800fc88:	f856 8b04 	ldr.w	r8, [r6], #4
 800fc8c:	fa11 f288 	uxtah	r2, r1, r8
 800fc90:	1414      	asrs	r4, r2, #16
 800fc92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fc96:	b292      	uxth	r2, r2
 800fc98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fc9c:	f84e 2b04 	str.w	r2, [lr], #4
 800fca0:	1421      	asrs	r1, r4, #16
 800fca2:	e7e0      	b.n	800fc66 <__mdiff+0xca>
 800fca4:	3f01      	subs	r7, #1
 800fca6:	e7ea      	b.n	800fc7e <__mdiff+0xe2>
 800fca8:	08011658 	.word	0x08011658
 800fcac:	080116e4 	.word	0x080116e4

0800fcb0 <__ulp>:
 800fcb0:	b082      	sub	sp, #8
 800fcb2:	ed8d 0b00 	vstr	d0, [sp]
 800fcb6:	9b01      	ldr	r3, [sp, #4]
 800fcb8:	4912      	ldr	r1, [pc, #72]	; (800fd04 <__ulp+0x54>)
 800fcba:	4019      	ands	r1, r3
 800fcbc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fcc0:	2900      	cmp	r1, #0
 800fcc2:	dd05      	ble.n	800fcd0 <__ulp+0x20>
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	ec43 2b10 	vmov	d0, r2, r3
 800fccc:	b002      	add	sp, #8
 800fcce:	4770      	bx	lr
 800fcd0:	4249      	negs	r1, r1
 800fcd2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fcd6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fcda:	f04f 0200 	mov.w	r2, #0
 800fcde:	f04f 0300 	mov.w	r3, #0
 800fce2:	da04      	bge.n	800fcee <__ulp+0x3e>
 800fce4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fce8:	fa41 f300 	asr.w	r3, r1, r0
 800fcec:	e7ec      	b.n	800fcc8 <__ulp+0x18>
 800fcee:	f1a0 0114 	sub.w	r1, r0, #20
 800fcf2:	291e      	cmp	r1, #30
 800fcf4:	bfda      	itte	le
 800fcf6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fcfa:	fa20 f101 	lsrle.w	r1, r0, r1
 800fcfe:	2101      	movgt	r1, #1
 800fd00:	460a      	mov	r2, r1
 800fd02:	e7e1      	b.n	800fcc8 <__ulp+0x18>
 800fd04:	7ff00000 	.word	0x7ff00000

0800fd08 <__b2d>:
 800fd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd0a:	6905      	ldr	r5, [r0, #16]
 800fd0c:	f100 0714 	add.w	r7, r0, #20
 800fd10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fd14:	1f2e      	subs	r6, r5, #4
 800fd16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	f7ff fd48 	bl	800f7b0 <__hi0bits>
 800fd20:	f1c0 0320 	rsb	r3, r0, #32
 800fd24:	280a      	cmp	r0, #10
 800fd26:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fda4 <__b2d+0x9c>
 800fd2a:	600b      	str	r3, [r1, #0]
 800fd2c:	dc14      	bgt.n	800fd58 <__b2d+0x50>
 800fd2e:	f1c0 0e0b 	rsb	lr, r0, #11
 800fd32:	fa24 f10e 	lsr.w	r1, r4, lr
 800fd36:	42b7      	cmp	r7, r6
 800fd38:	ea41 030c 	orr.w	r3, r1, ip
 800fd3c:	bf34      	ite	cc
 800fd3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd42:	2100      	movcs	r1, #0
 800fd44:	3015      	adds	r0, #21
 800fd46:	fa04 f000 	lsl.w	r0, r4, r0
 800fd4a:	fa21 f10e 	lsr.w	r1, r1, lr
 800fd4e:	ea40 0201 	orr.w	r2, r0, r1
 800fd52:	ec43 2b10 	vmov	d0, r2, r3
 800fd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd58:	42b7      	cmp	r7, r6
 800fd5a:	bf3a      	itte	cc
 800fd5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd60:	f1a5 0608 	subcc.w	r6, r5, #8
 800fd64:	2100      	movcs	r1, #0
 800fd66:	380b      	subs	r0, #11
 800fd68:	d017      	beq.n	800fd9a <__b2d+0x92>
 800fd6a:	f1c0 0c20 	rsb	ip, r0, #32
 800fd6e:	fa04 f500 	lsl.w	r5, r4, r0
 800fd72:	42be      	cmp	r6, r7
 800fd74:	fa21 f40c 	lsr.w	r4, r1, ip
 800fd78:	ea45 0504 	orr.w	r5, r5, r4
 800fd7c:	bf8c      	ite	hi
 800fd7e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fd82:	2400      	movls	r4, #0
 800fd84:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fd88:	fa01 f000 	lsl.w	r0, r1, r0
 800fd8c:	fa24 f40c 	lsr.w	r4, r4, ip
 800fd90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fd94:	ea40 0204 	orr.w	r2, r0, r4
 800fd98:	e7db      	b.n	800fd52 <__b2d+0x4a>
 800fd9a:	ea44 030c 	orr.w	r3, r4, ip
 800fd9e:	460a      	mov	r2, r1
 800fda0:	e7d7      	b.n	800fd52 <__b2d+0x4a>
 800fda2:	bf00      	nop
 800fda4:	3ff00000 	.word	0x3ff00000

0800fda8 <__d2b>:
 800fda8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fdac:	4689      	mov	r9, r1
 800fdae:	2101      	movs	r1, #1
 800fdb0:	ec57 6b10 	vmov	r6, r7, d0
 800fdb4:	4690      	mov	r8, r2
 800fdb6:	f7ff fc09 	bl	800f5cc <_Balloc>
 800fdba:	4604      	mov	r4, r0
 800fdbc:	b930      	cbnz	r0, 800fdcc <__d2b+0x24>
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	4b25      	ldr	r3, [pc, #148]	; (800fe58 <__d2b+0xb0>)
 800fdc2:	4826      	ldr	r0, [pc, #152]	; (800fe5c <__d2b+0xb4>)
 800fdc4:	f240 310a 	movw	r1, #778	; 0x30a
 800fdc8:	f7fe f9c8 	bl	800e15c <__assert_func>
 800fdcc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fdd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fdd4:	bb35      	cbnz	r5, 800fe24 <__d2b+0x7c>
 800fdd6:	2e00      	cmp	r6, #0
 800fdd8:	9301      	str	r3, [sp, #4]
 800fdda:	d028      	beq.n	800fe2e <__d2b+0x86>
 800fddc:	4668      	mov	r0, sp
 800fdde:	9600      	str	r6, [sp, #0]
 800fde0:	f7ff fd06 	bl	800f7f0 <__lo0bits>
 800fde4:	9900      	ldr	r1, [sp, #0]
 800fde6:	b300      	cbz	r0, 800fe2a <__d2b+0x82>
 800fde8:	9a01      	ldr	r2, [sp, #4]
 800fdea:	f1c0 0320 	rsb	r3, r0, #32
 800fdee:	fa02 f303 	lsl.w	r3, r2, r3
 800fdf2:	430b      	orrs	r3, r1
 800fdf4:	40c2      	lsrs	r2, r0
 800fdf6:	6163      	str	r3, [r4, #20]
 800fdf8:	9201      	str	r2, [sp, #4]
 800fdfa:	9b01      	ldr	r3, [sp, #4]
 800fdfc:	61a3      	str	r3, [r4, #24]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	bf14      	ite	ne
 800fe02:	2202      	movne	r2, #2
 800fe04:	2201      	moveq	r2, #1
 800fe06:	6122      	str	r2, [r4, #16]
 800fe08:	b1d5      	cbz	r5, 800fe40 <__d2b+0x98>
 800fe0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe0e:	4405      	add	r5, r0
 800fe10:	f8c9 5000 	str.w	r5, [r9]
 800fe14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe18:	f8c8 0000 	str.w	r0, [r8]
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	b003      	add	sp, #12
 800fe20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe28:	e7d5      	b.n	800fdd6 <__d2b+0x2e>
 800fe2a:	6161      	str	r1, [r4, #20]
 800fe2c:	e7e5      	b.n	800fdfa <__d2b+0x52>
 800fe2e:	a801      	add	r0, sp, #4
 800fe30:	f7ff fcde 	bl	800f7f0 <__lo0bits>
 800fe34:	9b01      	ldr	r3, [sp, #4]
 800fe36:	6163      	str	r3, [r4, #20]
 800fe38:	2201      	movs	r2, #1
 800fe3a:	6122      	str	r2, [r4, #16]
 800fe3c:	3020      	adds	r0, #32
 800fe3e:	e7e3      	b.n	800fe08 <__d2b+0x60>
 800fe40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe48:	f8c9 0000 	str.w	r0, [r9]
 800fe4c:	6918      	ldr	r0, [r3, #16]
 800fe4e:	f7ff fcaf 	bl	800f7b0 <__hi0bits>
 800fe52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe56:	e7df      	b.n	800fe18 <__d2b+0x70>
 800fe58:	08011658 	.word	0x08011658
 800fe5c:	080116e4 	.word	0x080116e4

0800fe60 <__ratio>:
 800fe60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe64:	4688      	mov	r8, r1
 800fe66:	4669      	mov	r1, sp
 800fe68:	4681      	mov	r9, r0
 800fe6a:	f7ff ff4d 	bl	800fd08 <__b2d>
 800fe6e:	a901      	add	r1, sp, #4
 800fe70:	4640      	mov	r0, r8
 800fe72:	ec55 4b10 	vmov	r4, r5, d0
 800fe76:	f7ff ff47 	bl	800fd08 <__b2d>
 800fe7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fe82:	eba3 0c02 	sub.w	ip, r3, r2
 800fe86:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fe8a:	1a9b      	subs	r3, r3, r2
 800fe8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fe90:	ec51 0b10 	vmov	r0, r1, d0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	bfd6      	itet	le
 800fe98:	460a      	movle	r2, r1
 800fe9a:	462a      	movgt	r2, r5
 800fe9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fea0:	468b      	mov	fp, r1
 800fea2:	462f      	mov	r7, r5
 800fea4:	bfd4      	ite	le
 800fea6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800feaa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800feae:	4620      	mov	r0, r4
 800feb0:	ee10 2a10 	vmov	r2, s0
 800feb4:	465b      	mov	r3, fp
 800feb6:	4639      	mov	r1, r7
 800feb8:	f7f0 fcc8 	bl	800084c <__aeabi_ddiv>
 800febc:	ec41 0b10 	vmov	d0, r0, r1
 800fec0:	b003      	add	sp, #12
 800fec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fec6 <__copybits>:
 800fec6:	3901      	subs	r1, #1
 800fec8:	b570      	push	{r4, r5, r6, lr}
 800feca:	1149      	asrs	r1, r1, #5
 800fecc:	6914      	ldr	r4, [r2, #16]
 800fece:	3101      	adds	r1, #1
 800fed0:	f102 0314 	add.w	r3, r2, #20
 800fed4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fed8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fedc:	1f05      	subs	r5, r0, #4
 800fede:	42a3      	cmp	r3, r4
 800fee0:	d30c      	bcc.n	800fefc <__copybits+0x36>
 800fee2:	1aa3      	subs	r3, r4, r2
 800fee4:	3b11      	subs	r3, #17
 800fee6:	f023 0303 	bic.w	r3, r3, #3
 800feea:	3211      	adds	r2, #17
 800feec:	42a2      	cmp	r2, r4
 800feee:	bf88      	it	hi
 800fef0:	2300      	movhi	r3, #0
 800fef2:	4418      	add	r0, r3
 800fef4:	2300      	movs	r3, #0
 800fef6:	4288      	cmp	r0, r1
 800fef8:	d305      	bcc.n	800ff06 <__copybits+0x40>
 800fefa:	bd70      	pop	{r4, r5, r6, pc}
 800fefc:	f853 6b04 	ldr.w	r6, [r3], #4
 800ff00:	f845 6f04 	str.w	r6, [r5, #4]!
 800ff04:	e7eb      	b.n	800fede <__copybits+0x18>
 800ff06:	f840 3b04 	str.w	r3, [r0], #4
 800ff0a:	e7f4      	b.n	800fef6 <__copybits+0x30>

0800ff0c <__any_on>:
 800ff0c:	f100 0214 	add.w	r2, r0, #20
 800ff10:	6900      	ldr	r0, [r0, #16]
 800ff12:	114b      	asrs	r3, r1, #5
 800ff14:	4298      	cmp	r0, r3
 800ff16:	b510      	push	{r4, lr}
 800ff18:	db11      	blt.n	800ff3e <__any_on+0x32>
 800ff1a:	dd0a      	ble.n	800ff32 <__any_on+0x26>
 800ff1c:	f011 011f 	ands.w	r1, r1, #31
 800ff20:	d007      	beq.n	800ff32 <__any_on+0x26>
 800ff22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ff26:	fa24 f001 	lsr.w	r0, r4, r1
 800ff2a:	fa00 f101 	lsl.w	r1, r0, r1
 800ff2e:	428c      	cmp	r4, r1
 800ff30:	d10b      	bne.n	800ff4a <__any_on+0x3e>
 800ff32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d803      	bhi.n	800ff42 <__any_on+0x36>
 800ff3a:	2000      	movs	r0, #0
 800ff3c:	bd10      	pop	{r4, pc}
 800ff3e:	4603      	mov	r3, r0
 800ff40:	e7f7      	b.n	800ff32 <__any_on+0x26>
 800ff42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff46:	2900      	cmp	r1, #0
 800ff48:	d0f5      	beq.n	800ff36 <__any_on+0x2a>
 800ff4a:	2001      	movs	r0, #1
 800ff4c:	e7f6      	b.n	800ff3c <__any_on+0x30>

0800ff4e <_calloc_r>:
 800ff4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff50:	fba1 2402 	umull	r2, r4, r1, r2
 800ff54:	b94c      	cbnz	r4, 800ff6a <_calloc_r+0x1c>
 800ff56:	4611      	mov	r1, r2
 800ff58:	9201      	str	r2, [sp, #4]
 800ff5a:	f000 f87b 	bl	8010054 <_malloc_r>
 800ff5e:	9a01      	ldr	r2, [sp, #4]
 800ff60:	4605      	mov	r5, r0
 800ff62:	b930      	cbnz	r0, 800ff72 <_calloc_r+0x24>
 800ff64:	4628      	mov	r0, r5
 800ff66:	b003      	add	sp, #12
 800ff68:	bd30      	pop	{r4, r5, pc}
 800ff6a:	220c      	movs	r2, #12
 800ff6c:	6002      	str	r2, [r0, #0]
 800ff6e:	2500      	movs	r5, #0
 800ff70:	e7f8      	b.n	800ff64 <_calloc_r+0x16>
 800ff72:	4621      	mov	r1, r4
 800ff74:	f7fc fdc4 	bl	800cb00 <memset>
 800ff78:	e7f4      	b.n	800ff64 <_calloc_r+0x16>
	...

0800ff7c <_free_r>:
 800ff7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff7e:	2900      	cmp	r1, #0
 800ff80:	d044      	beq.n	801000c <_free_r+0x90>
 800ff82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff86:	9001      	str	r0, [sp, #4]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	f1a1 0404 	sub.w	r4, r1, #4
 800ff8e:	bfb8      	it	lt
 800ff90:	18e4      	addlt	r4, r4, r3
 800ff92:	f000 fec5 	bl	8010d20 <__malloc_lock>
 800ff96:	4a1e      	ldr	r2, [pc, #120]	; (8010010 <_free_r+0x94>)
 800ff98:	9801      	ldr	r0, [sp, #4]
 800ff9a:	6813      	ldr	r3, [r2, #0]
 800ff9c:	b933      	cbnz	r3, 800ffac <_free_r+0x30>
 800ff9e:	6063      	str	r3, [r4, #4]
 800ffa0:	6014      	str	r4, [r2, #0]
 800ffa2:	b003      	add	sp, #12
 800ffa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffa8:	f000 bec0 	b.w	8010d2c <__malloc_unlock>
 800ffac:	42a3      	cmp	r3, r4
 800ffae:	d908      	bls.n	800ffc2 <_free_r+0x46>
 800ffb0:	6825      	ldr	r5, [r4, #0]
 800ffb2:	1961      	adds	r1, r4, r5
 800ffb4:	428b      	cmp	r3, r1
 800ffb6:	bf01      	itttt	eq
 800ffb8:	6819      	ldreq	r1, [r3, #0]
 800ffba:	685b      	ldreq	r3, [r3, #4]
 800ffbc:	1949      	addeq	r1, r1, r5
 800ffbe:	6021      	streq	r1, [r4, #0]
 800ffc0:	e7ed      	b.n	800ff9e <_free_r+0x22>
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	b10b      	cbz	r3, 800ffcc <_free_r+0x50>
 800ffc8:	42a3      	cmp	r3, r4
 800ffca:	d9fa      	bls.n	800ffc2 <_free_r+0x46>
 800ffcc:	6811      	ldr	r1, [r2, #0]
 800ffce:	1855      	adds	r5, r2, r1
 800ffd0:	42a5      	cmp	r5, r4
 800ffd2:	d10b      	bne.n	800ffec <_free_r+0x70>
 800ffd4:	6824      	ldr	r4, [r4, #0]
 800ffd6:	4421      	add	r1, r4
 800ffd8:	1854      	adds	r4, r2, r1
 800ffda:	42a3      	cmp	r3, r4
 800ffdc:	6011      	str	r1, [r2, #0]
 800ffde:	d1e0      	bne.n	800ffa2 <_free_r+0x26>
 800ffe0:	681c      	ldr	r4, [r3, #0]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	6053      	str	r3, [r2, #4]
 800ffe6:	4421      	add	r1, r4
 800ffe8:	6011      	str	r1, [r2, #0]
 800ffea:	e7da      	b.n	800ffa2 <_free_r+0x26>
 800ffec:	d902      	bls.n	800fff4 <_free_r+0x78>
 800ffee:	230c      	movs	r3, #12
 800fff0:	6003      	str	r3, [r0, #0]
 800fff2:	e7d6      	b.n	800ffa2 <_free_r+0x26>
 800fff4:	6825      	ldr	r5, [r4, #0]
 800fff6:	1961      	adds	r1, r4, r5
 800fff8:	428b      	cmp	r3, r1
 800fffa:	bf04      	itt	eq
 800fffc:	6819      	ldreq	r1, [r3, #0]
 800fffe:	685b      	ldreq	r3, [r3, #4]
 8010000:	6063      	str	r3, [r4, #4]
 8010002:	bf04      	itt	eq
 8010004:	1949      	addeq	r1, r1, r5
 8010006:	6021      	streq	r1, [r4, #0]
 8010008:	6054      	str	r4, [r2, #4]
 801000a:	e7ca      	b.n	800ffa2 <_free_r+0x26>
 801000c:	b003      	add	sp, #12
 801000e:	bd30      	pop	{r4, r5, pc}
 8010010:	200003c4 	.word	0x200003c4

08010014 <sbrk_aligned>:
 8010014:	b570      	push	{r4, r5, r6, lr}
 8010016:	4e0e      	ldr	r6, [pc, #56]	; (8010050 <sbrk_aligned+0x3c>)
 8010018:	460c      	mov	r4, r1
 801001a:	6831      	ldr	r1, [r6, #0]
 801001c:	4605      	mov	r5, r0
 801001e:	b911      	cbnz	r1, 8010026 <sbrk_aligned+0x12>
 8010020:	f000 fb4a 	bl	80106b8 <_sbrk_r>
 8010024:	6030      	str	r0, [r6, #0]
 8010026:	4621      	mov	r1, r4
 8010028:	4628      	mov	r0, r5
 801002a:	f000 fb45 	bl	80106b8 <_sbrk_r>
 801002e:	1c43      	adds	r3, r0, #1
 8010030:	d00a      	beq.n	8010048 <sbrk_aligned+0x34>
 8010032:	1cc4      	adds	r4, r0, #3
 8010034:	f024 0403 	bic.w	r4, r4, #3
 8010038:	42a0      	cmp	r0, r4
 801003a:	d007      	beq.n	801004c <sbrk_aligned+0x38>
 801003c:	1a21      	subs	r1, r4, r0
 801003e:	4628      	mov	r0, r5
 8010040:	f000 fb3a 	bl	80106b8 <_sbrk_r>
 8010044:	3001      	adds	r0, #1
 8010046:	d101      	bne.n	801004c <sbrk_aligned+0x38>
 8010048:	f04f 34ff 	mov.w	r4, #4294967295
 801004c:	4620      	mov	r0, r4
 801004e:	bd70      	pop	{r4, r5, r6, pc}
 8010050:	200003c8 	.word	0x200003c8

08010054 <_malloc_r>:
 8010054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010058:	1ccd      	adds	r5, r1, #3
 801005a:	f025 0503 	bic.w	r5, r5, #3
 801005e:	3508      	adds	r5, #8
 8010060:	2d0c      	cmp	r5, #12
 8010062:	bf38      	it	cc
 8010064:	250c      	movcc	r5, #12
 8010066:	2d00      	cmp	r5, #0
 8010068:	4607      	mov	r7, r0
 801006a:	db01      	blt.n	8010070 <_malloc_r+0x1c>
 801006c:	42a9      	cmp	r1, r5
 801006e:	d905      	bls.n	801007c <_malloc_r+0x28>
 8010070:	230c      	movs	r3, #12
 8010072:	603b      	str	r3, [r7, #0]
 8010074:	2600      	movs	r6, #0
 8010076:	4630      	mov	r0, r6
 8010078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801007c:	4e2e      	ldr	r6, [pc, #184]	; (8010138 <_malloc_r+0xe4>)
 801007e:	f000 fe4f 	bl	8010d20 <__malloc_lock>
 8010082:	6833      	ldr	r3, [r6, #0]
 8010084:	461c      	mov	r4, r3
 8010086:	bb34      	cbnz	r4, 80100d6 <_malloc_r+0x82>
 8010088:	4629      	mov	r1, r5
 801008a:	4638      	mov	r0, r7
 801008c:	f7ff ffc2 	bl	8010014 <sbrk_aligned>
 8010090:	1c43      	adds	r3, r0, #1
 8010092:	4604      	mov	r4, r0
 8010094:	d14d      	bne.n	8010132 <_malloc_r+0xde>
 8010096:	6834      	ldr	r4, [r6, #0]
 8010098:	4626      	mov	r6, r4
 801009a:	2e00      	cmp	r6, #0
 801009c:	d140      	bne.n	8010120 <_malloc_r+0xcc>
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	4631      	mov	r1, r6
 80100a2:	4638      	mov	r0, r7
 80100a4:	eb04 0803 	add.w	r8, r4, r3
 80100a8:	f000 fb06 	bl	80106b8 <_sbrk_r>
 80100ac:	4580      	cmp	r8, r0
 80100ae:	d13a      	bne.n	8010126 <_malloc_r+0xd2>
 80100b0:	6821      	ldr	r1, [r4, #0]
 80100b2:	3503      	adds	r5, #3
 80100b4:	1a6d      	subs	r5, r5, r1
 80100b6:	f025 0503 	bic.w	r5, r5, #3
 80100ba:	3508      	adds	r5, #8
 80100bc:	2d0c      	cmp	r5, #12
 80100be:	bf38      	it	cc
 80100c0:	250c      	movcc	r5, #12
 80100c2:	4629      	mov	r1, r5
 80100c4:	4638      	mov	r0, r7
 80100c6:	f7ff ffa5 	bl	8010014 <sbrk_aligned>
 80100ca:	3001      	adds	r0, #1
 80100cc:	d02b      	beq.n	8010126 <_malloc_r+0xd2>
 80100ce:	6823      	ldr	r3, [r4, #0]
 80100d0:	442b      	add	r3, r5
 80100d2:	6023      	str	r3, [r4, #0]
 80100d4:	e00e      	b.n	80100f4 <_malloc_r+0xa0>
 80100d6:	6822      	ldr	r2, [r4, #0]
 80100d8:	1b52      	subs	r2, r2, r5
 80100da:	d41e      	bmi.n	801011a <_malloc_r+0xc6>
 80100dc:	2a0b      	cmp	r2, #11
 80100de:	d916      	bls.n	801010e <_malloc_r+0xba>
 80100e0:	1961      	adds	r1, r4, r5
 80100e2:	42a3      	cmp	r3, r4
 80100e4:	6025      	str	r5, [r4, #0]
 80100e6:	bf18      	it	ne
 80100e8:	6059      	strne	r1, [r3, #4]
 80100ea:	6863      	ldr	r3, [r4, #4]
 80100ec:	bf08      	it	eq
 80100ee:	6031      	streq	r1, [r6, #0]
 80100f0:	5162      	str	r2, [r4, r5]
 80100f2:	604b      	str	r3, [r1, #4]
 80100f4:	4638      	mov	r0, r7
 80100f6:	f104 060b 	add.w	r6, r4, #11
 80100fa:	f000 fe17 	bl	8010d2c <__malloc_unlock>
 80100fe:	f026 0607 	bic.w	r6, r6, #7
 8010102:	1d23      	adds	r3, r4, #4
 8010104:	1af2      	subs	r2, r6, r3
 8010106:	d0b6      	beq.n	8010076 <_malloc_r+0x22>
 8010108:	1b9b      	subs	r3, r3, r6
 801010a:	50a3      	str	r3, [r4, r2]
 801010c:	e7b3      	b.n	8010076 <_malloc_r+0x22>
 801010e:	6862      	ldr	r2, [r4, #4]
 8010110:	42a3      	cmp	r3, r4
 8010112:	bf0c      	ite	eq
 8010114:	6032      	streq	r2, [r6, #0]
 8010116:	605a      	strne	r2, [r3, #4]
 8010118:	e7ec      	b.n	80100f4 <_malloc_r+0xa0>
 801011a:	4623      	mov	r3, r4
 801011c:	6864      	ldr	r4, [r4, #4]
 801011e:	e7b2      	b.n	8010086 <_malloc_r+0x32>
 8010120:	4634      	mov	r4, r6
 8010122:	6876      	ldr	r6, [r6, #4]
 8010124:	e7b9      	b.n	801009a <_malloc_r+0x46>
 8010126:	230c      	movs	r3, #12
 8010128:	603b      	str	r3, [r7, #0]
 801012a:	4638      	mov	r0, r7
 801012c:	f000 fdfe 	bl	8010d2c <__malloc_unlock>
 8010130:	e7a1      	b.n	8010076 <_malloc_r+0x22>
 8010132:	6025      	str	r5, [r4, #0]
 8010134:	e7de      	b.n	80100f4 <_malloc_r+0xa0>
 8010136:	bf00      	nop
 8010138:	200003c4 	.word	0x200003c4

0801013c <__ssputs_r>:
 801013c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010140:	688e      	ldr	r6, [r1, #8]
 8010142:	429e      	cmp	r6, r3
 8010144:	4682      	mov	sl, r0
 8010146:	460c      	mov	r4, r1
 8010148:	4690      	mov	r8, r2
 801014a:	461f      	mov	r7, r3
 801014c:	d838      	bhi.n	80101c0 <__ssputs_r+0x84>
 801014e:	898a      	ldrh	r2, [r1, #12]
 8010150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010154:	d032      	beq.n	80101bc <__ssputs_r+0x80>
 8010156:	6825      	ldr	r5, [r4, #0]
 8010158:	6909      	ldr	r1, [r1, #16]
 801015a:	eba5 0901 	sub.w	r9, r5, r1
 801015e:	6965      	ldr	r5, [r4, #20]
 8010160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010168:	3301      	adds	r3, #1
 801016a:	444b      	add	r3, r9
 801016c:	106d      	asrs	r5, r5, #1
 801016e:	429d      	cmp	r5, r3
 8010170:	bf38      	it	cc
 8010172:	461d      	movcc	r5, r3
 8010174:	0553      	lsls	r3, r2, #21
 8010176:	d531      	bpl.n	80101dc <__ssputs_r+0xa0>
 8010178:	4629      	mov	r1, r5
 801017a:	f7ff ff6b 	bl	8010054 <_malloc_r>
 801017e:	4606      	mov	r6, r0
 8010180:	b950      	cbnz	r0, 8010198 <__ssputs_r+0x5c>
 8010182:	230c      	movs	r3, #12
 8010184:	f8ca 3000 	str.w	r3, [sl]
 8010188:	89a3      	ldrh	r3, [r4, #12]
 801018a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801018e:	81a3      	strh	r3, [r4, #12]
 8010190:	f04f 30ff 	mov.w	r0, #4294967295
 8010194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010198:	6921      	ldr	r1, [r4, #16]
 801019a:	464a      	mov	r2, r9
 801019c:	f7fc fca2 	bl	800cae4 <memcpy>
 80101a0:	89a3      	ldrh	r3, [r4, #12]
 80101a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80101a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101aa:	81a3      	strh	r3, [r4, #12]
 80101ac:	6126      	str	r6, [r4, #16]
 80101ae:	6165      	str	r5, [r4, #20]
 80101b0:	444e      	add	r6, r9
 80101b2:	eba5 0509 	sub.w	r5, r5, r9
 80101b6:	6026      	str	r6, [r4, #0]
 80101b8:	60a5      	str	r5, [r4, #8]
 80101ba:	463e      	mov	r6, r7
 80101bc:	42be      	cmp	r6, r7
 80101be:	d900      	bls.n	80101c2 <__ssputs_r+0x86>
 80101c0:	463e      	mov	r6, r7
 80101c2:	6820      	ldr	r0, [r4, #0]
 80101c4:	4632      	mov	r2, r6
 80101c6:	4641      	mov	r1, r8
 80101c8:	f000 fd90 	bl	8010cec <memmove>
 80101cc:	68a3      	ldr	r3, [r4, #8]
 80101ce:	1b9b      	subs	r3, r3, r6
 80101d0:	60a3      	str	r3, [r4, #8]
 80101d2:	6823      	ldr	r3, [r4, #0]
 80101d4:	4433      	add	r3, r6
 80101d6:	6023      	str	r3, [r4, #0]
 80101d8:	2000      	movs	r0, #0
 80101da:	e7db      	b.n	8010194 <__ssputs_r+0x58>
 80101dc:	462a      	mov	r2, r5
 80101de:	f000 fdab 	bl	8010d38 <_realloc_r>
 80101e2:	4606      	mov	r6, r0
 80101e4:	2800      	cmp	r0, #0
 80101e6:	d1e1      	bne.n	80101ac <__ssputs_r+0x70>
 80101e8:	6921      	ldr	r1, [r4, #16]
 80101ea:	4650      	mov	r0, sl
 80101ec:	f7ff fec6 	bl	800ff7c <_free_r>
 80101f0:	e7c7      	b.n	8010182 <__ssputs_r+0x46>
	...

080101f4 <_svfiprintf_r>:
 80101f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f8:	4698      	mov	r8, r3
 80101fa:	898b      	ldrh	r3, [r1, #12]
 80101fc:	061b      	lsls	r3, r3, #24
 80101fe:	b09d      	sub	sp, #116	; 0x74
 8010200:	4607      	mov	r7, r0
 8010202:	460d      	mov	r5, r1
 8010204:	4614      	mov	r4, r2
 8010206:	d50e      	bpl.n	8010226 <_svfiprintf_r+0x32>
 8010208:	690b      	ldr	r3, [r1, #16]
 801020a:	b963      	cbnz	r3, 8010226 <_svfiprintf_r+0x32>
 801020c:	2140      	movs	r1, #64	; 0x40
 801020e:	f7ff ff21 	bl	8010054 <_malloc_r>
 8010212:	6028      	str	r0, [r5, #0]
 8010214:	6128      	str	r0, [r5, #16]
 8010216:	b920      	cbnz	r0, 8010222 <_svfiprintf_r+0x2e>
 8010218:	230c      	movs	r3, #12
 801021a:	603b      	str	r3, [r7, #0]
 801021c:	f04f 30ff 	mov.w	r0, #4294967295
 8010220:	e0d1      	b.n	80103c6 <_svfiprintf_r+0x1d2>
 8010222:	2340      	movs	r3, #64	; 0x40
 8010224:	616b      	str	r3, [r5, #20]
 8010226:	2300      	movs	r3, #0
 8010228:	9309      	str	r3, [sp, #36]	; 0x24
 801022a:	2320      	movs	r3, #32
 801022c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010230:	f8cd 800c 	str.w	r8, [sp, #12]
 8010234:	2330      	movs	r3, #48	; 0x30
 8010236:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80103e0 <_svfiprintf_r+0x1ec>
 801023a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801023e:	f04f 0901 	mov.w	r9, #1
 8010242:	4623      	mov	r3, r4
 8010244:	469a      	mov	sl, r3
 8010246:	f813 2b01 	ldrb.w	r2, [r3], #1
 801024a:	b10a      	cbz	r2, 8010250 <_svfiprintf_r+0x5c>
 801024c:	2a25      	cmp	r2, #37	; 0x25
 801024e:	d1f9      	bne.n	8010244 <_svfiprintf_r+0x50>
 8010250:	ebba 0b04 	subs.w	fp, sl, r4
 8010254:	d00b      	beq.n	801026e <_svfiprintf_r+0x7a>
 8010256:	465b      	mov	r3, fp
 8010258:	4622      	mov	r2, r4
 801025a:	4629      	mov	r1, r5
 801025c:	4638      	mov	r0, r7
 801025e:	f7ff ff6d 	bl	801013c <__ssputs_r>
 8010262:	3001      	adds	r0, #1
 8010264:	f000 80aa 	beq.w	80103bc <_svfiprintf_r+0x1c8>
 8010268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801026a:	445a      	add	r2, fp
 801026c:	9209      	str	r2, [sp, #36]	; 0x24
 801026e:	f89a 3000 	ldrb.w	r3, [sl]
 8010272:	2b00      	cmp	r3, #0
 8010274:	f000 80a2 	beq.w	80103bc <_svfiprintf_r+0x1c8>
 8010278:	2300      	movs	r3, #0
 801027a:	f04f 32ff 	mov.w	r2, #4294967295
 801027e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010282:	f10a 0a01 	add.w	sl, sl, #1
 8010286:	9304      	str	r3, [sp, #16]
 8010288:	9307      	str	r3, [sp, #28]
 801028a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801028e:	931a      	str	r3, [sp, #104]	; 0x68
 8010290:	4654      	mov	r4, sl
 8010292:	2205      	movs	r2, #5
 8010294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010298:	4851      	ldr	r0, [pc, #324]	; (80103e0 <_svfiprintf_r+0x1ec>)
 801029a:	f7ef ffa1 	bl	80001e0 <memchr>
 801029e:	9a04      	ldr	r2, [sp, #16]
 80102a0:	b9d8      	cbnz	r0, 80102da <_svfiprintf_r+0xe6>
 80102a2:	06d0      	lsls	r0, r2, #27
 80102a4:	bf44      	itt	mi
 80102a6:	2320      	movmi	r3, #32
 80102a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102ac:	0711      	lsls	r1, r2, #28
 80102ae:	bf44      	itt	mi
 80102b0:	232b      	movmi	r3, #43	; 0x2b
 80102b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102b6:	f89a 3000 	ldrb.w	r3, [sl]
 80102ba:	2b2a      	cmp	r3, #42	; 0x2a
 80102bc:	d015      	beq.n	80102ea <_svfiprintf_r+0xf6>
 80102be:	9a07      	ldr	r2, [sp, #28]
 80102c0:	4654      	mov	r4, sl
 80102c2:	2000      	movs	r0, #0
 80102c4:	f04f 0c0a 	mov.w	ip, #10
 80102c8:	4621      	mov	r1, r4
 80102ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102ce:	3b30      	subs	r3, #48	; 0x30
 80102d0:	2b09      	cmp	r3, #9
 80102d2:	d94e      	bls.n	8010372 <_svfiprintf_r+0x17e>
 80102d4:	b1b0      	cbz	r0, 8010304 <_svfiprintf_r+0x110>
 80102d6:	9207      	str	r2, [sp, #28]
 80102d8:	e014      	b.n	8010304 <_svfiprintf_r+0x110>
 80102da:	eba0 0308 	sub.w	r3, r0, r8
 80102de:	fa09 f303 	lsl.w	r3, r9, r3
 80102e2:	4313      	orrs	r3, r2
 80102e4:	9304      	str	r3, [sp, #16]
 80102e6:	46a2      	mov	sl, r4
 80102e8:	e7d2      	b.n	8010290 <_svfiprintf_r+0x9c>
 80102ea:	9b03      	ldr	r3, [sp, #12]
 80102ec:	1d19      	adds	r1, r3, #4
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	9103      	str	r1, [sp, #12]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	bfbb      	ittet	lt
 80102f6:	425b      	neglt	r3, r3
 80102f8:	f042 0202 	orrlt.w	r2, r2, #2
 80102fc:	9307      	strge	r3, [sp, #28]
 80102fe:	9307      	strlt	r3, [sp, #28]
 8010300:	bfb8      	it	lt
 8010302:	9204      	strlt	r2, [sp, #16]
 8010304:	7823      	ldrb	r3, [r4, #0]
 8010306:	2b2e      	cmp	r3, #46	; 0x2e
 8010308:	d10c      	bne.n	8010324 <_svfiprintf_r+0x130>
 801030a:	7863      	ldrb	r3, [r4, #1]
 801030c:	2b2a      	cmp	r3, #42	; 0x2a
 801030e:	d135      	bne.n	801037c <_svfiprintf_r+0x188>
 8010310:	9b03      	ldr	r3, [sp, #12]
 8010312:	1d1a      	adds	r2, r3, #4
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	9203      	str	r2, [sp, #12]
 8010318:	2b00      	cmp	r3, #0
 801031a:	bfb8      	it	lt
 801031c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010320:	3402      	adds	r4, #2
 8010322:	9305      	str	r3, [sp, #20]
 8010324:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80103f0 <_svfiprintf_r+0x1fc>
 8010328:	7821      	ldrb	r1, [r4, #0]
 801032a:	2203      	movs	r2, #3
 801032c:	4650      	mov	r0, sl
 801032e:	f7ef ff57 	bl	80001e0 <memchr>
 8010332:	b140      	cbz	r0, 8010346 <_svfiprintf_r+0x152>
 8010334:	2340      	movs	r3, #64	; 0x40
 8010336:	eba0 000a 	sub.w	r0, r0, sl
 801033a:	fa03 f000 	lsl.w	r0, r3, r0
 801033e:	9b04      	ldr	r3, [sp, #16]
 8010340:	4303      	orrs	r3, r0
 8010342:	3401      	adds	r4, #1
 8010344:	9304      	str	r3, [sp, #16]
 8010346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801034a:	4826      	ldr	r0, [pc, #152]	; (80103e4 <_svfiprintf_r+0x1f0>)
 801034c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010350:	2206      	movs	r2, #6
 8010352:	f7ef ff45 	bl	80001e0 <memchr>
 8010356:	2800      	cmp	r0, #0
 8010358:	d038      	beq.n	80103cc <_svfiprintf_r+0x1d8>
 801035a:	4b23      	ldr	r3, [pc, #140]	; (80103e8 <_svfiprintf_r+0x1f4>)
 801035c:	bb1b      	cbnz	r3, 80103a6 <_svfiprintf_r+0x1b2>
 801035e:	9b03      	ldr	r3, [sp, #12]
 8010360:	3307      	adds	r3, #7
 8010362:	f023 0307 	bic.w	r3, r3, #7
 8010366:	3308      	adds	r3, #8
 8010368:	9303      	str	r3, [sp, #12]
 801036a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801036c:	4433      	add	r3, r6
 801036e:	9309      	str	r3, [sp, #36]	; 0x24
 8010370:	e767      	b.n	8010242 <_svfiprintf_r+0x4e>
 8010372:	fb0c 3202 	mla	r2, ip, r2, r3
 8010376:	460c      	mov	r4, r1
 8010378:	2001      	movs	r0, #1
 801037a:	e7a5      	b.n	80102c8 <_svfiprintf_r+0xd4>
 801037c:	2300      	movs	r3, #0
 801037e:	3401      	adds	r4, #1
 8010380:	9305      	str	r3, [sp, #20]
 8010382:	4619      	mov	r1, r3
 8010384:	f04f 0c0a 	mov.w	ip, #10
 8010388:	4620      	mov	r0, r4
 801038a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801038e:	3a30      	subs	r2, #48	; 0x30
 8010390:	2a09      	cmp	r2, #9
 8010392:	d903      	bls.n	801039c <_svfiprintf_r+0x1a8>
 8010394:	2b00      	cmp	r3, #0
 8010396:	d0c5      	beq.n	8010324 <_svfiprintf_r+0x130>
 8010398:	9105      	str	r1, [sp, #20]
 801039a:	e7c3      	b.n	8010324 <_svfiprintf_r+0x130>
 801039c:	fb0c 2101 	mla	r1, ip, r1, r2
 80103a0:	4604      	mov	r4, r0
 80103a2:	2301      	movs	r3, #1
 80103a4:	e7f0      	b.n	8010388 <_svfiprintf_r+0x194>
 80103a6:	ab03      	add	r3, sp, #12
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	462a      	mov	r2, r5
 80103ac:	4b0f      	ldr	r3, [pc, #60]	; (80103ec <_svfiprintf_r+0x1f8>)
 80103ae:	a904      	add	r1, sp, #16
 80103b0:	4638      	mov	r0, r7
 80103b2:	f7fc fc4d 	bl	800cc50 <_printf_float>
 80103b6:	1c42      	adds	r2, r0, #1
 80103b8:	4606      	mov	r6, r0
 80103ba:	d1d6      	bne.n	801036a <_svfiprintf_r+0x176>
 80103bc:	89ab      	ldrh	r3, [r5, #12]
 80103be:	065b      	lsls	r3, r3, #25
 80103c0:	f53f af2c 	bmi.w	801021c <_svfiprintf_r+0x28>
 80103c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103c6:	b01d      	add	sp, #116	; 0x74
 80103c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103cc:	ab03      	add	r3, sp, #12
 80103ce:	9300      	str	r3, [sp, #0]
 80103d0:	462a      	mov	r2, r5
 80103d2:	4b06      	ldr	r3, [pc, #24]	; (80103ec <_svfiprintf_r+0x1f8>)
 80103d4:	a904      	add	r1, sp, #16
 80103d6:	4638      	mov	r0, r7
 80103d8:	f7fc fede 	bl	800d198 <_printf_i>
 80103dc:	e7eb      	b.n	80103b6 <_svfiprintf_r+0x1c2>
 80103de:	bf00      	nop
 80103e0:	0801183c 	.word	0x0801183c
 80103e4:	08011846 	.word	0x08011846
 80103e8:	0800cc51 	.word	0x0800cc51
 80103ec:	0801013d 	.word	0x0801013d
 80103f0:	08011842 	.word	0x08011842

080103f4 <__sfputc_r>:
 80103f4:	6893      	ldr	r3, [r2, #8]
 80103f6:	3b01      	subs	r3, #1
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	b410      	push	{r4}
 80103fc:	6093      	str	r3, [r2, #8]
 80103fe:	da08      	bge.n	8010412 <__sfputc_r+0x1e>
 8010400:	6994      	ldr	r4, [r2, #24]
 8010402:	42a3      	cmp	r3, r4
 8010404:	db01      	blt.n	801040a <__sfputc_r+0x16>
 8010406:	290a      	cmp	r1, #10
 8010408:	d103      	bne.n	8010412 <__sfputc_r+0x1e>
 801040a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801040e:	f000 b977 	b.w	8010700 <__swbuf_r>
 8010412:	6813      	ldr	r3, [r2, #0]
 8010414:	1c58      	adds	r0, r3, #1
 8010416:	6010      	str	r0, [r2, #0]
 8010418:	7019      	strb	r1, [r3, #0]
 801041a:	4608      	mov	r0, r1
 801041c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010420:	4770      	bx	lr

08010422 <__sfputs_r>:
 8010422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010424:	4606      	mov	r6, r0
 8010426:	460f      	mov	r7, r1
 8010428:	4614      	mov	r4, r2
 801042a:	18d5      	adds	r5, r2, r3
 801042c:	42ac      	cmp	r4, r5
 801042e:	d101      	bne.n	8010434 <__sfputs_r+0x12>
 8010430:	2000      	movs	r0, #0
 8010432:	e007      	b.n	8010444 <__sfputs_r+0x22>
 8010434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010438:	463a      	mov	r2, r7
 801043a:	4630      	mov	r0, r6
 801043c:	f7ff ffda 	bl	80103f4 <__sfputc_r>
 8010440:	1c43      	adds	r3, r0, #1
 8010442:	d1f3      	bne.n	801042c <__sfputs_r+0xa>
 8010444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010448 <_vfiprintf_r>:
 8010448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801044c:	460d      	mov	r5, r1
 801044e:	b09d      	sub	sp, #116	; 0x74
 8010450:	4614      	mov	r4, r2
 8010452:	4698      	mov	r8, r3
 8010454:	4606      	mov	r6, r0
 8010456:	b118      	cbz	r0, 8010460 <_vfiprintf_r+0x18>
 8010458:	6983      	ldr	r3, [r0, #24]
 801045a:	b90b      	cbnz	r3, 8010460 <_vfiprintf_r+0x18>
 801045c:	f000 fb40 	bl	8010ae0 <__sinit>
 8010460:	4b89      	ldr	r3, [pc, #548]	; (8010688 <_vfiprintf_r+0x240>)
 8010462:	429d      	cmp	r5, r3
 8010464:	d11b      	bne.n	801049e <_vfiprintf_r+0x56>
 8010466:	6875      	ldr	r5, [r6, #4]
 8010468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801046a:	07d9      	lsls	r1, r3, #31
 801046c:	d405      	bmi.n	801047a <_vfiprintf_r+0x32>
 801046e:	89ab      	ldrh	r3, [r5, #12]
 8010470:	059a      	lsls	r2, r3, #22
 8010472:	d402      	bmi.n	801047a <_vfiprintf_r+0x32>
 8010474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010476:	f000 fbd1 	bl	8010c1c <__retarget_lock_acquire_recursive>
 801047a:	89ab      	ldrh	r3, [r5, #12]
 801047c:	071b      	lsls	r3, r3, #28
 801047e:	d501      	bpl.n	8010484 <_vfiprintf_r+0x3c>
 8010480:	692b      	ldr	r3, [r5, #16]
 8010482:	b9eb      	cbnz	r3, 80104c0 <_vfiprintf_r+0x78>
 8010484:	4629      	mov	r1, r5
 8010486:	4630      	mov	r0, r6
 8010488:	f000 f99a 	bl	80107c0 <__swsetup_r>
 801048c:	b1c0      	cbz	r0, 80104c0 <_vfiprintf_r+0x78>
 801048e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010490:	07dc      	lsls	r4, r3, #31
 8010492:	d50e      	bpl.n	80104b2 <_vfiprintf_r+0x6a>
 8010494:	f04f 30ff 	mov.w	r0, #4294967295
 8010498:	b01d      	add	sp, #116	; 0x74
 801049a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801049e:	4b7b      	ldr	r3, [pc, #492]	; (801068c <_vfiprintf_r+0x244>)
 80104a0:	429d      	cmp	r5, r3
 80104a2:	d101      	bne.n	80104a8 <_vfiprintf_r+0x60>
 80104a4:	68b5      	ldr	r5, [r6, #8]
 80104a6:	e7df      	b.n	8010468 <_vfiprintf_r+0x20>
 80104a8:	4b79      	ldr	r3, [pc, #484]	; (8010690 <_vfiprintf_r+0x248>)
 80104aa:	429d      	cmp	r5, r3
 80104ac:	bf08      	it	eq
 80104ae:	68f5      	ldreq	r5, [r6, #12]
 80104b0:	e7da      	b.n	8010468 <_vfiprintf_r+0x20>
 80104b2:	89ab      	ldrh	r3, [r5, #12]
 80104b4:	0598      	lsls	r0, r3, #22
 80104b6:	d4ed      	bmi.n	8010494 <_vfiprintf_r+0x4c>
 80104b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104ba:	f000 fbb0 	bl	8010c1e <__retarget_lock_release_recursive>
 80104be:	e7e9      	b.n	8010494 <_vfiprintf_r+0x4c>
 80104c0:	2300      	movs	r3, #0
 80104c2:	9309      	str	r3, [sp, #36]	; 0x24
 80104c4:	2320      	movs	r3, #32
 80104c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80104ce:	2330      	movs	r3, #48	; 0x30
 80104d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010694 <_vfiprintf_r+0x24c>
 80104d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104d8:	f04f 0901 	mov.w	r9, #1
 80104dc:	4623      	mov	r3, r4
 80104de:	469a      	mov	sl, r3
 80104e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104e4:	b10a      	cbz	r2, 80104ea <_vfiprintf_r+0xa2>
 80104e6:	2a25      	cmp	r2, #37	; 0x25
 80104e8:	d1f9      	bne.n	80104de <_vfiprintf_r+0x96>
 80104ea:	ebba 0b04 	subs.w	fp, sl, r4
 80104ee:	d00b      	beq.n	8010508 <_vfiprintf_r+0xc0>
 80104f0:	465b      	mov	r3, fp
 80104f2:	4622      	mov	r2, r4
 80104f4:	4629      	mov	r1, r5
 80104f6:	4630      	mov	r0, r6
 80104f8:	f7ff ff93 	bl	8010422 <__sfputs_r>
 80104fc:	3001      	adds	r0, #1
 80104fe:	f000 80aa 	beq.w	8010656 <_vfiprintf_r+0x20e>
 8010502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010504:	445a      	add	r2, fp
 8010506:	9209      	str	r2, [sp, #36]	; 0x24
 8010508:	f89a 3000 	ldrb.w	r3, [sl]
 801050c:	2b00      	cmp	r3, #0
 801050e:	f000 80a2 	beq.w	8010656 <_vfiprintf_r+0x20e>
 8010512:	2300      	movs	r3, #0
 8010514:	f04f 32ff 	mov.w	r2, #4294967295
 8010518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801051c:	f10a 0a01 	add.w	sl, sl, #1
 8010520:	9304      	str	r3, [sp, #16]
 8010522:	9307      	str	r3, [sp, #28]
 8010524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010528:	931a      	str	r3, [sp, #104]	; 0x68
 801052a:	4654      	mov	r4, sl
 801052c:	2205      	movs	r2, #5
 801052e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010532:	4858      	ldr	r0, [pc, #352]	; (8010694 <_vfiprintf_r+0x24c>)
 8010534:	f7ef fe54 	bl	80001e0 <memchr>
 8010538:	9a04      	ldr	r2, [sp, #16]
 801053a:	b9d8      	cbnz	r0, 8010574 <_vfiprintf_r+0x12c>
 801053c:	06d1      	lsls	r1, r2, #27
 801053e:	bf44      	itt	mi
 8010540:	2320      	movmi	r3, #32
 8010542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010546:	0713      	lsls	r3, r2, #28
 8010548:	bf44      	itt	mi
 801054a:	232b      	movmi	r3, #43	; 0x2b
 801054c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010550:	f89a 3000 	ldrb.w	r3, [sl]
 8010554:	2b2a      	cmp	r3, #42	; 0x2a
 8010556:	d015      	beq.n	8010584 <_vfiprintf_r+0x13c>
 8010558:	9a07      	ldr	r2, [sp, #28]
 801055a:	4654      	mov	r4, sl
 801055c:	2000      	movs	r0, #0
 801055e:	f04f 0c0a 	mov.w	ip, #10
 8010562:	4621      	mov	r1, r4
 8010564:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010568:	3b30      	subs	r3, #48	; 0x30
 801056a:	2b09      	cmp	r3, #9
 801056c:	d94e      	bls.n	801060c <_vfiprintf_r+0x1c4>
 801056e:	b1b0      	cbz	r0, 801059e <_vfiprintf_r+0x156>
 8010570:	9207      	str	r2, [sp, #28]
 8010572:	e014      	b.n	801059e <_vfiprintf_r+0x156>
 8010574:	eba0 0308 	sub.w	r3, r0, r8
 8010578:	fa09 f303 	lsl.w	r3, r9, r3
 801057c:	4313      	orrs	r3, r2
 801057e:	9304      	str	r3, [sp, #16]
 8010580:	46a2      	mov	sl, r4
 8010582:	e7d2      	b.n	801052a <_vfiprintf_r+0xe2>
 8010584:	9b03      	ldr	r3, [sp, #12]
 8010586:	1d19      	adds	r1, r3, #4
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	9103      	str	r1, [sp, #12]
 801058c:	2b00      	cmp	r3, #0
 801058e:	bfbb      	ittet	lt
 8010590:	425b      	neglt	r3, r3
 8010592:	f042 0202 	orrlt.w	r2, r2, #2
 8010596:	9307      	strge	r3, [sp, #28]
 8010598:	9307      	strlt	r3, [sp, #28]
 801059a:	bfb8      	it	lt
 801059c:	9204      	strlt	r2, [sp, #16]
 801059e:	7823      	ldrb	r3, [r4, #0]
 80105a0:	2b2e      	cmp	r3, #46	; 0x2e
 80105a2:	d10c      	bne.n	80105be <_vfiprintf_r+0x176>
 80105a4:	7863      	ldrb	r3, [r4, #1]
 80105a6:	2b2a      	cmp	r3, #42	; 0x2a
 80105a8:	d135      	bne.n	8010616 <_vfiprintf_r+0x1ce>
 80105aa:	9b03      	ldr	r3, [sp, #12]
 80105ac:	1d1a      	adds	r2, r3, #4
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	9203      	str	r2, [sp, #12]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	bfb8      	it	lt
 80105b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80105ba:	3402      	adds	r4, #2
 80105bc:	9305      	str	r3, [sp, #20]
 80105be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80106a4 <_vfiprintf_r+0x25c>
 80105c2:	7821      	ldrb	r1, [r4, #0]
 80105c4:	2203      	movs	r2, #3
 80105c6:	4650      	mov	r0, sl
 80105c8:	f7ef fe0a 	bl	80001e0 <memchr>
 80105cc:	b140      	cbz	r0, 80105e0 <_vfiprintf_r+0x198>
 80105ce:	2340      	movs	r3, #64	; 0x40
 80105d0:	eba0 000a 	sub.w	r0, r0, sl
 80105d4:	fa03 f000 	lsl.w	r0, r3, r0
 80105d8:	9b04      	ldr	r3, [sp, #16]
 80105da:	4303      	orrs	r3, r0
 80105dc:	3401      	adds	r4, #1
 80105de:	9304      	str	r3, [sp, #16]
 80105e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105e4:	482c      	ldr	r0, [pc, #176]	; (8010698 <_vfiprintf_r+0x250>)
 80105e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105ea:	2206      	movs	r2, #6
 80105ec:	f7ef fdf8 	bl	80001e0 <memchr>
 80105f0:	2800      	cmp	r0, #0
 80105f2:	d03f      	beq.n	8010674 <_vfiprintf_r+0x22c>
 80105f4:	4b29      	ldr	r3, [pc, #164]	; (801069c <_vfiprintf_r+0x254>)
 80105f6:	bb1b      	cbnz	r3, 8010640 <_vfiprintf_r+0x1f8>
 80105f8:	9b03      	ldr	r3, [sp, #12]
 80105fa:	3307      	adds	r3, #7
 80105fc:	f023 0307 	bic.w	r3, r3, #7
 8010600:	3308      	adds	r3, #8
 8010602:	9303      	str	r3, [sp, #12]
 8010604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010606:	443b      	add	r3, r7
 8010608:	9309      	str	r3, [sp, #36]	; 0x24
 801060a:	e767      	b.n	80104dc <_vfiprintf_r+0x94>
 801060c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010610:	460c      	mov	r4, r1
 8010612:	2001      	movs	r0, #1
 8010614:	e7a5      	b.n	8010562 <_vfiprintf_r+0x11a>
 8010616:	2300      	movs	r3, #0
 8010618:	3401      	adds	r4, #1
 801061a:	9305      	str	r3, [sp, #20]
 801061c:	4619      	mov	r1, r3
 801061e:	f04f 0c0a 	mov.w	ip, #10
 8010622:	4620      	mov	r0, r4
 8010624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010628:	3a30      	subs	r2, #48	; 0x30
 801062a:	2a09      	cmp	r2, #9
 801062c:	d903      	bls.n	8010636 <_vfiprintf_r+0x1ee>
 801062e:	2b00      	cmp	r3, #0
 8010630:	d0c5      	beq.n	80105be <_vfiprintf_r+0x176>
 8010632:	9105      	str	r1, [sp, #20]
 8010634:	e7c3      	b.n	80105be <_vfiprintf_r+0x176>
 8010636:	fb0c 2101 	mla	r1, ip, r1, r2
 801063a:	4604      	mov	r4, r0
 801063c:	2301      	movs	r3, #1
 801063e:	e7f0      	b.n	8010622 <_vfiprintf_r+0x1da>
 8010640:	ab03      	add	r3, sp, #12
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	462a      	mov	r2, r5
 8010646:	4b16      	ldr	r3, [pc, #88]	; (80106a0 <_vfiprintf_r+0x258>)
 8010648:	a904      	add	r1, sp, #16
 801064a:	4630      	mov	r0, r6
 801064c:	f7fc fb00 	bl	800cc50 <_printf_float>
 8010650:	4607      	mov	r7, r0
 8010652:	1c78      	adds	r0, r7, #1
 8010654:	d1d6      	bne.n	8010604 <_vfiprintf_r+0x1bc>
 8010656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010658:	07d9      	lsls	r1, r3, #31
 801065a:	d405      	bmi.n	8010668 <_vfiprintf_r+0x220>
 801065c:	89ab      	ldrh	r3, [r5, #12]
 801065e:	059a      	lsls	r2, r3, #22
 8010660:	d402      	bmi.n	8010668 <_vfiprintf_r+0x220>
 8010662:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010664:	f000 fadb 	bl	8010c1e <__retarget_lock_release_recursive>
 8010668:	89ab      	ldrh	r3, [r5, #12]
 801066a:	065b      	lsls	r3, r3, #25
 801066c:	f53f af12 	bmi.w	8010494 <_vfiprintf_r+0x4c>
 8010670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010672:	e711      	b.n	8010498 <_vfiprintf_r+0x50>
 8010674:	ab03      	add	r3, sp, #12
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	462a      	mov	r2, r5
 801067a:	4b09      	ldr	r3, [pc, #36]	; (80106a0 <_vfiprintf_r+0x258>)
 801067c:	a904      	add	r1, sp, #16
 801067e:	4630      	mov	r0, r6
 8010680:	f7fc fd8a 	bl	800d198 <_printf_i>
 8010684:	e7e4      	b.n	8010650 <_vfiprintf_r+0x208>
 8010686:	bf00      	nop
 8010688:	08011970 	.word	0x08011970
 801068c:	08011990 	.word	0x08011990
 8010690:	08011950 	.word	0x08011950
 8010694:	0801183c 	.word	0x0801183c
 8010698:	08011846 	.word	0x08011846
 801069c:	0800cc51 	.word	0x0800cc51
 80106a0:	08010423 	.word	0x08010423
 80106a4:	08011842 	.word	0x08011842

080106a8 <nan>:
 80106a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80106b0 <nan+0x8>
 80106ac:	4770      	bx	lr
 80106ae:	bf00      	nop
 80106b0:	00000000 	.word	0x00000000
 80106b4:	7ff80000 	.word	0x7ff80000

080106b8 <_sbrk_r>:
 80106b8:	b538      	push	{r3, r4, r5, lr}
 80106ba:	4d06      	ldr	r5, [pc, #24]	; (80106d4 <_sbrk_r+0x1c>)
 80106bc:	2300      	movs	r3, #0
 80106be:	4604      	mov	r4, r0
 80106c0:	4608      	mov	r0, r1
 80106c2:	602b      	str	r3, [r5, #0]
 80106c4:	f7f9 f8d2 	bl	800986c <_sbrk>
 80106c8:	1c43      	adds	r3, r0, #1
 80106ca:	d102      	bne.n	80106d2 <_sbrk_r+0x1a>
 80106cc:	682b      	ldr	r3, [r5, #0]
 80106ce:	b103      	cbz	r3, 80106d2 <_sbrk_r+0x1a>
 80106d0:	6023      	str	r3, [r4, #0]
 80106d2:	bd38      	pop	{r3, r4, r5, pc}
 80106d4:	200003d0 	.word	0x200003d0

080106d8 <strncmp>:
 80106d8:	b510      	push	{r4, lr}
 80106da:	b17a      	cbz	r2, 80106fc <strncmp+0x24>
 80106dc:	4603      	mov	r3, r0
 80106de:	3901      	subs	r1, #1
 80106e0:	1884      	adds	r4, r0, r2
 80106e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80106e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80106ea:	4290      	cmp	r0, r2
 80106ec:	d101      	bne.n	80106f2 <strncmp+0x1a>
 80106ee:	42a3      	cmp	r3, r4
 80106f0:	d101      	bne.n	80106f6 <strncmp+0x1e>
 80106f2:	1a80      	subs	r0, r0, r2
 80106f4:	bd10      	pop	{r4, pc}
 80106f6:	2800      	cmp	r0, #0
 80106f8:	d1f3      	bne.n	80106e2 <strncmp+0xa>
 80106fa:	e7fa      	b.n	80106f2 <strncmp+0x1a>
 80106fc:	4610      	mov	r0, r2
 80106fe:	e7f9      	b.n	80106f4 <strncmp+0x1c>

08010700 <__swbuf_r>:
 8010700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010702:	460e      	mov	r6, r1
 8010704:	4614      	mov	r4, r2
 8010706:	4605      	mov	r5, r0
 8010708:	b118      	cbz	r0, 8010712 <__swbuf_r+0x12>
 801070a:	6983      	ldr	r3, [r0, #24]
 801070c:	b90b      	cbnz	r3, 8010712 <__swbuf_r+0x12>
 801070e:	f000 f9e7 	bl	8010ae0 <__sinit>
 8010712:	4b21      	ldr	r3, [pc, #132]	; (8010798 <__swbuf_r+0x98>)
 8010714:	429c      	cmp	r4, r3
 8010716:	d12b      	bne.n	8010770 <__swbuf_r+0x70>
 8010718:	686c      	ldr	r4, [r5, #4]
 801071a:	69a3      	ldr	r3, [r4, #24]
 801071c:	60a3      	str	r3, [r4, #8]
 801071e:	89a3      	ldrh	r3, [r4, #12]
 8010720:	071a      	lsls	r2, r3, #28
 8010722:	d52f      	bpl.n	8010784 <__swbuf_r+0x84>
 8010724:	6923      	ldr	r3, [r4, #16]
 8010726:	b36b      	cbz	r3, 8010784 <__swbuf_r+0x84>
 8010728:	6923      	ldr	r3, [r4, #16]
 801072a:	6820      	ldr	r0, [r4, #0]
 801072c:	1ac0      	subs	r0, r0, r3
 801072e:	6963      	ldr	r3, [r4, #20]
 8010730:	b2f6      	uxtb	r6, r6
 8010732:	4283      	cmp	r3, r0
 8010734:	4637      	mov	r7, r6
 8010736:	dc04      	bgt.n	8010742 <__swbuf_r+0x42>
 8010738:	4621      	mov	r1, r4
 801073a:	4628      	mov	r0, r5
 801073c:	f000 f93c 	bl	80109b8 <_fflush_r>
 8010740:	bb30      	cbnz	r0, 8010790 <__swbuf_r+0x90>
 8010742:	68a3      	ldr	r3, [r4, #8]
 8010744:	3b01      	subs	r3, #1
 8010746:	60a3      	str	r3, [r4, #8]
 8010748:	6823      	ldr	r3, [r4, #0]
 801074a:	1c5a      	adds	r2, r3, #1
 801074c:	6022      	str	r2, [r4, #0]
 801074e:	701e      	strb	r6, [r3, #0]
 8010750:	6963      	ldr	r3, [r4, #20]
 8010752:	3001      	adds	r0, #1
 8010754:	4283      	cmp	r3, r0
 8010756:	d004      	beq.n	8010762 <__swbuf_r+0x62>
 8010758:	89a3      	ldrh	r3, [r4, #12]
 801075a:	07db      	lsls	r3, r3, #31
 801075c:	d506      	bpl.n	801076c <__swbuf_r+0x6c>
 801075e:	2e0a      	cmp	r6, #10
 8010760:	d104      	bne.n	801076c <__swbuf_r+0x6c>
 8010762:	4621      	mov	r1, r4
 8010764:	4628      	mov	r0, r5
 8010766:	f000 f927 	bl	80109b8 <_fflush_r>
 801076a:	b988      	cbnz	r0, 8010790 <__swbuf_r+0x90>
 801076c:	4638      	mov	r0, r7
 801076e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010770:	4b0a      	ldr	r3, [pc, #40]	; (801079c <__swbuf_r+0x9c>)
 8010772:	429c      	cmp	r4, r3
 8010774:	d101      	bne.n	801077a <__swbuf_r+0x7a>
 8010776:	68ac      	ldr	r4, [r5, #8]
 8010778:	e7cf      	b.n	801071a <__swbuf_r+0x1a>
 801077a:	4b09      	ldr	r3, [pc, #36]	; (80107a0 <__swbuf_r+0xa0>)
 801077c:	429c      	cmp	r4, r3
 801077e:	bf08      	it	eq
 8010780:	68ec      	ldreq	r4, [r5, #12]
 8010782:	e7ca      	b.n	801071a <__swbuf_r+0x1a>
 8010784:	4621      	mov	r1, r4
 8010786:	4628      	mov	r0, r5
 8010788:	f000 f81a 	bl	80107c0 <__swsetup_r>
 801078c:	2800      	cmp	r0, #0
 801078e:	d0cb      	beq.n	8010728 <__swbuf_r+0x28>
 8010790:	f04f 37ff 	mov.w	r7, #4294967295
 8010794:	e7ea      	b.n	801076c <__swbuf_r+0x6c>
 8010796:	bf00      	nop
 8010798:	08011970 	.word	0x08011970
 801079c:	08011990 	.word	0x08011990
 80107a0:	08011950 	.word	0x08011950

080107a4 <__ascii_wctomb>:
 80107a4:	b149      	cbz	r1, 80107ba <__ascii_wctomb+0x16>
 80107a6:	2aff      	cmp	r2, #255	; 0xff
 80107a8:	bf85      	ittet	hi
 80107aa:	238a      	movhi	r3, #138	; 0x8a
 80107ac:	6003      	strhi	r3, [r0, #0]
 80107ae:	700a      	strbls	r2, [r1, #0]
 80107b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80107b4:	bf98      	it	ls
 80107b6:	2001      	movls	r0, #1
 80107b8:	4770      	bx	lr
 80107ba:	4608      	mov	r0, r1
 80107bc:	4770      	bx	lr
	...

080107c0 <__swsetup_r>:
 80107c0:	4b32      	ldr	r3, [pc, #200]	; (801088c <__swsetup_r+0xcc>)
 80107c2:	b570      	push	{r4, r5, r6, lr}
 80107c4:	681d      	ldr	r5, [r3, #0]
 80107c6:	4606      	mov	r6, r0
 80107c8:	460c      	mov	r4, r1
 80107ca:	b125      	cbz	r5, 80107d6 <__swsetup_r+0x16>
 80107cc:	69ab      	ldr	r3, [r5, #24]
 80107ce:	b913      	cbnz	r3, 80107d6 <__swsetup_r+0x16>
 80107d0:	4628      	mov	r0, r5
 80107d2:	f000 f985 	bl	8010ae0 <__sinit>
 80107d6:	4b2e      	ldr	r3, [pc, #184]	; (8010890 <__swsetup_r+0xd0>)
 80107d8:	429c      	cmp	r4, r3
 80107da:	d10f      	bne.n	80107fc <__swsetup_r+0x3c>
 80107dc:	686c      	ldr	r4, [r5, #4]
 80107de:	89a3      	ldrh	r3, [r4, #12]
 80107e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107e4:	0719      	lsls	r1, r3, #28
 80107e6:	d42c      	bmi.n	8010842 <__swsetup_r+0x82>
 80107e8:	06dd      	lsls	r5, r3, #27
 80107ea:	d411      	bmi.n	8010810 <__swsetup_r+0x50>
 80107ec:	2309      	movs	r3, #9
 80107ee:	6033      	str	r3, [r6, #0]
 80107f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107f4:	81a3      	strh	r3, [r4, #12]
 80107f6:	f04f 30ff 	mov.w	r0, #4294967295
 80107fa:	e03e      	b.n	801087a <__swsetup_r+0xba>
 80107fc:	4b25      	ldr	r3, [pc, #148]	; (8010894 <__swsetup_r+0xd4>)
 80107fe:	429c      	cmp	r4, r3
 8010800:	d101      	bne.n	8010806 <__swsetup_r+0x46>
 8010802:	68ac      	ldr	r4, [r5, #8]
 8010804:	e7eb      	b.n	80107de <__swsetup_r+0x1e>
 8010806:	4b24      	ldr	r3, [pc, #144]	; (8010898 <__swsetup_r+0xd8>)
 8010808:	429c      	cmp	r4, r3
 801080a:	bf08      	it	eq
 801080c:	68ec      	ldreq	r4, [r5, #12]
 801080e:	e7e6      	b.n	80107de <__swsetup_r+0x1e>
 8010810:	0758      	lsls	r0, r3, #29
 8010812:	d512      	bpl.n	801083a <__swsetup_r+0x7a>
 8010814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010816:	b141      	cbz	r1, 801082a <__swsetup_r+0x6a>
 8010818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801081c:	4299      	cmp	r1, r3
 801081e:	d002      	beq.n	8010826 <__swsetup_r+0x66>
 8010820:	4630      	mov	r0, r6
 8010822:	f7ff fbab 	bl	800ff7c <_free_r>
 8010826:	2300      	movs	r3, #0
 8010828:	6363      	str	r3, [r4, #52]	; 0x34
 801082a:	89a3      	ldrh	r3, [r4, #12]
 801082c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010830:	81a3      	strh	r3, [r4, #12]
 8010832:	2300      	movs	r3, #0
 8010834:	6063      	str	r3, [r4, #4]
 8010836:	6923      	ldr	r3, [r4, #16]
 8010838:	6023      	str	r3, [r4, #0]
 801083a:	89a3      	ldrh	r3, [r4, #12]
 801083c:	f043 0308 	orr.w	r3, r3, #8
 8010840:	81a3      	strh	r3, [r4, #12]
 8010842:	6923      	ldr	r3, [r4, #16]
 8010844:	b94b      	cbnz	r3, 801085a <__swsetup_r+0x9a>
 8010846:	89a3      	ldrh	r3, [r4, #12]
 8010848:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801084c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010850:	d003      	beq.n	801085a <__swsetup_r+0x9a>
 8010852:	4621      	mov	r1, r4
 8010854:	4630      	mov	r0, r6
 8010856:	f000 fa09 	bl	8010c6c <__smakebuf_r>
 801085a:	89a0      	ldrh	r0, [r4, #12]
 801085c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010860:	f010 0301 	ands.w	r3, r0, #1
 8010864:	d00a      	beq.n	801087c <__swsetup_r+0xbc>
 8010866:	2300      	movs	r3, #0
 8010868:	60a3      	str	r3, [r4, #8]
 801086a:	6963      	ldr	r3, [r4, #20]
 801086c:	425b      	negs	r3, r3
 801086e:	61a3      	str	r3, [r4, #24]
 8010870:	6923      	ldr	r3, [r4, #16]
 8010872:	b943      	cbnz	r3, 8010886 <__swsetup_r+0xc6>
 8010874:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010878:	d1ba      	bne.n	80107f0 <__swsetup_r+0x30>
 801087a:	bd70      	pop	{r4, r5, r6, pc}
 801087c:	0781      	lsls	r1, r0, #30
 801087e:	bf58      	it	pl
 8010880:	6963      	ldrpl	r3, [r4, #20]
 8010882:	60a3      	str	r3, [r4, #8]
 8010884:	e7f4      	b.n	8010870 <__swsetup_r+0xb0>
 8010886:	2000      	movs	r0, #0
 8010888:	e7f7      	b.n	801087a <__swsetup_r+0xba>
 801088a:	bf00      	nop
 801088c:	2000000c 	.word	0x2000000c
 8010890:	08011970 	.word	0x08011970
 8010894:	08011990 	.word	0x08011990
 8010898:	08011950 	.word	0x08011950

0801089c <abort>:
 801089c:	b508      	push	{r3, lr}
 801089e:	2006      	movs	r0, #6
 80108a0:	f000 faa2 	bl	8010de8 <raise>
 80108a4:	2001      	movs	r0, #1
 80108a6:	f7f8 ff69 	bl	800977c <_exit>
	...

080108ac <__sflush_r>:
 80108ac:	898a      	ldrh	r2, [r1, #12]
 80108ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108b2:	4605      	mov	r5, r0
 80108b4:	0710      	lsls	r0, r2, #28
 80108b6:	460c      	mov	r4, r1
 80108b8:	d458      	bmi.n	801096c <__sflush_r+0xc0>
 80108ba:	684b      	ldr	r3, [r1, #4]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dc05      	bgt.n	80108cc <__sflush_r+0x20>
 80108c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	dc02      	bgt.n	80108cc <__sflush_r+0x20>
 80108c6:	2000      	movs	r0, #0
 80108c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108ce:	2e00      	cmp	r6, #0
 80108d0:	d0f9      	beq.n	80108c6 <__sflush_r+0x1a>
 80108d2:	2300      	movs	r3, #0
 80108d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108d8:	682f      	ldr	r7, [r5, #0]
 80108da:	602b      	str	r3, [r5, #0]
 80108dc:	d032      	beq.n	8010944 <__sflush_r+0x98>
 80108de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108e0:	89a3      	ldrh	r3, [r4, #12]
 80108e2:	075a      	lsls	r2, r3, #29
 80108e4:	d505      	bpl.n	80108f2 <__sflush_r+0x46>
 80108e6:	6863      	ldr	r3, [r4, #4]
 80108e8:	1ac0      	subs	r0, r0, r3
 80108ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108ec:	b10b      	cbz	r3, 80108f2 <__sflush_r+0x46>
 80108ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108f0:	1ac0      	subs	r0, r0, r3
 80108f2:	2300      	movs	r3, #0
 80108f4:	4602      	mov	r2, r0
 80108f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108f8:	6a21      	ldr	r1, [r4, #32]
 80108fa:	4628      	mov	r0, r5
 80108fc:	47b0      	blx	r6
 80108fe:	1c43      	adds	r3, r0, #1
 8010900:	89a3      	ldrh	r3, [r4, #12]
 8010902:	d106      	bne.n	8010912 <__sflush_r+0x66>
 8010904:	6829      	ldr	r1, [r5, #0]
 8010906:	291d      	cmp	r1, #29
 8010908:	d82c      	bhi.n	8010964 <__sflush_r+0xb8>
 801090a:	4a2a      	ldr	r2, [pc, #168]	; (80109b4 <__sflush_r+0x108>)
 801090c:	40ca      	lsrs	r2, r1
 801090e:	07d6      	lsls	r6, r2, #31
 8010910:	d528      	bpl.n	8010964 <__sflush_r+0xb8>
 8010912:	2200      	movs	r2, #0
 8010914:	6062      	str	r2, [r4, #4]
 8010916:	04d9      	lsls	r1, r3, #19
 8010918:	6922      	ldr	r2, [r4, #16]
 801091a:	6022      	str	r2, [r4, #0]
 801091c:	d504      	bpl.n	8010928 <__sflush_r+0x7c>
 801091e:	1c42      	adds	r2, r0, #1
 8010920:	d101      	bne.n	8010926 <__sflush_r+0x7a>
 8010922:	682b      	ldr	r3, [r5, #0]
 8010924:	b903      	cbnz	r3, 8010928 <__sflush_r+0x7c>
 8010926:	6560      	str	r0, [r4, #84]	; 0x54
 8010928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801092a:	602f      	str	r7, [r5, #0]
 801092c:	2900      	cmp	r1, #0
 801092e:	d0ca      	beq.n	80108c6 <__sflush_r+0x1a>
 8010930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010934:	4299      	cmp	r1, r3
 8010936:	d002      	beq.n	801093e <__sflush_r+0x92>
 8010938:	4628      	mov	r0, r5
 801093a:	f7ff fb1f 	bl	800ff7c <_free_r>
 801093e:	2000      	movs	r0, #0
 8010940:	6360      	str	r0, [r4, #52]	; 0x34
 8010942:	e7c1      	b.n	80108c8 <__sflush_r+0x1c>
 8010944:	6a21      	ldr	r1, [r4, #32]
 8010946:	2301      	movs	r3, #1
 8010948:	4628      	mov	r0, r5
 801094a:	47b0      	blx	r6
 801094c:	1c41      	adds	r1, r0, #1
 801094e:	d1c7      	bne.n	80108e0 <__sflush_r+0x34>
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d0c4      	beq.n	80108e0 <__sflush_r+0x34>
 8010956:	2b1d      	cmp	r3, #29
 8010958:	d001      	beq.n	801095e <__sflush_r+0xb2>
 801095a:	2b16      	cmp	r3, #22
 801095c:	d101      	bne.n	8010962 <__sflush_r+0xb6>
 801095e:	602f      	str	r7, [r5, #0]
 8010960:	e7b1      	b.n	80108c6 <__sflush_r+0x1a>
 8010962:	89a3      	ldrh	r3, [r4, #12]
 8010964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010968:	81a3      	strh	r3, [r4, #12]
 801096a:	e7ad      	b.n	80108c8 <__sflush_r+0x1c>
 801096c:	690f      	ldr	r7, [r1, #16]
 801096e:	2f00      	cmp	r7, #0
 8010970:	d0a9      	beq.n	80108c6 <__sflush_r+0x1a>
 8010972:	0793      	lsls	r3, r2, #30
 8010974:	680e      	ldr	r6, [r1, #0]
 8010976:	bf08      	it	eq
 8010978:	694b      	ldreq	r3, [r1, #20]
 801097a:	600f      	str	r7, [r1, #0]
 801097c:	bf18      	it	ne
 801097e:	2300      	movne	r3, #0
 8010980:	eba6 0807 	sub.w	r8, r6, r7
 8010984:	608b      	str	r3, [r1, #8]
 8010986:	f1b8 0f00 	cmp.w	r8, #0
 801098a:	dd9c      	ble.n	80108c6 <__sflush_r+0x1a>
 801098c:	6a21      	ldr	r1, [r4, #32]
 801098e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010990:	4643      	mov	r3, r8
 8010992:	463a      	mov	r2, r7
 8010994:	4628      	mov	r0, r5
 8010996:	47b0      	blx	r6
 8010998:	2800      	cmp	r0, #0
 801099a:	dc06      	bgt.n	80109aa <__sflush_r+0xfe>
 801099c:	89a3      	ldrh	r3, [r4, #12]
 801099e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109a2:	81a3      	strh	r3, [r4, #12]
 80109a4:	f04f 30ff 	mov.w	r0, #4294967295
 80109a8:	e78e      	b.n	80108c8 <__sflush_r+0x1c>
 80109aa:	4407      	add	r7, r0
 80109ac:	eba8 0800 	sub.w	r8, r8, r0
 80109b0:	e7e9      	b.n	8010986 <__sflush_r+0xda>
 80109b2:	bf00      	nop
 80109b4:	20400001 	.word	0x20400001

080109b8 <_fflush_r>:
 80109b8:	b538      	push	{r3, r4, r5, lr}
 80109ba:	690b      	ldr	r3, [r1, #16]
 80109bc:	4605      	mov	r5, r0
 80109be:	460c      	mov	r4, r1
 80109c0:	b913      	cbnz	r3, 80109c8 <_fflush_r+0x10>
 80109c2:	2500      	movs	r5, #0
 80109c4:	4628      	mov	r0, r5
 80109c6:	bd38      	pop	{r3, r4, r5, pc}
 80109c8:	b118      	cbz	r0, 80109d2 <_fflush_r+0x1a>
 80109ca:	6983      	ldr	r3, [r0, #24]
 80109cc:	b90b      	cbnz	r3, 80109d2 <_fflush_r+0x1a>
 80109ce:	f000 f887 	bl	8010ae0 <__sinit>
 80109d2:	4b14      	ldr	r3, [pc, #80]	; (8010a24 <_fflush_r+0x6c>)
 80109d4:	429c      	cmp	r4, r3
 80109d6:	d11b      	bne.n	8010a10 <_fflush_r+0x58>
 80109d8:	686c      	ldr	r4, [r5, #4]
 80109da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d0ef      	beq.n	80109c2 <_fflush_r+0xa>
 80109e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109e4:	07d0      	lsls	r0, r2, #31
 80109e6:	d404      	bmi.n	80109f2 <_fflush_r+0x3a>
 80109e8:	0599      	lsls	r1, r3, #22
 80109ea:	d402      	bmi.n	80109f2 <_fflush_r+0x3a>
 80109ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109ee:	f000 f915 	bl	8010c1c <__retarget_lock_acquire_recursive>
 80109f2:	4628      	mov	r0, r5
 80109f4:	4621      	mov	r1, r4
 80109f6:	f7ff ff59 	bl	80108ac <__sflush_r>
 80109fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109fc:	07da      	lsls	r2, r3, #31
 80109fe:	4605      	mov	r5, r0
 8010a00:	d4e0      	bmi.n	80109c4 <_fflush_r+0xc>
 8010a02:	89a3      	ldrh	r3, [r4, #12]
 8010a04:	059b      	lsls	r3, r3, #22
 8010a06:	d4dd      	bmi.n	80109c4 <_fflush_r+0xc>
 8010a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a0a:	f000 f908 	bl	8010c1e <__retarget_lock_release_recursive>
 8010a0e:	e7d9      	b.n	80109c4 <_fflush_r+0xc>
 8010a10:	4b05      	ldr	r3, [pc, #20]	; (8010a28 <_fflush_r+0x70>)
 8010a12:	429c      	cmp	r4, r3
 8010a14:	d101      	bne.n	8010a1a <_fflush_r+0x62>
 8010a16:	68ac      	ldr	r4, [r5, #8]
 8010a18:	e7df      	b.n	80109da <_fflush_r+0x22>
 8010a1a:	4b04      	ldr	r3, [pc, #16]	; (8010a2c <_fflush_r+0x74>)
 8010a1c:	429c      	cmp	r4, r3
 8010a1e:	bf08      	it	eq
 8010a20:	68ec      	ldreq	r4, [r5, #12]
 8010a22:	e7da      	b.n	80109da <_fflush_r+0x22>
 8010a24:	08011970 	.word	0x08011970
 8010a28:	08011990 	.word	0x08011990
 8010a2c:	08011950 	.word	0x08011950

08010a30 <std>:
 8010a30:	2300      	movs	r3, #0
 8010a32:	b510      	push	{r4, lr}
 8010a34:	4604      	mov	r4, r0
 8010a36:	e9c0 3300 	strd	r3, r3, [r0]
 8010a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a3e:	6083      	str	r3, [r0, #8]
 8010a40:	8181      	strh	r1, [r0, #12]
 8010a42:	6643      	str	r3, [r0, #100]	; 0x64
 8010a44:	81c2      	strh	r2, [r0, #14]
 8010a46:	6183      	str	r3, [r0, #24]
 8010a48:	4619      	mov	r1, r3
 8010a4a:	2208      	movs	r2, #8
 8010a4c:	305c      	adds	r0, #92	; 0x5c
 8010a4e:	f7fc f857 	bl	800cb00 <memset>
 8010a52:	4b05      	ldr	r3, [pc, #20]	; (8010a68 <std+0x38>)
 8010a54:	6263      	str	r3, [r4, #36]	; 0x24
 8010a56:	4b05      	ldr	r3, [pc, #20]	; (8010a6c <std+0x3c>)
 8010a58:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a5a:	4b05      	ldr	r3, [pc, #20]	; (8010a70 <std+0x40>)
 8010a5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a5e:	4b05      	ldr	r3, [pc, #20]	; (8010a74 <std+0x44>)
 8010a60:	6224      	str	r4, [r4, #32]
 8010a62:	6323      	str	r3, [r4, #48]	; 0x30
 8010a64:	bd10      	pop	{r4, pc}
 8010a66:	bf00      	nop
 8010a68:	08010e21 	.word	0x08010e21
 8010a6c:	08010e43 	.word	0x08010e43
 8010a70:	08010e7b 	.word	0x08010e7b
 8010a74:	08010e9f 	.word	0x08010e9f

08010a78 <_cleanup_r>:
 8010a78:	4901      	ldr	r1, [pc, #4]	; (8010a80 <_cleanup_r+0x8>)
 8010a7a:	f000 b8af 	b.w	8010bdc <_fwalk_reent>
 8010a7e:	bf00      	nop
 8010a80:	080109b9 	.word	0x080109b9

08010a84 <__sfmoreglue>:
 8010a84:	b570      	push	{r4, r5, r6, lr}
 8010a86:	2268      	movs	r2, #104	; 0x68
 8010a88:	1e4d      	subs	r5, r1, #1
 8010a8a:	4355      	muls	r5, r2
 8010a8c:	460e      	mov	r6, r1
 8010a8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a92:	f7ff fadf 	bl	8010054 <_malloc_r>
 8010a96:	4604      	mov	r4, r0
 8010a98:	b140      	cbz	r0, 8010aac <__sfmoreglue+0x28>
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	e9c0 1600 	strd	r1, r6, [r0]
 8010aa0:	300c      	adds	r0, #12
 8010aa2:	60a0      	str	r0, [r4, #8]
 8010aa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010aa8:	f7fc f82a 	bl	800cb00 <memset>
 8010aac:	4620      	mov	r0, r4
 8010aae:	bd70      	pop	{r4, r5, r6, pc}

08010ab0 <__sfp_lock_acquire>:
 8010ab0:	4801      	ldr	r0, [pc, #4]	; (8010ab8 <__sfp_lock_acquire+0x8>)
 8010ab2:	f000 b8b3 	b.w	8010c1c <__retarget_lock_acquire_recursive>
 8010ab6:	bf00      	nop
 8010ab8:	200003cd 	.word	0x200003cd

08010abc <__sfp_lock_release>:
 8010abc:	4801      	ldr	r0, [pc, #4]	; (8010ac4 <__sfp_lock_release+0x8>)
 8010abe:	f000 b8ae 	b.w	8010c1e <__retarget_lock_release_recursive>
 8010ac2:	bf00      	nop
 8010ac4:	200003cd 	.word	0x200003cd

08010ac8 <__sinit_lock_acquire>:
 8010ac8:	4801      	ldr	r0, [pc, #4]	; (8010ad0 <__sinit_lock_acquire+0x8>)
 8010aca:	f000 b8a7 	b.w	8010c1c <__retarget_lock_acquire_recursive>
 8010ace:	bf00      	nop
 8010ad0:	200003ce 	.word	0x200003ce

08010ad4 <__sinit_lock_release>:
 8010ad4:	4801      	ldr	r0, [pc, #4]	; (8010adc <__sinit_lock_release+0x8>)
 8010ad6:	f000 b8a2 	b.w	8010c1e <__retarget_lock_release_recursive>
 8010ada:	bf00      	nop
 8010adc:	200003ce 	.word	0x200003ce

08010ae0 <__sinit>:
 8010ae0:	b510      	push	{r4, lr}
 8010ae2:	4604      	mov	r4, r0
 8010ae4:	f7ff fff0 	bl	8010ac8 <__sinit_lock_acquire>
 8010ae8:	69a3      	ldr	r3, [r4, #24]
 8010aea:	b11b      	cbz	r3, 8010af4 <__sinit+0x14>
 8010aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010af0:	f7ff bff0 	b.w	8010ad4 <__sinit_lock_release>
 8010af4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010af8:	6523      	str	r3, [r4, #80]	; 0x50
 8010afa:	4b13      	ldr	r3, [pc, #76]	; (8010b48 <__sinit+0x68>)
 8010afc:	4a13      	ldr	r2, [pc, #76]	; (8010b4c <__sinit+0x6c>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b02:	42a3      	cmp	r3, r4
 8010b04:	bf04      	itt	eq
 8010b06:	2301      	moveq	r3, #1
 8010b08:	61a3      	streq	r3, [r4, #24]
 8010b0a:	4620      	mov	r0, r4
 8010b0c:	f000 f820 	bl	8010b50 <__sfp>
 8010b10:	6060      	str	r0, [r4, #4]
 8010b12:	4620      	mov	r0, r4
 8010b14:	f000 f81c 	bl	8010b50 <__sfp>
 8010b18:	60a0      	str	r0, [r4, #8]
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	f000 f818 	bl	8010b50 <__sfp>
 8010b20:	2200      	movs	r2, #0
 8010b22:	60e0      	str	r0, [r4, #12]
 8010b24:	2104      	movs	r1, #4
 8010b26:	6860      	ldr	r0, [r4, #4]
 8010b28:	f7ff ff82 	bl	8010a30 <std>
 8010b2c:	68a0      	ldr	r0, [r4, #8]
 8010b2e:	2201      	movs	r2, #1
 8010b30:	2109      	movs	r1, #9
 8010b32:	f7ff ff7d 	bl	8010a30 <std>
 8010b36:	68e0      	ldr	r0, [r4, #12]
 8010b38:	2202      	movs	r2, #2
 8010b3a:	2112      	movs	r1, #18
 8010b3c:	f7ff ff78 	bl	8010a30 <std>
 8010b40:	2301      	movs	r3, #1
 8010b42:	61a3      	str	r3, [r4, #24]
 8010b44:	e7d2      	b.n	8010aec <__sinit+0xc>
 8010b46:	bf00      	nop
 8010b48:	080114b8 	.word	0x080114b8
 8010b4c:	08010a79 	.word	0x08010a79

08010b50 <__sfp>:
 8010b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b52:	4607      	mov	r7, r0
 8010b54:	f7ff ffac 	bl	8010ab0 <__sfp_lock_acquire>
 8010b58:	4b1e      	ldr	r3, [pc, #120]	; (8010bd4 <__sfp+0x84>)
 8010b5a:	681e      	ldr	r6, [r3, #0]
 8010b5c:	69b3      	ldr	r3, [r6, #24]
 8010b5e:	b913      	cbnz	r3, 8010b66 <__sfp+0x16>
 8010b60:	4630      	mov	r0, r6
 8010b62:	f7ff ffbd 	bl	8010ae0 <__sinit>
 8010b66:	3648      	adds	r6, #72	; 0x48
 8010b68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	d503      	bpl.n	8010b78 <__sfp+0x28>
 8010b70:	6833      	ldr	r3, [r6, #0]
 8010b72:	b30b      	cbz	r3, 8010bb8 <__sfp+0x68>
 8010b74:	6836      	ldr	r6, [r6, #0]
 8010b76:	e7f7      	b.n	8010b68 <__sfp+0x18>
 8010b78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b7c:	b9d5      	cbnz	r5, 8010bb4 <__sfp+0x64>
 8010b7e:	4b16      	ldr	r3, [pc, #88]	; (8010bd8 <__sfp+0x88>)
 8010b80:	60e3      	str	r3, [r4, #12]
 8010b82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b86:	6665      	str	r5, [r4, #100]	; 0x64
 8010b88:	f000 f847 	bl	8010c1a <__retarget_lock_init_recursive>
 8010b8c:	f7ff ff96 	bl	8010abc <__sfp_lock_release>
 8010b90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010b94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010b98:	6025      	str	r5, [r4, #0]
 8010b9a:	61a5      	str	r5, [r4, #24]
 8010b9c:	2208      	movs	r2, #8
 8010b9e:	4629      	mov	r1, r5
 8010ba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ba4:	f7fb ffac 	bl	800cb00 <memset>
 8010ba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010bac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bb4:	3468      	adds	r4, #104	; 0x68
 8010bb6:	e7d9      	b.n	8010b6c <__sfp+0x1c>
 8010bb8:	2104      	movs	r1, #4
 8010bba:	4638      	mov	r0, r7
 8010bbc:	f7ff ff62 	bl	8010a84 <__sfmoreglue>
 8010bc0:	4604      	mov	r4, r0
 8010bc2:	6030      	str	r0, [r6, #0]
 8010bc4:	2800      	cmp	r0, #0
 8010bc6:	d1d5      	bne.n	8010b74 <__sfp+0x24>
 8010bc8:	f7ff ff78 	bl	8010abc <__sfp_lock_release>
 8010bcc:	230c      	movs	r3, #12
 8010bce:	603b      	str	r3, [r7, #0]
 8010bd0:	e7ee      	b.n	8010bb0 <__sfp+0x60>
 8010bd2:	bf00      	nop
 8010bd4:	080114b8 	.word	0x080114b8
 8010bd8:	ffff0001 	.word	0xffff0001

08010bdc <_fwalk_reent>:
 8010bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010be0:	4606      	mov	r6, r0
 8010be2:	4688      	mov	r8, r1
 8010be4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010be8:	2700      	movs	r7, #0
 8010bea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010bee:	f1b9 0901 	subs.w	r9, r9, #1
 8010bf2:	d505      	bpl.n	8010c00 <_fwalk_reent+0x24>
 8010bf4:	6824      	ldr	r4, [r4, #0]
 8010bf6:	2c00      	cmp	r4, #0
 8010bf8:	d1f7      	bne.n	8010bea <_fwalk_reent+0xe>
 8010bfa:	4638      	mov	r0, r7
 8010bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c00:	89ab      	ldrh	r3, [r5, #12]
 8010c02:	2b01      	cmp	r3, #1
 8010c04:	d907      	bls.n	8010c16 <_fwalk_reent+0x3a>
 8010c06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	d003      	beq.n	8010c16 <_fwalk_reent+0x3a>
 8010c0e:	4629      	mov	r1, r5
 8010c10:	4630      	mov	r0, r6
 8010c12:	47c0      	blx	r8
 8010c14:	4307      	orrs	r7, r0
 8010c16:	3568      	adds	r5, #104	; 0x68
 8010c18:	e7e9      	b.n	8010bee <_fwalk_reent+0x12>

08010c1a <__retarget_lock_init_recursive>:
 8010c1a:	4770      	bx	lr

08010c1c <__retarget_lock_acquire_recursive>:
 8010c1c:	4770      	bx	lr

08010c1e <__retarget_lock_release_recursive>:
 8010c1e:	4770      	bx	lr

08010c20 <__swhatbuf_r>:
 8010c20:	b570      	push	{r4, r5, r6, lr}
 8010c22:	460e      	mov	r6, r1
 8010c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c28:	2900      	cmp	r1, #0
 8010c2a:	b096      	sub	sp, #88	; 0x58
 8010c2c:	4614      	mov	r4, r2
 8010c2e:	461d      	mov	r5, r3
 8010c30:	da08      	bge.n	8010c44 <__swhatbuf_r+0x24>
 8010c32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010c36:	2200      	movs	r2, #0
 8010c38:	602a      	str	r2, [r5, #0]
 8010c3a:	061a      	lsls	r2, r3, #24
 8010c3c:	d410      	bmi.n	8010c60 <__swhatbuf_r+0x40>
 8010c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c42:	e00e      	b.n	8010c62 <__swhatbuf_r+0x42>
 8010c44:	466a      	mov	r2, sp
 8010c46:	f000 f951 	bl	8010eec <_fstat_r>
 8010c4a:	2800      	cmp	r0, #0
 8010c4c:	dbf1      	blt.n	8010c32 <__swhatbuf_r+0x12>
 8010c4e:	9a01      	ldr	r2, [sp, #4]
 8010c50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c58:	425a      	negs	r2, r3
 8010c5a:	415a      	adcs	r2, r3
 8010c5c:	602a      	str	r2, [r5, #0]
 8010c5e:	e7ee      	b.n	8010c3e <__swhatbuf_r+0x1e>
 8010c60:	2340      	movs	r3, #64	; 0x40
 8010c62:	2000      	movs	r0, #0
 8010c64:	6023      	str	r3, [r4, #0]
 8010c66:	b016      	add	sp, #88	; 0x58
 8010c68:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c6c <__smakebuf_r>:
 8010c6c:	898b      	ldrh	r3, [r1, #12]
 8010c6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c70:	079d      	lsls	r5, r3, #30
 8010c72:	4606      	mov	r6, r0
 8010c74:	460c      	mov	r4, r1
 8010c76:	d507      	bpl.n	8010c88 <__smakebuf_r+0x1c>
 8010c78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c7c:	6023      	str	r3, [r4, #0]
 8010c7e:	6123      	str	r3, [r4, #16]
 8010c80:	2301      	movs	r3, #1
 8010c82:	6163      	str	r3, [r4, #20]
 8010c84:	b002      	add	sp, #8
 8010c86:	bd70      	pop	{r4, r5, r6, pc}
 8010c88:	ab01      	add	r3, sp, #4
 8010c8a:	466a      	mov	r2, sp
 8010c8c:	f7ff ffc8 	bl	8010c20 <__swhatbuf_r>
 8010c90:	9900      	ldr	r1, [sp, #0]
 8010c92:	4605      	mov	r5, r0
 8010c94:	4630      	mov	r0, r6
 8010c96:	f7ff f9dd 	bl	8010054 <_malloc_r>
 8010c9a:	b948      	cbnz	r0, 8010cb0 <__smakebuf_r+0x44>
 8010c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ca0:	059a      	lsls	r2, r3, #22
 8010ca2:	d4ef      	bmi.n	8010c84 <__smakebuf_r+0x18>
 8010ca4:	f023 0303 	bic.w	r3, r3, #3
 8010ca8:	f043 0302 	orr.w	r3, r3, #2
 8010cac:	81a3      	strh	r3, [r4, #12]
 8010cae:	e7e3      	b.n	8010c78 <__smakebuf_r+0xc>
 8010cb0:	4b0d      	ldr	r3, [pc, #52]	; (8010ce8 <__smakebuf_r+0x7c>)
 8010cb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8010cb4:	89a3      	ldrh	r3, [r4, #12]
 8010cb6:	6020      	str	r0, [r4, #0]
 8010cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cbc:	81a3      	strh	r3, [r4, #12]
 8010cbe:	9b00      	ldr	r3, [sp, #0]
 8010cc0:	6163      	str	r3, [r4, #20]
 8010cc2:	9b01      	ldr	r3, [sp, #4]
 8010cc4:	6120      	str	r0, [r4, #16]
 8010cc6:	b15b      	cbz	r3, 8010ce0 <__smakebuf_r+0x74>
 8010cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ccc:	4630      	mov	r0, r6
 8010cce:	f000 f91f 	bl	8010f10 <_isatty_r>
 8010cd2:	b128      	cbz	r0, 8010ce0 <__smakebuf_r+0x74>
 8010cd4:	89a3      	ldrh	r3, [r4, #12]
 8010cd6:	f023 0303 	bic.w	r3, r3, #3
 8010cda:	f043 0301 	orr.w	r3, r3, #1
 8010cde:	81a3      	strh	r3, [r4, #12]
 8010ce0:	89a0      	ldrh	r0, [r4, #12]
 8010ce2:	4305      	orrs	r5, r0
 8010ce4:	81a5      	strh	r5, [r4, #12]
 8010ce6:	e7cd      	b.n	8010c84 <__smakebuf_r+0x18>
 8010ce8:	08010a79 	.word	0x08010a79

08010cec <memmove>:
 8010cec:	4288      	cmp	r0, r1
 8010cee:	b510      	push	{r4, lr}
 8010cf0:	eb01 0402 	add.w	r4, r1, r2
 8010cf4:	d902      	bls.n	8010cfc <memmove+0x10>
 8010cf6:	4284      	cmp	r4, r0
 8010cf8:	4623      	mov	r3, r4
 8010cfa:	d807      	bhi.n	8010d0c <memmove+0x20>
 8010cfc:	1e43      	subs	r3, r0, #1
 8010cfe:	42a1      	cmp	r1, r4
 8010d00:	d008      	beq.n	8010d14 <memmove+0x28>
 8010d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d0a:	e7f8      	b.n	8010cfe <memmove+0x12>
 8010d0c:	4402      	add	r2, r0
 8010d0e:	4601      	mov	r1, r0
 8010d10:	428a      	cmp	r2, r1
 8010d12:	d100      	bne.n	8010d16 <memmove+0x2a>
 8010d14:	bd10      	pop	{r4, pc}
 8010d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d1e:	e7f7      	b.n	8010d10 <memmove+0x24>

08010d20 <__malloc_lock>:
 8010d20:	4801      	ldr	r0, [pc, #4]	; (8010d28 <__malloc_lock+0x8>)
 8010d22:	f7ff bf7b 	b.w	8010c1c <__retarget_lock_acquire_recursive>
 8010d26:	bf00      	nop
 8010d28:	200003cc 	.word	0x200003cc

08010d2c <__malloc_unlock>:
 8010d2c:	4801      	ldr	r0, [pc, #4]	; (8010d34 <__malloc_unlock+0x8>)
 8010d2e:	f7ff bf76 	b.w	8010c1e <__retarget_lock_release_recursive>
 8010d32:	bf00      	nop
 8010d34:	200003cc 	.word	0x200003cc

08010d38 <_realloc_r>:
 8010d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d3c:	4680      	mov	r8, r0
 8010d3e:	4614      	mov	r4, r2
 8010d40:	460e      	mov	r6, r1
 8010d42:	b921      	cbnz	r1, 8010d4e <_realloc_r+0x16>
 8010d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d48:	4611      	mov	r1, r2
 8010d4a:	f7ff b983 	b.w	8010054 <_malloc_r>
 8010d4e:	b92a      	cbnz	r2, 8010d5c <_realloc_r+0x24>
 8010d50:	f7ff f914 	bl	800ff7c <_free_r>
 8010d54:	4625      	mov	r5, r4
 8010d56:	4628      	mov	r0, r5
 8010d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d5c:	f000 f8fa 	bl	8010f54 <_malloc_usable_size_r>
 8010d60:	4284      	cmp	r4, r0
 8010d62:	4607      	mov	r7, r0
 8010d64:	d802      	bhi.n	8010d6c <_realloc_r+0x34>
 8010d66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010d6a:	d812      	bhi.n	8010d92 <_realloc_r+0x5a>
 8010d6c:	4621      	mov	r1, r4
 8010d6e:	4640      	mov	r0, r8
 8010d70:	f7ff f970 	bl	8010054 <_malloc_r>
 8010d74:	4605      	mov	r5, r0
 8010d76:	2800      	cmp	r0, #0
 8010d78:	d0ed      	beq.n	8010d56 <_realloc_r+0x1e>
 8010d7a:	42bc      	cmp	r4, r7
 8010d7c:	4622      	mov	r2, r4
 8010d7e:	4631      	mov	r1, r6
 8010d80:	bf28      	it	cs
 8010d82:	463a      	movcs	r2, r7
 8010d84:	f7fb feae 	bl	800cae4 <memcpy>
 8010d88:	4631      	mov	r1, r6
 8010d8a:	4640      	mov	r0, r8
 8010d8c:	f7ff f8f6 	bl	800ff7c <_free_r>
 8010d90:	e7e1      	b.n	8010d56 <_realloc_r+0x1e>
 8010d92:	4635      	mov	r5, r6
 8010d94:	e7df      	b.n	8010d56 <_realloc_r+0x1e>

08010d96 <_raise_r>:
 8010d96:	291f      	cmp	r1, #31
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	460d      	mov	r5, r1
 8010d9e:	d904      	bls.n	8010daa <_raise_r+0x14>
 8010da0:	2316      	movs	r3, #22
 8010da2:	6003      	str	r3, [r0, #0]
 8010da4:	f04f 30ff 	mov.w	r0, #4294967295
 8010da8:	bd38      	pop	{r3, r4, r5, pc}
 8010daa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010dac:	b112      	cbz	r2, 8010db4 <_raise_r+0x1e>
 8010dae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010db2:	b94b      	cbnz	r3, 8010dc8 <_raise_r+0x32>
 8010db4:	4620      	mov	r0, r4
 8010db6:	f000 f831 	bl	8010e1c <_getpid_r>
 8010dba:	462a      	mov	r2, r5
 8010dbc:	4601      	mov	r1, r0
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc4:	f000 b818 	b.w	8010df8 <_kill_r>
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d00a      	beq.n	8010de2 <_raise_r+0x4c>
 8010dcc:	1c59      	adds	r1, r3, #1
 8010dce:	d103      	bne.n	8010dd8 <_raise_r+0x42>
 8010dd0:	2316      	movs	r3, #22
 8010dd2:	6003      	str	r3, [r0, #0]
 8010dd4:	2001      	movs	r0, #1
 8010dd6:	e7e7      	b.n	8010da8 <_raise_r+0x12>
 8010dd8:	2400      	movs	r4, #0
 8010dda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010dde:	4628      	mov	r0, r5
 8010de0:	4798      	blx	r3
 8010de2:	2000      	movs	r0, #0
 8010de4:	e7e0      	b.n	8010da8 <_raise_r+0x12>
	...

08010de8 <raise>:
 8010de8:	4b02      	ldr	r3, [pc, #8]	; (8010df4 <raise+0xc>)
 8010dea:	4601      	mov	r1, r0
 8010dec:	6818      	ldr	r0, [r3, #0]
 8010dee:	f7ff bfd2 	b.w	8010d96 <_raise_r>
 8010df2:	bf00      	nop
 8010df4:	2000000c 	.word	0x2000000c

08010df8 <_kill_r>:
 8010df8:	b538      	push	{r3, r4, r5, lr}
 8010dfa:	4d07      	ldr	r5, [pc, #28]	; (8010e18 <_kill_r+0x20>)
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	4604      	mov	r4, r0
 8010e00:	4608      	mov	r0, r1
 8010e02:	4611      	mov	r1, r2
 8010e04:	602b      	str	r3, [r5, #0]
 8010e06:	f7f8 fca9 	bl	800975c <_kill>
 8010e0a:	1c43      	adds	r3, r0, #1
 8010e0c:	d102      	bne.n	8010e14 <_kill_r+0x1c>
 8010e0e:	682b      	ldr	r3, [r5, #0]
 8010e10:	b103      	cbz	r3, 8010e14 <_kill_r+0x1c>
 8010e12:	6023      	str	r3, [r4, #0]
 8010e14:	bd38      	pop	{r3, r4, r5, pc}
 8010e16:	bf00      	nop
 8010e18:	200003d0 	.word	0x200003d0

08010e1c <_getpid_r>:
 8010e1c:	f7f8 bc96 	b.w	800974c <_getpid>

08010e20 <__sread>:
 8010e20:	b510      	push	{r4, lr}
 8010e22:	460c      	mov	r4, r1
 8010e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e28:	f000 f89c 	bl	8010f64 <_read_r>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	bfab      	itete	ge
 8010e30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e32:	89a3      	ldrhlt	r3, [r4, #12]
 8010e34:	181b      	addge	r3, r3, r0
 8010e36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e3a:	bfac      	ite	ge
 8010e3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e3e:	81a3      	strhlt	r3, [r4, #12]
 8010e40:	bd10      	pop	{r4, pc}

08010e42 <__swrite>:
 8010e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e46:	461f      	mov	r7, r3
 8010e48:	898b      	ldrh	r3, [r1, #12]
 8010e4a:	05db      	lsls	r3, r3, #23
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	460c      	mov	r4, r1
 8010e50:	4616      	mov	r6, r2
 8010e52:	d505      	bpl.n	8010e60 <__swrite+0x1e>
 8010e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e58:	2302      	movs	r3, #2
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f000 f868 	bl	8010f30 <_lseek_r>
 8010e60:	89a3      	ldrh	r3, [r4, #12]
 8010e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e6a:	81a3      	strh	r3, [r4, #12]
 8010e6c:	4632      	mov	r2, r6
 8010e6e:	463b      	mov	r3, r7
 8010e70:	4628      	mov	r0, r5
 8010e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e76:	f000 b817 	b.w	8010ea8 <_write_r>

08010e7a <__sseek>:
 8010e7a:	b510      	push	{r4, lr}
 8010e7c:	460c      	mov	r4, r1
 8010e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e82:	f000 f855 	bl	8010f30 <_lseek_r>
 8010e86:	1c43      	adds	r3, r0, #1
 8010e88:	89a3      	ldrh	r3, [r4, #12]
 8010e8a:	bf15      	itete	ne
 8010e8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e96:	81a3      	strheq	r3, [r4, #12]
 8010e98:	bf18      	it	ne
 8010e9a:	81a3      	strhne	r3, [r4, #12]
 8010e9c:	bd10      	pop	{r4, pc}

08010e9e <__sclose>:
 8010e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ea2:	f000 b813 	b.w	8010ecc <_close_r>
	...

08010ea8 <_write_r>:
 8010ea8:	b538      	push	{r3, r4, r5, lr}
 8010eaa:	4d07      	ldr	r5, [pc, #28]	; (8010ec8 <_write_r+0x20>)
 8010eac:	4604      	mov	r4, r0
 8010eae:	4608      	mov	r0, r1
 8010eb0:	4611      	mov	r1, r2
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	602a      	str	r2, [r5, #0]
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	f7f8 fc87 	bl	80097ca <_write>
 8010ebc:	1c43      	adds	r3, r0, #1
 8010ebe:	d102      	bne.n	8010ec6 <_write_r+0x1e>
 8010ec0:	682b      	ldr	r3, [r5, #0]
 8010ec2:	b103      	cbz	r3, 8010ec6 <_write_r+0x1e>
 8010ec4:	6023      	str	r3, [r4, #0]
 8010ec6:	bd38      	pop	{r3, r4, r5, pc}
 8010ec8:	200003d0 	.word	0x200003d0

08010ecc <_close_r>:
 8010ecc:	b538      	push	{r3, r4, r5, lr}
 8010ece:	4d06      	ldr	r5, [pc, #24]	; (8010ee8 <_close_r+0x1c>)
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	4604      	mov	r4, r0
 8010ed4:	4608      	mov	r0, r1
 8010ed6:	602b      	str	r3, [r5, #0]
 8010ed8:	f7f8 fc93 	bl	8009802 <_close>
 8010edc:	1c43      	adds	r3, r0, #1
 8010ede:	d102      	bne.n	8010ee6 <_close_r+0x1a>
 8010ee0:	682b      	ldr	r3, [r5, #0]
 8010ee2:	b103      	cbz	r3, 8010ee6 <_close_r+0x1a>
 8010ee4:	6023      	str	r3, [r4, #0]
 8010ee6:	bd38      	pop	{r3, r4, r5, pc}
 8010ee8:	200003d0 	.word	0x200003d0

08010eec <_fstat_r>:
 8010eec:	b538      	push	{r3, r4, r5, lr}
 8010eee:	4d07      	ldr	r5, [pc, #28]	; (8010f0c <_fstat_r+0x20>)
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	4608      	mov	r0, r1
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	602b      	str	r3, [r5, #0]
 8010efa:	f7f8 fc8e 	bl	800981a <_fstat>
 8010efe:	1c43      	adds	r3, r0, #1
 8010f00:	d102      	bne.n	8010f08 <_fstat_r+0x1c>
 8010f02:	682b      	ldr	r3, [r5, #0]
 8010f04:	b103      	cbz	r3, 8010f08 <_fstat_r+0x1c>
 8010f06:	6023      	str	r3, [r4, #0]
 8010f08:	bd38      	pop	{r3, r4, r5, pc}
 8010f0a:	bf00      	nop
 8010f0c:	200003d0 	.word	0x200003d0

08010f10 <_isatty_r>:
 8010f10:	b538      	push	{r3, r4, r5, lr}
 8010f12:	4d06      	ldr	r5, [pc, #24]	; (8010f2c <_isatty_r+0x1c>)
 8010f14:	2300      	movs	r3, #0
 8010f16:	4604      	mov	r4, r0
 8010f18:	4608      	mov	r0, r1
 8010f1a:	602b      	str	r3, [r5, #0]
 8010f1c:	f7f8 fc8d 	bl	800983a <_isatty>
 8010f20:	1c43      	adds	r3, r0, #1
 8010f22:	d102      	bne.n	8010f2a <_isatty_r+0x1a>
 8010f24:	682b      	ldr	r3, [r5, #0]
 8010f26:	b103      	cbz	r3, 8010f2a <_isatty_r+0x1a>
 8010f28:	6023      	str	r3, [r4, #0]
 8010f2a:	bd38      	pop	{r3, r4, r5, pc}
 8010f2c:	200003d0 	.word	0x200003d0

08010f30 <_lseek_r>:
 8010f30:	b538      	push	{r3, r4, r5, lr}
 8010f32:	4d07      	ldr	r5, [pc, #28]	; (8010f50 <_lseek_r+0x20>)
 8010f34:	4604      	mov	r4, r0
 8010f36:	4608      	mov	r0, r1
 8010f38:	4611      	mov	r1, r2
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	602a      	str	r2, [r5, #0]
 8010f3e:	461a      	mov	r2, r3
 8010f40:	f7f8 fc86 	bl	8009850 <_lseek>
 8010f44:	1c43      	adds	r3, r0, #1
 8010f46:	d102      	bne.n	8010f4e <_lseek_r+0x1e>
 8010f48:	682b      	ldr	r3, [r5, #0]
 8010f4a:	b103      	cbz	r3, 8010f4e <_lseek_r+0x1e>
 8010f4c:	6023      	str	r3, [r4, #0]
 8010f4e:	bd38      	pop	{r3, r4, r5, pc}
 8010f50:	200003d0 	.word	0x200003d0

08010f54 <_malloc_usable_size_r>:
 8010f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f58:	1f18      	subs	r0, r3, #4
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	bfbc      	itt	lt
 8010f5e:	580b      	ldrlt	r3, [r1, r0]
 8010f60:	18c0      	addlt	r0, r0, r3
 8010f62:	4770      	bx	lr

08010f64 <_read_r>:
 8010f64:	b538      	push	{r3, r4, r5, lr}
 8010f66:	4d07      	ldr	r5, [pc, #28]	; (8010f84 <_read_r+0x20>)
 8010f68:	4604      	mov	r4, r0
 8010f6a:	4608      	mov	r0, r1
 8010f6c:	4611      	mov	r1, r2
 8010f6e:	2200      	movs	r2, #0
 8010f70:	602a      	str	r2, [r5, #0]
 8010f72:	461a      	mov	r2, r3
 8010f74:	f7f8 fc0c 	bl	8009790 <_read>
 8010f78:	1c43      	adds	r3, r0, #1
 8010f7a:	d102      	bne.n	8010f82 <_read_r+0x1e>
 8010f7c:	682b      	ldr	r3, [r5, #0]
 8010f7e:	b103      	cbz	r3, 8010f82 <_read_r+0x1e>
 8010f80:	6023      	str	r3, [r4, #0]
 8010f82:	bd38      	pop	{r3, r4, r5, pc}
 8010f84:	200003d0 	.word	0x200003d0

08010f88 <fmax>:
 8010f88:	b508      	push	{r3, lr}
 8010f8a:	ed2d 8b04 	vpush	{d8-d9}
 8010f8e:	eeb0 8a40 	vmov.f32	s16, s0
 8010f92:	eef0 8a60 	vmov.f32	s17, s1
 8010f96:	eeb0 9a41 	vmov.f32	s18, s2
 8010f9a:	eef0 9a61 	vmov.f32	s19, s3
 8010f9e:	f000 f81b 	bl	8010fd8 <__fpclassifyd>
 8010fa2:	b168      	cbz	r0, 8010fc0 <fmax+0x38>
 8010fa4:	eeb0 0a49 	vmov.f32	s0, s18
 8010fa8:	eef0 0a69 	vmov.f32	s1, s19
 8010fac:	f000 f814 	bl	8010fd8 <__fpclassifyd>
 8010fb0:	b150      	cbz	r0, 8010fc8 <fmax+0x40>
 8010fb2:	ec53 2b19 	vmov	r2, r3, d9
 8010fb6:	ec51 0b18 	vmov	r0, r1, d8
 8010fba:	f7ef fdad 	bl	8000b18 <__aeabi_dcmpgt>
 8010fbe:	b918      	cbnz	r0, 8010fc8 <fmax+0x40>
 8010fc0:	eeb0 8a49 	vmov.f32	s16, s18
 8010fc4:	eef0 8a69 	vmov.f32	s17, s19
 8010fc8:	eeb0 0a48 	vmov.f32	s0, s16
 8010fcc:	eef0 0a68 	vmov.f32	s1, s17
 8010fd0:	ecbd 8b04 	vpop	{d8-d9}
 8010fd4:	bd08      	pop	{r3, pc}
	...

08010fd8 <__fpclassifyd>:
 8010fd8:	ec51 0b10 	vmov	r0, r1, d0
 8010fdc:	b510      	push	{r4, lr}
 8010fde:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8010fe2:	460b      	mov	r3, r1
 8010fe4:	d019      	beq.n	801101a <__fpclassifyd+0x42>
 8010fe6:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8010fea:	490e      	ldr	r1, [pc, #56]	; (8011024 <__fpclassifyd+0x4c>)
 8010fec:	428a      	cmp	r2, r1
 8010fee:	d90e      	bls.n	801100e <__fpclassifyd+0x36>
 8010ff0:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8010ff4:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8010ff8:	428a      	cmp	r2, r1
 8010ffa:	d908      	bls.n	801100e <__fpclassifyd+0x36>
 8010ffc:	4a0a      	ldr	r2, [pc, #40]	; (8011028 <__fpclassifyd+0x50>)
 8010ffe:	4213      	tst	r3, r2
 8011000:	d007      	beq.n	8011012 <__fpclassifyd+0x3a>
 8011002:	4294      	cmp	r4, r2
 8011004:	d107      	bne.n	8011016 <__fpclassifyd+0x3e>
 8011006:	fab0 f080 	clz	r0, r0
 801100a:	0940      	lsrs	r0, r0, #5
 801100c:	bd10      	pop	{r4, pc}
 801100e:	2004      	movs	r0, #4
 8011010:	e7fc      	b.n	801100c <__fpclassifyd+0x34>
 8011012:	2003      	movs	r0, #3
 8011014:	e7fa      	b.n	801100c <__fpclassifyd+0x34>
 8011016:	2000      	movs	r0, #0
 8011018:	e7f8      	b.n	801100c <__fpclassifyd+0x34>
 801101a:	2800      	cmp	r0, #0
 801101c:	d1ee      	bne.n	8010ffc <__fpclassifyd+0x24>
 801101e:	2002      	movs	r0, #2
 8011020:	e7f4      	b.n	801100c <__fpclassifyd+0x34>
 8011022:	bf00      	nop
 8011024:	7fdfffff 	.word	0x7fdfffff
 8011028:	7ff00000 	.word	0x7ff00000

0801102c <sqrt>:
 801102c:	b538      	push	{r3, r4, r5, lr}
 801102e:	ed2d 8b02 	vpush	{d8}
 8011032:	ec55 4b10 	vmov	r4, r5, d0
 8011036:	f000 f825 	bl	8011084 <__ieee754_sqrt>
 801103a:	4622      	mov	r2, r4
 801103c:	462b      	mov	r3, r5
 801103e:	4620      	mov	r0, r4
 8011040:	4629      	mov	r1, r5
 8011042:	eeb0 8a40 	vmov.f32	s16, s0
 8011046:	eef0 8a60 	vmov.f32	s17, s1
 801104a:	f7ef fd6f 	bl	8000b2c <__aeabi_dcmpun>
 801104e:	b990      	cbnz	r0, 8011076 <sqrt+0x4a>
 8011050:	2200      	movs	r2, #0
 8011052:	2300      	movs	r3, #0
 8011054:	4620      	mov	r0, r4
 8011056:	4629      	mov	r1, r5
 8011058:	f7ef fd40 	bl	8000adc <__aeabi_dcmplt>
 801105c:	b158      	cbz	r0, 8011076 <sqrt+0x4a>
 801105e:	f7fb fd17 	bl	800ca90 <__errno>
 8011062:	2321      	movs	r3, #33	; 0x21
 8011064:	6003      	str	r3, [r0, #0]
 8011066:	2200      	movs	r2, #0
 8011068:	2300      	movs	r3, #0
 801106a:	4610      	mov	r0, r2
 801106c:	4619      	mov	r1, r3
 801106e:	f7ef fbed 	bl	800084c <__aeabi_ddiv>
 8011072:	ec41 0b18 	vmov	d8, r0, r1
 8011076:	eeb0 0a48 	vmov.f32	s0, s16
 801107a:	eef0 0a68 	vmov.f32	s1, s17
 801107e:	ecbd 8b02 	vpop	{d8}
 8011082:	bd38      	pop	{r3, r4, r5, pc}

08011084 <__ieee754_sqrt>:
 8011084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011088:	ec55 4b10 	vmov	r4, r5, d0
 801108c:	4e55      	ldr	r6, [pc, #340]	; (80111e4 <__ieee754_sqrt+0x160>)
 801108e:	43ae      	bics	r6, r5
 8011090:	ee10 0a10 	vmov	r0, s0
 8011094:	ee10 3a10 	vmov	r3, s0
 8011098:	462a      	mov	r2, r5
 801109a:	4629      	mov	r1, r5
 801109c:	d110      	bne.n	80110c0 <__ieee754_sqrt+0x3c>
 801109e:	ee10 2a10 	vmov	r2, s0
 80110a2:	462b      	mov	r3, r5
 80110a4:	f7ef faa8 	bl	80005f8 <__aeabi_dmul>
 80110a8:	4602      	mov	r2, r0
 80110aa:	460b      	mov	r3, r1
 80110ac:	4620      	mov	r0, r4
 80110ae:	4629      	mov	r1, r5
 80110b0:	f7ef f8ec 	bl	800028c <__adddf3>
 80110b4:	4604      	mov	r4, r0
 80110b6:	460d      	mov	r5, r1
 80110b8:	ec45 4b10 	vmov	d0, r4, r5
 80110bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110c0:	2d00      	cmp	r5, #0
 80110c2:	dc10      	bgt.n	80110e6 <__ieee754_sqrt+0x62>
 80110c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110c8:	4330      	orrs	r0, r6
 80110ca:	d0f5      	beq.n	80110b8 <__ieee754_sqrt+0x34>
 80110cc:	b15d      	cbz	r5, 80110e6 <__ieee754_sqrt+0x62>
 80110ce:	ee10 2a10 	vmov	r2, s0
 80110d2:	462b      	mov	r3, r5
 80110d4:	ee10 0a10 	vmov	r0, s0
 80110d8:	f7ef f8d6 	bl	8000288 <__aeabi_dsub>
 80110dc:	4602      	mov	r2, r0
 80110de:	460b      	mov	r3, r1
 80110e0:	f7ef fbb4 	bl	800084c <__aeabi_ddiv>
 80110e4:	e7e6      	b.n	80110b4 <__ieee754_sqrt+0x30>
 80110e6:	1512      	asrs	r2, r2, #20
 80110e8:	d074      	beq.n	80111d4 <__ieee754_sqrt+0x150>
 80110ea:	07d4      	lsls	r4, r2, #31
 80110ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80110f0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80110f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80110f8:	bf5e      	ittt	pl
 80110fa:	0fda      	lsrpl	r2, r3, #31
 80110fc:	005b      	lslpl	r3, r3, #1
 80110fe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8011102:	2400      	movs	r4, #0
 8011104:	0fda      	lsrs	r2, r3, #31
 8011106:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801110a:	107f      	asrs	r7, r7, #1
 801110c:	005b      	lsls	r3, r3, #1
 801110e:	2516      	movs	r5, #22
 8011110:	4620      	mov	r0, r4
 8011112:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011116:	1886      	adds	r6, r0, r2
 8011118:	428e      	cmp	r6, r1
 801111a:	bfde      	ittt	le
 801111c:	1b89      	suble	r1, r1, r6
 801111e:	18b0      	addle	r0, r6, r2
 8011120:	18a4      	addle	r4, r4, r2
 8011122:	0049      	lsls	r1, r1, #1
 8011124:	3d01      	subs	r5, #1
 8011126:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801112a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801112e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011132:	d1f0      	bne.n	8011116 <__ieee754_sqrt+0x92>
 8011134:	462a      	mov	r2, r5
 8011136:	f04f 0e20 	mov.w	lr, #32
 801113a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801113e:	4281      	cmp	r1, r0
 8011140:	eb06 0c05 	add.w	ip, r6, r5
 8011144:	dc02      	bgt.n	801114c <__ieee754_sqrt+0xc8>
 8011146:	d113      	bne.n	8011170 <__ieee754_sqrt+0xec>
 8011148:	459c      	cmp	ip, r3
 801114a:	d811      	bhi.n	8011170 <__ieee754_sqrt+0xec>
 801114c:	f1bc 0f00 	cmp.w	ip, #0
 8011150:	eb0c 0506 	add.w	r5, ip, r6
 8011154:	da43      	bge.n	80111de <__ieee754_sqrt+0x15a>
 8011156:	2d00      	cmp	r5, #0
 8011158:	db41      	blt.n	80111de <__ieee754_sqrt+0x15a>
 801115a:	f100 0801 	add.w	r8, r0, #1
 801115e:	1a09      	subs	r1, r1, r0
 8011160:	459c      	cmp	ip, r3
 8011162:	bf88      	it	hi
 8011164:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8011168:	eba3 030c 	sub.w	r3, r3, ip
 801116c:	4432      	add	r2, r6
 801116e:	4640      	mov	r0, r8
 8011170:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011174:	f1be 0e01 	subs.w	lr, lr, #1
 8011178:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801117c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011180:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011184:	d1db      	bne.n	801113e <__ieee754_sqrt+0xba>
 8011186:	430b      	orrs	r3, r1
 8011188:	d006      	beq.n	8011198 <__ieee754_sqrt+0x114>
 801118a:	1c50      	adds	r0, r2, #1
 801118c:	bf13      	iteet	ne
 801118e:	3201      	addne	r2, #1
 8011190:	3401      	addeq	r4, #1
 8011192:	4672      	moveq	r2, lr
 8011194:	f022 0201 	bicne.w	r2, r2, #1
 8011198:	1063      	asrs	r3, r4, #1
 801119a:	0852      	lsrs	r2, r2, #1
 801119c:	07e1      	lsls	r1, r4, #31
 801119e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80111a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80111a6:	bf48      	it	mi
 80111a8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80111ac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80111b0:	4614      	mov	r4, r2
 80111b2:	e781      	b.n	80110b8 <__ieee754_sqrt+0x34>
 80111b4:	0ad9      	lsrs	r1, r3, #11
 80111b6:	3815      	subs	r0, #21
 80111b8:	055b      	lsls	r3, r3, #21
 80111ba:	2900      	cmp	r1, #0
 80111bc:	d0fa      	beq.n	80111b4 <__ieee754_sqrt+0x130>
 80111be:	02cd      	lsls	r5, r1, #11
 80111c0:	d50a      	bpl.n	80111d8 <__ieee754_sqrt+0x154>
 80111c2:	f1c2 0420 	rsb	r4, r2, #32
 80111c6:	fa23 f404 	lsr.w	r4, r3, r4
 80111ca:	1e55      	subs	r5, r2, #1
 80111cc:	4093      	lsls	r3, r2
 80111ce:	4321      	orrs	r1, r4
 80111d0:	1b42      	subs	r2, r0, r5
 80111d2:	e78a      	b.n	80110ea <__ieee754_sqrt+0x66>
 80111d4:	4610      	mov	r0, r2
 80111d6:	e7f0      	b.n	80111ba <__ieee754_sqrt+0x136>
 80111d8:	0049      	lsls	r1, r1, #1
 80111da:	3201      	adds	r2, #1
 80111dc:	e7ef      	b.n	80111be <__ieee754_sqrt+0x13a>
 80111de:	4680      	mov	r8, r0
 80111e0:	e7bd      	b.n	801115e <__ieee754_sqrt+0xda>
 80111e2:	bf00      	nop
 80111e4:	7ff00000 	.word	0x7ff00000

080111e8 <_init>:
 80111e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ea:	bf00      	nop
 80111ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111ee:	bc08      	pop	{r3}
 80111f0:	469e      	mov	lr, r3
 80111f2:	4770      	bx	lr

080111f4 <_fini>:
 80111f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111f6:	bf00      	nop
 80111f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111fa:	bc08      	pop	{r3}
 80111fc:	469e      	mov	lr, r3
 80111fe:	4770      	bx	lr
